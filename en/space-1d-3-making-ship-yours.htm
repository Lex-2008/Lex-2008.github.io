<!doctype html><html><body>
<!-- vim: set sw=3 ts=3: -->
<style>
#frames {width: 586px;}
.ship {display:inline-block; width:275px; vertical-align: top;}
button:focus {outline: 1px solid black;}
</style>


<fieldset id="frames"><legend>Status</legend>
    <style>
     #frames > div {display:none}
    </style>
    <div id="ship_ignored">
        A ship in deep space ignored you, but you didn't see it.
        <button class="default" onclick="gm.step('next_ship')">ok</button>
    </div>
    <div id="approaching_ship">
        Do you want to approach the ship?
        <button onclick="gm.step('meet_ship')">yes</button>
        <button class="default" onclick="gm.step('next_ship')">no</button>
    </div>
    <div id="ai_aggressive">
        Ship is going to attack you. Your actions?
        <button id="a1" onclick="gm.step('player_attacks')">attack</button>
        <button id="s1" onclick="gm.step('player_surrenders')">surrender</button>
    </div>
    <div id="ai_attacks">
        Ship is attacking you. Your actions?
        <button id="aa" onclick="gm.step('player_attacks')">attack</button>
        <button id="as" onclick="gm.step('player_surrenders')">surrender</button>
    </div>
    <div id="ai_ignores">
        Ship is ignoring you. Your actions?
        <button id="ia" onclick="gm.step('player_attacks')">attack</button>
        <button id="ign" onclick="gm.step('next_ship')">ignore</button>
    </div>
    <div id="ai_surrenders">
        Enemy surrendered! Take what you want!
        <button class="default" onclick="gm.step('next_ship')">done</button>
    </div>
    <div id="player_surrenders">
        Your opponent took all they wanted and left victorious. But at least you have your ship!
        <button class="default" onclick="gm.step('next_ship')">ok</button>
    </div>
    <div id="base_offer">
        You've arrived to a space station. It offers you a job:
        transfer <b id="offer_boxes"></b> boxes to the next station and get a reward.
        <span id="offer_cargo_bay">Required cargo bay will be provided free of charge.</span>
        <button class="default" onclick="gm.step('player_accepts_offer')">yes</button>
        <button onclick="gm.step('next_ship')">no</button>
    </div>
    <div id="base_reward">
        You've delivered cargo to a space station. Collect a reward:
        <button id="reward_component" onclick="gm.step('player_accepts_component')"></button>
        <button id="reward_cargo" onclick="gm.step('player_accepts_cargo')"></button>
    </div>
    <div id="dock">
        You've arrived to a space dock.
                  Here you can somewhat reorganize components of your ship.
                  For a price of 1 cargo item, you can move one of components to the tail of your ship.
                  Pay with:
                  <label><input type="radio" name="dock_pay" id="dock_pay_r"> rockets</label>
                  <label><input type="radio" name="dock_pay" id="dock_pay_f"> fuel</label>
        <button class="default" onclick="gm.step('next_ship')">done</button>
    </div>
</fieldset>

<fieldset id="me" class="ship"></fieldset>
<fieldset id="he" class="ship"></fieldset>


<script>

 // ========== game loop ===============

 function GameManager(){
     this.state='next_ship';
     this.my_ship=loadShip();
     this.opponent=null;
     this.last_action='';
     this.last_action='';
     this.step=function(new_state){
         if(new_state){
             this.state=new_state;
         }
                  this.my_ship.components.action=null;
                  this.my_ship.cargo.action=null;
                  if(this.opponent){
                          this.opponent.components.action=null;
                          this.opponent.components.action=null;
                  }
                  // console.log(this.state);
         switch(this.state){
             case 'next_ship':
                                        var random=Math.random();
                                                if(random<0.1){
                                                  this.opponent=null;
                                                        if(this.my_ship.cargo.byType['Rocket']>0 ||
                                                                this.my_ship.cargo.byType['Fuel']>0){
                                                                        this.step('dock');
                                                                return;
                                                        }
                                                }
                                                if(random<0.3){
                                                  this.opponent=null;
                                                        this.step(b.next_state(this.my_ship));
                                                        return;
                                                }
                                        var min=5;//Math.max(5,this.my_ship.components.list.length/2);
                                        var max=Math.max(15,this.my_ship.components.list.length*1.5);
                 this.opponent=randomShip('Opponent',randomInt(min,max),randomInt(5,10));
                 if(compareRadars(this.my_ship, this.opponent)>0){
                     // player sees them first
                     this.step('approaching_ship');
                 } else {
                     // ai decides
                     if(ai.approach(this.my_ship, this.opponent)){
                         this.step('meet_ship');
                     } else {
                         this.opponent=null;
                         this.step('ship_ignored');
                     }
                 }
                 break;
             case 'approaching_ship':
                 render();
                 break;
             case 'ship_ignored':
                 render();
                 break;
             case 'meet_ship':
                 if(ai.first_contact(this.my_ship, this.opponent)){
                     this.step('ai_aggressive');
                 } else {
                     this.step('ai_ignores');
                 }
                 break;
             case 'ai_ignores':
                 $('#ia').disabled=!this.my_ship.can_attack();
                 render();
                 break;
             case 'ai_aggressive':
                 $('#a1').disabled=!this.my_ship.can_attack();
                                        $('#s1').classList[this.my_ship.can_attack()?'remove':'add']('default');
                 render();
                 break;
             case 'ai_attacks':
                       this.my_ship.damage(this.opponent.attack(this.my_ship.components.list.length));
                 $('#aa').disabled=!this.my_ship.can_attack();
                 render();
                 break;
             case 'player_attacks':
                       this.opponent.damage(this.my_ship.attack(this.opponent.components.list.length));
                 if(ai.damage_received(this.my_ship, this.opponent)){
                     this.step('ai_attacks');
                 } else {
                     this.step('ai_surrenders');
                 }
                 break;
             case 'player_surrenders':
                 ai.take_cargo(this.my_ship, this.opponent);
                 this.opponent=null;
                 render();
                 break;
             case 'ai_surrenders':
                                        this.opponent.cargo.action='take_cargo';
                                        this.opponent.cargo.actionText='Take';
                 render(true);
                 break;
             case 'base_offer':
                                          $('#offer_boxes').innerHTML=b.job_offer.boxes;
                                          $('#offer_cargo_bay').style.display=b.job_offer.cargo_bay?'':'none';
                 render();
                 break;
             case 'player_accepts_offer':
                                          if(b.job_offer.cargo_bay){
                                                  this.my_ship.components.add('Cargo Bay');
                                          }
                                          this.my_ship.job=b.job_offer.boxes;
                                          this.my_ship.cargo.add('Box', b.job_offer.boxes);
                 this.step('next_ship');
                 break;
             case 'base_reward':
                                          $('#reward_component').style.display=b.job_reward.component?'':'none';
                                          $('#reward_component').innerHTML=b.job_reward.component;
                                          var cargo_arr=[];
                                          if(b.job_reward.rockets){
                                                  cargo_arr.push(b.job_reward.rockets+' rockets');
                                          }
                                          if(b.job_reward.fuel){
                                                  cargo_arr.push(b.job_reward.fuel+' fuel');
                                          }
                                          $('#reward_cargo').innerHTML=cargo_arr.join(' and ');
                                        if(b.job_reward.component){
                                                $('#reward_component').classList.add('default');
                                                $('#reward_cargo').classList.remove('default');
                                        } else {
                                                $('#reward_cargo').classList.add('default');
                                                $('#reward_component').classList.remove('default');
                                        }
                 render();
                 break;
             case 'player_accepts_component':
                                          this.my_ship.components.add(b.job_reward.component);
                 this.step('next_ship');
                 break;
             case 'player_accepts_cargo':
                                          this.my_ship.cargo.add('Rocket', b.job_reward.rockets);
                                          this.my_ship.cargo.add('Fuel', b.job_reward.fuel);
                 this.step('next_ship');
                 break;
             case 'dock':
                                        // TODO: make selection more clean
                                        $('#dock_pay_f').checked=$('#dock_pay_r').disabled=!(this.my_ship.cargo.byType['Rocket']>0);
                                        $('#dock_pay_r').checked=$('#dock_pay_f').disabled=!(this.my_ship.cargo.byType['Fuel']>0);
                                        this.my_ship.components.action='dock_move';
                                        this.my_ship.components.actionText='Move';
                                        render();
                 break;
             default:
                 alert('unknown state: '+this.state);
         }//switch
         saveShip(this.my_ship);
     }//function
 }

 // ========== ai stuff ===============

ai_interested=function(player,ai) {
        // ignore if have no guns
        if(!ai.can_attack()) return false;
        var v=visiblity(ai, player);
        // <0: comp count
        // 0: comp list
        // 1: cargo count
        // 2+: cargo list
        if(v<0){
                // lvl1: aggressive towards smaller ships
                return player.components.list.length < ai.components.list.length;
        }
        // lvl2+: ignore ships with no cargo
        if(v>0 && player.cargo.list.length==0){
                return false;
        }
        if(v<2){
                // lvl2: aggressive towards ships with less guns
                return (player.components.byType['Gun']||0) < (ai.components.byType['Gun']||0);
        }
        // lvl3: aggressive towards weaker ships
        return player.can_attack() < ai.can_attack();
}

 ai={
     approach: function(player, ai){
         // return true or false - approach or ignore
                  return ai_interested(player, ai);
     },
     first_contact: function(player, ai){
         // return true or false - be aggressive or peaceful
                  return ai_interested(player, ai);
     },
     damage_received: function(player, ai){
         // return true or false - attack or surrender
         if(!ai.can_attack()) return false;
                        var v=visiblity(ai, player);
                  if(v>1) {
                          // lvl3: aggressive towards weaker ships
                          return player.can_attack() < ai.can_attack();
                  }
         // lvl1: aggressive towards smaller ships
         return player.components.list.length <= ai.components.list.length;
     },
     take_cargo: function(player, ai){
         // take what you want
                        var count=Math.min(player.cargo.list.length,ai.cargoMax()-ai.cargo.list.length);
                        player.cargo.pop(count);
     }
 }

 // ========== base stuff ===============

        Base=function(){
                this.job_offer={boxes:0,cargo_bay:false};
                this.job_reward={rockets:0,fuel:0,component:''};
                this.reward=null;
                this.boxesPerBay=cargoPerBay-1; //we leave some free space for player's stuff
                this.free_cargo_limit=4; //how many free cargo boxes to give
                this.next_state=function(ship){
                        if(ship.job>0 && (ship.cargo.byType['Box']||0)==0){
                                // player lost all cargo - forgive them and move on
                                ship.job=0;
                        }
                        if(ship.job>0){
                                // some cargo delivered
                                var delivered=(ship.cargo.byType['Box']||0);
                                this.job_reward.component=(delivered==ship.job)?randomFrom(comps):'';
                                this.job_reward.rockets=randomInt(0,delivered+1);
                                this.job_reward.fuel=delivered-this.job_reward.rockets;
                                ship.cargo.rmByType('Box', delivered);
                                ship.job=0;
                                return 'base_reward';
                        }
                        // new job
                        // first, figure out if player has any space available
                        var free_cargo=ship.cargoMax()-ship.cargo.list.length;
                        if(free_cargo<this.boxesPerBay){
                                if((ship.components.byType['Cargo Bay']||0)<this.free_cargo_limit){
                                        // player has few cargo boxes -- offer them a new one
                                        this.job_offer={boxes:this.boxesPerBay,cargo_bay:true};
                                        return 'base_offer';
                                } else {
                                        // player has many cargo boxes and no free space - bye-bye
                                        return 'next_ship';
                                }
                        } else {
                                // give job offer in multiples of this.boxesPerBay
                                this.job_offer={boxes:Math.floor(free_cargo/this.boxesPerBay)*this.boxesPerBay,cargo_bay:false};
                                return 'base_offer';
                        }
                }
        }

 // ========== helper functions ===============

 function visiblity(ship1,ship2){
     // returns how good ship1 sees ship2
     return (ship1.components.byType['Radar']||0) - (ship2.components.byType['Cloak']||0)
 }

 function compareRadars(ship1,ship2){
     // check which ship sees other one first.
     // Returns >0 if ship1 wins, <0 if ship2 wins
     // first, compare # of (radar-cloak)'s
     var d = (ship1.components.byType['Radar']||0) - (ship2.components.byType['Cloak']||0) -
             ((ship2.components.byType['Radar']||0) - (ship2.components.byType['Cloak']||0))
     // if they match - compare # of elements (bigger ship easier to notice).
     // if these match, too - first ship (player) wins
     if(!d)
        d = (ship2.components.list.length - ship1.components.list.length) || 1
     return d;
 }

 // ========== actions ===============

function take_cargo(how,which){
        if(gm.my_ship.cargo.list.length>=gm.my_ship.cargoMax()){
                return false
        }
        if(how=='byType'){
                gm.opponent.cargo.rmByType(which);
                gm.my_ship.cargo.add(which);
        }
        if(how=='byNumber'){
                var type=gm.opponent.cargo.rmByNumber(which);
                gm.my_ship.cargo.add(type);
        }
        render(true);
}

function dock_move(how,which){
        var pay_with=$('#dock_pay_r').checked?'Rocket':'Fuel';
        if(!gm.my_ship.cargo.byType[pay_with]){
                return false;
        }
        gm.my_ship.cargo.rmByType(pay_with);
        if(how=='byType'){
                gm.my_ship.components.rmByType(which);
                gm.my_ship.components.add(which);
        }
        if(how=='byNumber'){
                var type=gm.my_ship.components.rmByNumber(which);
                gm.my_ship.components.add(type);
        }
        $('#dock_pay_r').disabled=!(gm.my_ship.cargo.byType['Rocket']>0);
        $('#dock_pay_f').disabled=!(gm.my_ship.cargo.byType['Fuel']>0);
        render(true);
}

 // ===== old stuff =====

var cargoPerBay=6;

function Collection(){
        this.list=[];
        this.byType={};
        this.compact=true;
        this.actionButton='';
        this.add=function(type, count){
                if(count===0) return;
                if(count===undefined) count=1;
                if(this.byType[type]){
                        this.byType[type]+=count;
                } else {
                        this.byType[type]=count;
                }
                for(var i=0;i<count;i++){
                        this.list.push(type);
                }
        }
        this.pop=function(count){
                // used with components when attacked
                // and with cargo when a cargo bay is destroyed
                // assumes that this.list has enough items
                if(count===undefined) count=1;
                while(count>0){
                        this.byType[this.list.pop()]--;
                        count--;
                }
                this.clean();
        }
        this.rmByType=function(type,count){
                // used with cargo when selling / using rockets/fuel
                // assumes that such type exists
                if(count===undefined) count=1;
                this.byType[type]-=count;
                while(count>0){
                        this.list.splice(this.list.lastIndexOf(type),1);
                        count--;
                }
                this.clean();
        }
        this.rmByNumber=function(num){
                // used with cargo when selling / using rockets/fuel
                // assumes that number is correct
                var type=this.list[num];
                this.byType[type]--;
                this.list.splice(num,1);
                this.clean();
                return type;
        }
        this.clean=function(){
                // used by above three functions
                Object.keys(this.byType).forEach(type=>{
                        if(this.byType[type]<=0){
                                delete this.byType[type];
                        }
                });
        }
        this.truncate=function(max){
                // used with cargo when a cargo bay is destroyed
                this.pop(this.list.length-max);
                this.clean();
        }
        this.render=function(){
                var button=(a,b)=>this.action?` <button onclick="${this.action}('${a}','${b}')">${this.actionText}</button>`:'';
                if(this.compact) {
                        return `<ul>${Object.keys(this.byType).map(k=>`<li>${k} x${this.byType[k]}${button('byType',k)}</li>`).join('')}</ul>`;
                } else {
                        return `<ul>${this.list.map((a,i)=>`<li>${a}${button('byNumber',i)}</li>`).join('')}</ul>`;
                }
        }
}

 Ship=function(name) {
  this.name=name;
        this.components=new Collection();
        //this.components.add('Head');
        this.cargo=new Collection();
        this.shotsReceived=Math.random()*100;
         this.job=0;
        this.cargoMax=function(){
                //return maximum allowed cargo
                return (this.components.byType['Cargo Bay']||0)*cargoPerBay;
        }
        this.can_attack=function(max){
                  var shots=Math.min((this.components.byType['Gun']||0), (this.cargo.byType['Rocket']||0));
                  return shots;
  }
        this.attack=function(max){
                // launch up to max missiles
                var shots=Math.min(this.components.byType['Gun'], this.cargo.byType['Rocket'], max);
                if(!shots) return 0;
                this.cargo.rmByType('Rocket',shots);
                return shots;
        }
        this.damage=function(shots){
                if(shots==0){return 0};
                var old_sr=this.shotsReceived;
                var new_sr=this.shotsReceived+shots;
                this.shotsReceived=new_sr;
                var total=this.components.list.length;
                var engines=Math.min(this.components.byType['Engine'], this.cargo.byType['Fuel']);
                if(engines){
        this.cargo.rmByType('Fuel',engines);
        var scale=1-Math.sqrt(engines/total);
        shots=Math.floor(new_sr*scale)-Math.floor(old_sr*scale);
    }
                if(shots>=this.components.length){
                        alert('ship destroyed');
                } else {
                        this.components.pop(shots);
                }
                this.cargo.truncate(this.cargoMax());
        }
        this.render=function(domElement,visiblity){
                var randomId=Math.random().toString(36).substring(5);
                var cargoInfo='';
                if(visiblity>=1){
                        cargoInfo=`${this.cargo.list.length} total, ${this.cargoMax() - this.cargo.list.length} free`;
                } else if(visiblity==0){
                        cargoInfo=`${this.cargoMax()} max`;
                } else {
                        cargoInfo=`unknown`;
                }
                domElement.innerHTML=`<legend>${name}</legend>
                        <div>Components (${this.components.list.length} total)
                                ${(visiblity>=0)?`
                                <input type="checkbox" class="compact" id="a${randomId}"><label for="a${randomId}">(compact):</label>
                                `+this.components.render():''}
                        </div><div>
                        Cargo (${cargoInfo})
                                ${(visiblity>=2)?`
                                <input type="checkbox" class="compact" id="b${randomId}"><label for="b${randomId}">(compact):</label>
                                `+this.cargo.render():''}
                        </div>`;
                var self=this;
                if(visiblity>=0){
                        domElement.querySelector(`#a${randomId}`).onclick=function(){self.components.compact=this.checked;self.render(domElement,visiblity)};
                        domElement.querySelector(`#a${randomId}`).checked=self.components.compact;
                }
                if(visiblity>=2){
                        domElement.querySelector(`#b${randomId}`).onclick=function(){self.cargo.compact=this.checked;self.render(domElement,visiblity)};
                        domElement.querySelector(`#b${randomId}`).checked=self.cargo.compact;
                }
        }
}

function randomInt(a,b){
        return Math.floor(Math.random()*(b-a))+a;
}

function randomFrom(a){
        return a[Math.floor(Math.random()*a.length)];
}

var comps=['Engine','Gun','Cargo Bay', 'Engine','Gun','Cargo Bay', 'Radar','Cloak'];

function randomShip(name,numComps,freeCargo){
        var cargos=['Fuel','Rocket'];
        var ship=new Ship(name);
        while(ship.components.list.length<numComps){
                ship.components.add(randomFrom(comps));
        }
        while(ship.cargo.list.length<ship.cargoMax()-freeCargo){
                ship.cargo.add(randomFrom(cargos));
        }
        return ship;
}

 function saveShip(ship){
     var str=JSON.stringify({name:ship.name,
                           components:ship.components.list,
                           cargo:ship.cargo.list,
                           shotsReceived:ship.shotsReceived,
                                                                        job:ship.job});
          try{
       window.localStorage.my_ship=str;
	} catch(e){
                  window.name=str;
     }
 }

 function loadShip(){
     try{
         var data=window.localStorage.my_ship;
     } catch(e) {
         var data=window.name;
                }
     try{
         var data=JSON.parse(data);
         var ship=new Ship(data.name);
         for(var i=0;i<data.components.length;i++){
             ship.components.add(data.components[i]);
         }
         for(var i=0;i<data.cargo.length;i++){
             ship.cargo.add(data.cargo[i]);
         }
         ship.shotsReceived=data.shotsReceived;
         ship.job=data.job;
         return ship;
     } catch(e) {
         console.log(e);
         return randomShip('Your Ship',randomInt(10,20),randomInt(3,10));
     }

 }

 gm=new GameManager();
 b=new Base();
 gm.step();

 function render(see_through){
     gm.my_ship.render($('#me'),999);
     if(gm.opponent){
         if(see_through){
             var vis=999;
         } else {
             var vis=visiblity(gm.my_ship,gm.opponent);
         }
         gm.opponent.render($('#he'),vis);
     } else {
         $('#he').innerHTML='';
     }
                $('#he').style.display=gm.opponent?'':'none';
     $('#frames').className=gm.state;
     var el=$('#'+gm.state+' .default');
     if(el) el.focus();
 }

 function $(q){
           return document.querySelector(q);
 }

$('#frames style').innerHTML+=Array.apply(null,document.querySelectorAll("#frames > div")).map(a=>`#frames.${a.id} #${a.id} {display: block}`).join("\n");

</script>
</body></html>
