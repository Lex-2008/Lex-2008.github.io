{
  "version": 3,
  "sources": ["src/saveableType.ts", "src/cargo.ts", "src/components.ts", "src/utils.ts", "src/ship.ts", "src/draw.ts", "src/index.ts"],
  "sourcesContent": ["export abstract class SaveableObject {\n    static id: string\n\n    get mytype() { return this.constructor as typeof SaveableObject }\n    get typename(): string { return this.mytype.id }\n\n    toJSON() {\n        return { 'type': this.typename }\n    }\n    static fromJSON(type: typeof SaveableObject, data: object) {\n        // same as `return new type()`\n        return new (type as unknown as new () => SaveableObject)()\n    }\n}\n\nexport function fromJSON(data: { 'type': string }) {\n    const type = types[data.type]\n    return type.fromJSON(type, data)\n}\n\n\nexport var types: { [key: string]: typeof SaveableObject } = {}\n\nexport function addType(type: typeof SaveableObject, id: string) {\n    types[id] = type\n    type.id = id\n}\n", "import { SaveableObject, addType } from './saveableType'\n\nexport abstract class Cargo extends SaveableObject { }\n\nexport abstract class UsefulCargo extends Cargo { }\n\nexport class Rocket extends UsefulCargo { }\naddType(Rocket, 'Rocket')\n\nexport class Fuel extends UsefulCargo { }\naddType(Fuel, 'Fuel')\n\nabstract class ResourceCargo extends Cargo { }\n\n", "import { Cargo } from \"./cargo\"\nimport { SaveableObject, addType, fromJSON } from \"./saveableType\"\n\nexport abstract class Component extends SaveableObject { }\n\nexport abstract class UselessComponent extends Component { }\n\nexport class Ballast extends UselessComponent { }\naddType(Ballast, 'Ballast')\n\nexport class Debris extends UselessComponent {\n    original: string = ''\n    toJSON() {\n        return {\n            'type': this.typename,\n            'original': this.original\n        }\n    }\n    static fromJSON(type: typeof SaveableObject, data: { original: string }) {\n        let a = new Debris()\n        a.original = data.original\n        return a\n    }\n}\naddType(Debris, 'Debris')\n\n\n\nexport abstract class NormalComponent extends Component { }\n\nexport class CargoBay extends NormalComponent {\n    cargo: Array<Cargo> = []\n    toJSON() {\n        return {\n            'type': this.typename,\n            'cargo': this.cargo.map(x => x.toJSON())\n        }\n    }\n    static fromJSON(type: typeof SaveableObject, data: { cargo: Array<{ 'type': string }> }) {\n        let a = new CargoBay()\n        a.cargo = data.cargo.map((x: { type: string }) => fromJSON(x))\n        return a\n    }\n}\naddType(CargoBay, 'CargoBay')\n\n\nexport abstract class EngineComponent extends NormalComponent { }\n\nexport abstract class ComputerComponent extends NormalComponent { }\n", "export function randomInt(a: number, b: number): number {\n\tif (a > b) [a, b] = [b, a];\n\treturn Math.floor(Math.random() * (b - a + 1)) + a;\n}\n\nexport function randomFrom<T>(a: T[]): T {\n\treturn a[Math.floor(Math.random() * a.length)];\n}\n\nexport function shuffle<T>(array: T[]): T[] {\n\treturn array.map((a: any) => ({ sort: Math.random(), value: a }))\n\t\t.sort((a: { sort: number; }, b: { sort: number; }) => a.sort - b.sort)\n\t\t.map((a: { value: any; }) => a.value)\n}\n\nexport function seq(a: number): number[] {\n\treturn [...Array(a).keys()]\n\t//=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n\nexport function sleep(ms: number) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}", "import { Cargo, UsefulCargo } from \"./cargo\"\nimport { Ballast, CargoBay, Component, NormalComponent } from \"./components\"\nimport { fromJSON, types } from \"./saveableType\"\nimport { randomFrom, randomInt } from \"./utils\"\n\nexport interface xywh {\n    'x': number,\n    'y': number,\n    'w': number,\n    'h': number\n}\n\nexport class Ship {\n    isAlien: boolean = false\n    rows: Array<Array<Component>> = []\n    offsets: Array<number> = []\n\n    toJSON() {\n        return {\n            'isAlien': this.isAlien,\n            'offsets': this.offsets,\n            'rows': this.rows.map(row => row.map(component => component.toJSON()))\n        }\n    }\n\n    static fromJSON(data: { isAlien: boolean; offsets: number[]; rows: { type: string }[][] }) {\n        const ship = new Ship()\n        ship.isAlien = data.isAlien\n        ship.offsets = data.offsets\n        ship.rows = data.rows.map(row => row.map((x: { type: string }) => fromJSON(x)))\n        return ship;\n    }\n\n    // functions used in drawing\n    get gridSize() {\n        if (this.isAlien) {\n            //\n        } else {\n            let max_pos = 0\n            let max_neg = 0\n            for (let i = 0; i < this.rows.length; i++) {\n                max_pos = Math.max(max_pos, this.rows[i].length - this.offsets[i])\n                max_neg = Math.max(max_neg, this.offsets[i])\n            }\n            return {\n                'x0': 0,\n                'x1': this.rows.length,\n                'y0': max_pos,\n                'y1': max_neg\n            }\n        }\n    }\n    rowToXY(row: number, i: number) {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0\n            }\n        } else {\n            if (i >= this.offsets[row]) {\n                return {\n                    'x': row,\n                    'y': 1 + (i - this.offsets[row])\n                }\n            } else {\n                return {\n                    'x': row,\n                    'y': (i - this.offsets[row])\n                }\n            }\n        }\n    }\n    get passage(): xywh {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0,\n                'w': 0,\n                'h': 0\n            }\n        } else {\n            return {\n                'x': 0,\n                'y': 0,\n                'w': this.rows.length,\n                'h': 1\n            }\n        }\n    }\n\n    static randomShip(size: number) {\n        const rowCount = 4\n        const componentTypes = Object.values(types).filter(x => (x.prototype instanceof NormalComponent)) as Array<typeof Component>\n        const cargoTypes = Object.values(types).filter(x => (x.prototype instanceof UsefulCargo)) as Array<typeof Cargo>\n        const ship = new Ship()\n        ship.rows = [[], [], [], []]\n        ship.offsets = [0, 0, 0, 0]\n        for (let i = 0; i < size; i++) {\n            let row = randomInt(0, rowCount - 1)\n            let componentType = randomFrom(componentTypes) as unknown as new () => Component\n            let component = new componentType()\n            if (component instanceof CargoBay) {\n                let cargos = randomInt(0, 4)\n                for (let j = 0; j < cargos; j++) {\n                    let cargoType = randomFrom(cargoTypes) as unknown as new () => Cargo\n                    component.cargo.push(new cargoType())\n                }\n            }\n            ship.rows[row].push(component)\n        }\n        for (let i = 0; i < ship.rows.length; i++) {\n            ship.offsets[i] = randomInt(0, ship.rows[i].length)\n        }\n        ship.balanceBallast()\n        return ship\n    }\n\n    balanceBallast() {\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1\n            // balance offsets\n            for (var i = 0; i <= max; i++) {\n                while (this.offsets[i] < this.offsets[max - i]) {\n                    this.rows[i].unshift(new Ballast())\n                    this.offsets[i]++\n                }\n            }\n            // add ballast to balance \n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].length < this.rows[max - i].length) {\n                    this.rows[i].push(new Ballast())\n                }\n            }\n            // remove extra ballast from head\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i][0] instanceof Ballast\n                    && this.rows[max - i][0] instanceof Ballast) {\n                    this.rows[i].shift()\n                    this.rows[max - i].shift()\n                    this.offsets[i]--\n                    this.offsets[max - i]++\n                }\n            }\n            // remove extra ballast from tail\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].at(-1) instanceof Ballast\n                    && this.rows[max - i].at(-1) instanceof Ballast) {\n                    this.rows[i].pop()\n                    this.rows[max - i].pop()\n                }\n            }\n            // remove empty rows?\n        }\n    }\n}", "import { Component } from \"./components\"\nimport { Ship, xywh } from \"./ship\";\n\nexport const componentSize = 50\nexport const componentOffset = 5\n\nfunction drawComponent(ctx: CanvasRenderingContext2D, x: number, y: number, ship: Ship, component: Component, cellName: string, zeroth: boolean) {\n    if (ship.isAlien) {\n        ctx.rect(x * componentSize, y * componentSize + componentOffset, componentSize, componentSize - 2 * componentOffset);\n    } else {\n        ctx.rect(x * componentSize + componentOffset, y * componentSize, componentSize - 2 * componentOffset, componentSize);\n    }\n    ctx.strokeStyle = \"white\";\n    ctx.fillStyle = \"white\";\n    ctx.stroke();\n    ctx.textBaseline = 'top';\n    ctx.fillText(cellName, x * componentSize + componentOffset, y * componentSize)\n    ctx.fillText(component.typename[0], x * componentSize + componentOffset, y * componentSize + 16)\n}\n\nfunction drawPassage(ctx: CanvasRenderingContext2D, x0: number, y0: number, ship: Ship) {\n    const p = ship.passage\n    ctx.rect((x0 + p.x) * componentSize, (y0 + p.y) * componentSize, p.w * componentSize, p.h * componentSize);\n    ctx.strokeStyle = \"white\";\n    ctx.fillStyle = \"white\";\n    ctx.stroke();\n    ctx.textBaseline = 'top';\n    //ctx.fillText(cellName, x * componentSize + componentOffset, y * componentSize)\n}\n\nexport function drawShip(ctx: CanvasRenderingContext2D, x0, y0, ship: Ship) {\n    for (let row = 0; row < ship.rows.length; row++) {\n        for (let i = 0; i < ship.rows[row].length; i++) {\n            let component = ship.rows[row][i]\n            let xy = ship.rowToXY(row, i)\n            let cellName = String.fromCharCode(65 + row) + xy.y\n            drawComponent(ctx, x0 + xy.x, y0 - xy.y, ship, component, cellName, i == ship.offsets[row])\n        }\n    }\n    drawPassage(ctx, x0, y0, ship)\n}", "//import { } from \"./draw.js\";\nimport { Ship } from \"./ship.js\";\nimport { CargoBay } from \"./components.js\";\nimport { fromJSON, types } from \"./saveableType.js\";\nimport { Rocket } from \"./cargo.js\";\nimport { componentSize, drawShip } from \"./draw.js\";\n\nexport function gebi(id: string) {\n    const element = document.getElementById(id);\n    if (!element) throw ReferenceError(`element ${id} not found`);\n    return element;\n}\nexport function gibi(id: string) {\n    const element = gebi(id);\n    if (!(element instanceof HTMLInputElement)) throw ReferenceError(`element ${id} is not input`);\n    return element;\n}\n\nif (location.hostname == 'localhost' || location.hostname == '127.0.0.1') {\n    new EventSource('/esbuild').addEventListener('change', () => location.reload());\n}\n\n\n\nvar s = Ship.randomShip(15);\n\nvar c = gebi(\"myCanvas\") as HTMLCanvasElement;\nvar ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n\nfunction x_draw(s: Ship) {\n    const gs = s.gridSize\n    c.width = componentSize * (gs?.x0 + gs?.x1 + 2)\n    c.height = componentSize * (gs?.y0 + gs?.y1 + 3)\n    drawShip(ctx, gs?.x0 + 1, gs?.y0 + 1, s)\n}\n\nfunction x_rand() {\n    s = Ship.randomShip(15);\n    x_draw(s);\n}\n\nfunction x_save() {\n    localStorage.space2d3_1_ship = JSON.stringify(s.toJSON())\n}\n\nfunction x_load() {\n    s = Ship.fromJSON(JSON.parse(localStorage.space2d3_1_ship))\n    x_draw(s)\n}\n\nx_draw(s);\ngebi('save').onclick = x_save;\ngebi('load').onclick = x_load;\ngebi('random').onclick = x_rand;"],
  "mappings": "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",
  "names": ["SaveableObject", "type", "data", "fromJSON", "types", "addType", "id", "Cargo", "SaveableObject", "UsefulCargo", "Rocket", "addType", "Fuel", "Component", "SaveableObject", "UselessComponent", "Ballast", "addType", "Debris", "_Debris", "type", "data", "a", "NormalComponent", "CargoBay", "_CargoBay", "x", "fromJSON", "randomInt", "a", "b", "randomFrom", "Ship", "_Ship", "row", "component", "data", "ship", "x", "fromJSON", "max_pos", "max_neg", "i", "size", "componentTypes", "types", "NormalComponent", "cargoTypes", "UsefulCargo", "randomInt", "componentType", "randomFrom", "CargoBay", "cargos", "j", "cargoType", "max", "Ballast", "componentSize", "componentOffset", "drawComponent", "ctx", "x", "y", "ship", "component", "cellName", "zeroth", "drawPassage", "x0", "y0", "p", "drawShip", "row", "i", "xy", "gebi", "id", "element", "gibi", "s", "Ship", "c", "ctx", "x_draw", "gs", "componentSize", "drawShip", "x_rand", "x_save", "x_load"]
}
