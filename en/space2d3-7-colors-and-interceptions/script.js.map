{
  "version": 3,
  "sources": ["src/colorCalc.ts", "src/utils.ts", "src/saveableType.ts", "src/cargo.ts", "src/const.ts", "src/geometry.ts", "src/draw.ts", "src/interceptionCalc.ts", "src/components.ts", "src/ship.ts", "src/planets.ts", "src/stars.ts", "src/gameState.ts", "src/playerShip.ts", "src/walker.ts", "src/index.ts"],
  "sourcesContent": ["// functions to convert RGB to L*ab and back\n// from http://www.easyrgb.com/en/math.php\n// via https://stackoverflow.com/q/15408522\n// not actually used here, though\n\nexport function RGBtoLAB(hex: string) {\n    // hexToRgb from https://stackoverflow.com/a/11508164\n    const bigint = parseInt(hex, 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n\n    let var_R = (r / 255); //R from 0 to 255\n    let var_G = (g / 255); //G from 0 to 255\n    let var_B = (b / 255); //B from 0 to 255\n\n    if (var_R > 0.04045) var_R = Math.pow(((var_R + 0.055) / 1.055), 2.4);\n    else var_R = var_R / 12.92;\n    if (var_G > 0.04045) var_G = Math.pow(((var_G + 0.055) / 1.055), 2.4);\n    else var_G = var_G / 12.92;\n    if (var_B > 0.04045) var_B = Math.pow(((var_B + 0.055) / 1.055), 2.4);\n    else var_B = var_B / 12.92;\n\n    var_R = var_R * 100;\n    var_G = var_G * 100;\n    var_B = var_B * 100;\n\n    //Observer. = 2\u0412\u00B0, Illuminant = D65\n    const x = var_R * 0.4124 + var_G * 0.3576 + var_B * 0.1805;\n    const y = var_R * 0.2126 + var_G * 0.7152 + var_B * 0.0722;\n    const z = var_R * 0.0193 + var_G * 0.1192 + var_B * 0.9505;\n    let ref_X = 95.047;\n    let ref_Y = 100;\n    let ref_Z = 108.883;\n\n    let var_X = x / ref_X; //ref_X =  95.047   Observer= 2\u0412\u00B0, Illuminant= D65\n    let var_Y = y / ref_Y; //ref_Y = 100.000\n    let var_Z = z / ref_Z; //ref_Z = 108.883\n\n    if (var_X > 0.008856) var_X = Math.pow(var_X, 1 / 3);\n    else var_X = (7.787 * var_X) + (16 / 116);\n    if (var_Y > 0.008856) var_Y = Math.pow(var_Y, 1 / 3);\n    else var_Y = (7.787 * var_Y) + (16 / 116);\n    if (var_Z > 0.008856) var_Z = Math.pow(var_Z, 1 / 3);\n    else var_Z = (7.787 * var_Z) + (16 / 116);\n\n    let CIE_L = (116 * var_Y) - 16;\n    let CIE_a = 500 * (var_X - var_Y);\n    let CIE_b = 200 * (var_Y - var_Z);\n\n    return [CIE_L, CIE_a, CIE_b];\n}\n\n\nexport function LABtoRGB([l, a, b]) {\n    let var_Y = (l + 16) / 116;\n    let var_X = a / 500 + var_Y;\n    let var_Z = var_Y - b / 200;\n\n    const ref_X = 95.047;\n    const ref_Y = 100;\n    const ref_Z = 108.883;\n\n    let [X, Y, Z] = [var_X, var_Y, var_Z]\n        .map(n => Math.pow(n, 3) > 0.008856\n            ? Math.pow(n, 3)\n            : (n - 16 / 116) / 7.787);\n\n    X *= ref_X;\n    Y *= ref_Y;\n    Z *= ref_Z;\n\n    var_X = X / 100;\n    var_Y = Y / 100;\n    var_Z = Z / 100;\n\n    let var_R = var_X * 3.2406 + var_Y * (-1.5372) + var_Z * (-0.4986);\n    let var_G = var_X * (-0.9689) + var_Y * 1.8758 + var_Z * 0.0415;\n    let var_B = var_X * 0.0557 + var_Y * (-0.204) + var_Z * 1.057;\n\n    [var_R, var_G, var_B] = [var_R, var_G, var_B]\n        .map(n => n > 0.0031308\n            ? 1.055 * Math.pow(n, (1 / 2.4)) - 0.055\n            : 12.92 * n)\n        .map(n => Math.round(n * 255));\n\n    return (1 << 24 | var_R << 16 | var_G << 8 | var_B).toString(16).slice(1);\n}\n\n\n// slightly simplified functions which we actually use\nexport function RGBtoL(hex: string) {\n    // hexToRgb from https://stackoverflow.com/a/11508164\n    const bigint = parseInt(hex, 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n\n    let var_R = (r / 255); //R from 0 to 255\n    let var_G = (g / 255); //G from 0 to 255\n    let var_B = (b / 255); //B from 0 to 255\n\n    if (var_R > 0.04045) var_R = Math.pow(((var_R + 0.055) / 1.055), 2.4);\n    else var_R = var_R / 12.92;\n    if (var_G > 0.04045) var_G = Math.pow(((var_G + 0.055) / 1.055), 2.4);\n    else var_G = var_G / 12.92;\n    if (var_B > 0.04045) var_B = Math.pow(((var_B + 0.055) / 1.055), 2.4);\n    else var_B = var_B / 12.92;\n\n    var_R = var_R * 100;\n    var_G = var_G * 100;\n    var_B = var_B * 100;\n\n    //Observer. = 2\u0412\u00B0, Illuminant = D65\n    const y = var_R * 0.2126 + var_G * 0.7152 + var_B * 0.0722;\n    let ref_Y = 100;\n\n    let var_Y = y / ref_Y; //ref_Y = 100.000\n\n    if (var_Y > 0.008856) var_Y = Math.pow(var_Y, 1 / 3);\n    else var_Y = (7.787 * var_Y) + (16 / 116);\n\n    let CIE_L = (116 * var_Y) - 16;\n\n    return CIE_L;\n}\n\n\nexport function LtoRGB(l) {\n    let var_Y = (l + 16) / 116;\n    let var_X = var_Y;\n    let var_Z = var_Y;\n\n    const ref_X = 95.047;\n    const ref_Y = 100;\n    const ref_Z = 108.883;\n\n    let [X, Y, Z] = [var_X, var_Y, var_Z]\n        .map(n => Math.pow(n, 3) > 0.008856\n            ? Math.pow(n, 3)\n            : (n - 16 / 116) / 7.787);\n\n    X *= ref_X;\n    Y *= ref_Y;\n    Z *= ref_Z;\n\n    var_X = X / 100;\n    var_Y = Y / 100;\n    var_Z = Z / 100;\n\n    let var_R = var_X * 3.2406 + var_Y * (-1.5372) + var_Z * (-0.4986);\n\n    let r = var_R > 0.0031308\n        ? 1.055 * Math.pow(var_R, (1 / 2.4)) - 0.055\n        : 12.92 * var_R;\n    r = Math.round(r * 255);\n\n    return (1 << 24 | r << 16 | r << 8 | r).toString(16).slice(1);\n}\n", "import { RGBtoL, LtoRGB } from \"./colorCalc\";\nimport { Point } from \"./geometry\";\nimport { Ship } from \"./ship\";\ninterface hasToHTML {\n\ttoHTML(sayType: boolean, showTimeFrom?: Ship): string;\n}\n\nexport function randomInt(a: number, b: number): number {\n\tif (a > b) [a, b] = [b, a];\n\treturn Math.floor(Math.random() * (b - a + 1)) + a;\n}\n\nexport function randomFrom<T>(a: T[]): T {\n\treturn a[Math.floor(Math.random() * a.length)];\n}\n\nexport function shuffle<T>(array: T[]): T[] {\n\treturn array.map((a: any) => ({ sort: Math.random(), value: a }))\n\t\t.sort((a: { sort: number; }, b: { sort: number; }) => a.sort - b.sort)\n\t\t.map((a: { value: any; }) => a.value)\n}\n\nexport function seq(a: number): number[] {\n\treturn [...Array(a).keys()]\n\t//=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n\nexport function sleep(ms: number) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function gebi(id: string) {\n\tconst element = document.getElementById(id);\n\tif (!element) throw ReferenceError(`element ${id} not found`);\n\treturn element;\n}\nexport function gibi(id: string) {\n\tconst element = gebi(id);\n\tif (!(element instanceof HTMLInputElement)) throw ReferenceError(`element ${id} is not input`);\n\treturn element;\n}\n\nexport function setStatus(type: 'ship' | 'planet', id: string, obj?: hasToHTML, days?: number) {\n\tgebi(`status_${type}`).innerHTML = `#status_${type}_${id}{display:block !important}`;\n\tif (obj) gebi(`status_${type}_${id}_name`).innerHTML = obj.toHTML(true);\n\tif (days) gebi(`status_${type}_${id}_days`).innerText = days.toString();\n}\n\nexport function showDate(today: number) {\n\tgebi('now-day').innerText = (today + 1).toString();\n\tconst year = Math.floor(today / 300) + 3000;\n\tconst month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'][Math.floor((today % 300) / 30)];\n\tconst day = Math.floor(today % 30) + 1;\n\tgebi('now-date').innerText = `${day} ${month} ${year}`;\n\t// const time = now % 1;\n\t// gebi('now-hr').innerText = Math.floor(time * 25);\n\t// gebi('now-min').innerText = Math.round((time * 25 * 50) % 25);\n}\n\nexport function calcColor2(hex: string) {\n\tconst l = RGBtoL(hex);\n\tif (l < 50) return LtoRGB(Math.min(l + 50, 100));\n\telse return LtoRGB(Math.max(l - 50, 0));\n}\n\nexport function assert(condition: any, msg?: any, ...args): asserts condition {\n\tif (!condition) {\n\t\tif (args.length) console.error(msg, ...args);\n\t\tthrow new Error(msg);\n\t}\n}\n\nexport function toPoint(a: Point): Point {\n\treturn { 'x': a.x, 'y': a.y };\n}", "export abstract class SaveableObject {\n    static id: string\n\n    get mytype() { return this.constructor as typeof SaveableObject }\n    get typename(): string { return this.mytype.id }\n\n    toJSON() {\n        return { 't': this.typename }\n    }\n    static fromJSON(type: typeof SaveableObject, data: object) {\n        // same as `return new type()`\n        return new (type as unknown as new () => SaveableObject)()\n    }\n}\n\nexport function fromJSON(data: { 't': string }) {\n    const type = types[data.t];\n    return type.fromJSON(type, data);\n}\n\n\nexport var types: { [key: string]: typeof SaveableObject } = {}\n\nexport function addType(type: typeof SaveableObject, id: string) {\n    types[id] = type\n    type.id = id\n}\n", "import { SaveableObject, addType } from './saveableType'\n\nexport abstract class Cargo extends SaveableObject {\n    static symbol: string;\n    toText() {\n        return `${(this.mytype as typeof Cargo).symbol || ''} ${this.typename}`;\n    }\n}\nexport function isCargoType(type: typeof SaveableObject): type is typeof Cargo { return type.prototype instanceof Cargo };\n\nexport abstract class UsefulCargo extends Cargo { }\n\nexport class Rocket extends UsefulCargo {\n    static symbol = '\uD83D\uDE80';\n}\naddType(Rocket, 'Rocket')\n\nexport class Fuel extends UsefulCargo {\n    static symbol = '\uD83D\uDEE2\uFE0F';\n}\naddType(Fuel, 'Fuel')\n\nexport abstract class ResourceCargo extends Cargo { }\nexport function isResourceType(type: typeof SaveableObject): type is typeof ResourceCargo { return type.prototype instanceof ResourceCargo };\n\nexport class Water extends ResourceCargo {\n    static readonly color = 'blue';\n    static symbol = '\uD83D\uDCA7\uFE0F';\n}\naddType(Water, 'Water')\n\nexport class Iron extends ResourceCargo {\n    static readonly color = 'yellow';\n    static symbol = '\uFE0F\u26CF\uFE0F';\n}\naddType(Iron, 'Iron')\n\nexport class Food extends ResourceCargo {\n    static readonly color = 'green';\n    static symbol = '\uFE0F\uD83E\uDD6B';\n}\naddType(Food, 'Food')\n\nexport class Radioactives extends ResourceCargo {\n    static readonly color = 'red';\n    static symbol = '\uFE0F\u2622\uFE0F';\n}\naddType(Radioactives, 'Radioactives')\n\nexport interface MissionBoxData {\n    t: string;\n    f: string;\n    to: string;\n    tot: number;\n}\nexport class MissionBox extends Cargo {\n    static symbol = '\uFE0F\uD83D\uDCE6\uFE0F';\n    from: string;\n    to: string;\n    total: number;\n    toText() {\n        return `${(this.mytype as typeof Cargo).symbol || ''} ${this.typename} to <b>${this.to}</b> planet`;\n    }\n    toJSON(): MissionBoxData {\n        return {\n            't': this.typename,\n            'f': this.from,\n            'to': this.to,\n            'tot': this.total,\n        }\n    }\n\n    static fromJSON(type: typeof MissionBox, data: MissionBoxData): MissionBox {\n        const ret = new type();\n        ret.from = data.f;\n        ret.to = data.to;\n        ret.total = data.tot;\n        return ret;\n    }\n}\naddType(MissionBox, 'MissionBox')\nexport function isMissionBox(item: Cargo): item is MissionBox { return item instanceof MissionBox };", "export const shipBaseSpeed = 0.1\nexport const planet_size = 0.2\nexport const cargoPerCargoBay = 5\n//Note: if cargoPerDeliveryMission > cargoPerCargoBay,\n// then how can we give a free cardo bay if a ship has zero?\nexport const cargoPerDeliveryMission = cargoPerCargoBay - 1\nexport const cargoPerCargoMission = 20\nexport const maxFreeCargoBays = 4\nexport const minDaysAfterIntercept = 2\nexport const shipNames = [\"Beast of Burden\", \"Blade of Occam\", \"Lance of Centri\", \"Wasp\", \"Stophy's Venture\", \"Enterprise\", \"Sally Ride\", \"Stellar Explorer\", \"First Light\", \"Lance of Zhargi\", \"Adventurer of Bacia\", \"Astral Enterprise\", \"Star of Kali\", \"Isaur Gypsy\", \"Astral Pioneer\", \"Celestial Maiden\", \"Luna Moth\", \"Harrier\", \"Fralphua's Opportunity\", \"Tory's Venture\", \"Star of Kini\", \"Flame of Rasi\", \"Bolo\", \"Edwin Hubble\", \"Ycon Express\", \"Wren\", \"Spirit of Taly\", \"Illustrious\", \"Yukon\", \"Bara Traveler\", \"Horizon\", \"Star of Icon\", \"Lady of Ghera\", \"Celestial Jewel\", \"Youthful Indiscretion\", \"Gauntlet of Anic\", \"Shoole Trader\", \"Bake Clipper\", \"Jewel of Jocia\", \"Solar Constellation\", \"Uctim Clipper\", \"Castle of Syko\", \"Stellar Jewel\", \"Profit Margin\", \"Irregular of Taly\", \"Swallow\", \"Pathfinder\", \"Celestial Destiny\", \"Spirit of Inquiry\"];\nexport const shipColors = [\"000000\", \"2f4f4f\", \"556b2f\", \"8b4513\", \"8b0000\", \"808000\", \"483d8b\", \"5f9ea0\", \"008000\", \"3cb371\", \"4682b4\", \"d2691e\", \"9acd32\", \"cd5c5c\", \"00008b\", \"32cd32\", \"daa520\", \"8fbc8f\", \"800080\", \"b03060\", \"ff0000\", \"00ced1\", \"ff8c00\", \"ffd700\", \"ffff00\", \"0000cd\", \"deb887\", \"00ff00\", \"00fa9a\", \"8a2be2\", \"dc143c\", \"00bfff\", \"adff2f\", \"ff6347\", \"da70d6\", \"b0c4de\", \"ff00ff\", \"f0e68c\", \"6495ed\", \"dda0dd\", \"ff1493\", \"7b68ee\", \"ffa07a\", \"afeeee\", \"98fb98\", \"7fffd4\", \"fafad2\", \"ff69b4\", \"ffb6c1\", \"fff0f5\"];\n// TODO: store color2, too\n// not all of these color names can be used to draw on canvas\n// export const shipColors = ['black', 'darkslategray', 'darkolivegreen', 'saddlebrown', 'darkred', 'olive', 'darkslateblue', 'cadetblue', 'green', 'mediumseagreen', 'steelblue', 'chocolate', 'yellowgreen', 'indianred', 'darkblue', 'limegreen', 'goldenrod', 'darkseagreen', 'purple', 'maroon3', 'red', 'darkturquoise', 'darkorange', 'gold', 'yellow', 'mediumblue', 'burlywood', 'lime', 'mediumspringgreen', 'blueviolet', 'crimson', 'deepskyblue', 'greenyellow', 'tomato', 'orchid', 'lightsteelblue', 'fuchsia', 'khaki', 'cornflower', 'plum', 'deeppink', 'mediumslateblue', 'lightsalmon', 'paleturquoise', 'palegreen', 'aquamarine', 'lightgoldenrod', 'hotpink', 'lightpink', 'lavenderblush']\n", "type vector = [number, number];\n\nfunction normVector(x: number, y: number): vector {\n\tconst d = Math.hypot(x, y);\n\treturn [x / d, y / d];\n}\n\nfunction scalarMul(v1: vector, v2: vector): number {\n\treturn v1[0] * v2[0] + v1[1] * v2[1];\n}\n\nexport interface Point {\n\tx: number,\n\ty: number\n}\n\n// see http://www.gamedev.ru/code/forum/?id=74832 and https://ru.wikipedia.org/wiki/\u0420\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u0435_\u043E\u0442_\u0442\u043E\u0447\u043A\u0438_\u0434\u043E_\u043F\u0440\u044F\u043C\u043E\u0439_\u043D\u0430_\u043F\u043B\u043E\u0441\u043A\u043E\u0441\u0442\u0438#\u041F\u0440\u044F\u043C\u0430\u044F_\u0437\u0430\u0434\u0430\u043D\u0430_\u0434\u0432\u0443\u043C\u044F_\u0442\u043E\u0447\u043A\u0430\u043C\u0438\nfunction dotOnLine(a: Point, b: Point, p: Point): vector {\n\tconst v = normVector(a.x - b.x, a.y - b.y);\n\tconst m = scalarMul(v, [p.x - b.x, p.y - b.y]);\n\treturn [b.x + v[0] * m, b.y + v[1] * m];\n}\n\n// does a-b line cross obj p with size?\nexport function lineCrossesObj(a: Point, b: Point, p: Point, size: number) {\n\tconst [x, y] = dotOnLine(a, b, p);\n\treturn x >= Math.min(a.x, b.x) &&\n\t\tx <= Math.max(a.x, b.x) &&\n\t\ty >= Math.min(a.y, b.y) &&\n\t\ty <= Math.max(a.y, b.y) &&\n\t\tMath.hypot(x - p.x, y - p.y) < size;\n}\n\n\n// see https://e-maxx.ru/algo/segments_intersection_checking\n\nfunction area(a: Point, b: Point, c: Point) {\n\treturn (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n}\n\nfunction intersect_1(a: number, b: number, c: number, d: number) {\n\tif (a > b) [a, b] = [b, a];\n\tif (c > d) [c, d] = [d, c];\n\treturn Math.max(a, c) <= Math.min(b, d);\n}\n\nexport function intersect(a: Point, b: Point, c: Point, d: Point) {\n\treturn intersect_1(a.x, b.x, c.x, d.x)\n\t\t&& intersect_1(a.y, b.y, c.y, d.y)\n\t\t&& area(a, b, c) * area(a, b, d) <= 0\n\t\t&& area(c, d, a) * area(c, d, b) <= 0;\n}\n", "import { Airlock, Cloak, Component, ComputerComponent, Passage } from \"./components\"\nimport { WalkMap } from \"./walker\";\nimport { Ship, xywh } from \"./ship\";\nimport { Planet } from \"./planets\";\nimport { Star } from \"./stars\";\nimport { planet_size } from \"./const\";\nimport { gs } from \"./gameState\";\nimport { PlayerShip } from \"./playerShip\";\nimport { gebi } from \"./utils\";\n\nexport const componentSize = 50\nexport const componentOffset = 5\n\nfunction drawComponent(ctx: CanvasRenderingContext2D, x: number, y: number, ship: Ship, component: Component, map: WalkMap) {\n    const textOffset = 5;\n    ctx.beginPath();\n    if (ship.isAlien) {\n        ctx.rect(x * componentSize, y * componentSize + componentOffset, componentSize, componentSize - 2 * componentOffset);\n    } else {\n        ctx.rect(x * componentSize + componentOffset, y * componentSize, componentSize - 2 * componentOffset, componentSize);\n    }\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = ship.color;\n    ctx.fillStyle = ship.color2;\n    ctx.fill();\n    ctx.stroke();\n    ctx.textBaseline = 'top';\n    ctx.fillStyle = ship.color;\n    ctx.fillText(component.cellName || '', x * componentSize + componentOffset + textOffset, y * componentSize + textOffset)\n    let componentTitle = component.typename[0];\n    if (component instanceof ComputerComponent) componentTitle += 'C';\n    if (component instanceof Cloak) componentTitle += 'l';\n    ctx.fillText(componentTitle, x * componentSize + componentOffset + textOffset, y * componentSize + textOffset + 16);\n    map[x][y] = {\n        canBeHere: true,\n        canGoX: ship.isAlien,\n        canGoY: !ship.isAlien,\n        ship: ship,\n        component: component,\n    }\n}\n\nfunction drawPassage(ctx: CanvasRenderingContext2D, x0: number, y0: number, ship: Ship, map: WalkMap) {\n    const p = ship.passage\n    ctx.beginPath();\n    ctx.rect((x0 + p.x) * componentSize, (y0 + p.y) * componentSize, p.w * componentSize, p.h * componentSize);\n    ctx.strokeStyle = ship.color;\n    ctx.fillStyle = ship.color2;\n    ctx.fill();\n    ctx.stroke();\n    let component = new Passage();\n    for (let x = 0; x < p.w; x++)\n        for (let y = 0; y < p.h; y++)\n            map[x + x0][y + y0] = {\n                canBeHere: true,\n                canGoX: true,\n                canGoY: true,\n                ship: ship,\n                component: component,\n            }\n}\n\nexport function drawAirlock(ctx: CanvasRenderingContext2D, x: number, y: number, a: Ship, b: Ship, map: WalkMap) {\n    // NOTE: YOUR ship is always the lower one\n    // TODO: this is for normal-to-normal ship. How it will look with alien ships - TBD\n    const gradient = ctx.createLinearGradient(x * componentSize + componentOffset, y * componentSize, x * componentSize + componentOffset, (y + 1) * componentSize);\n    const gradient2 = ctx.createLinearGradient(x * componentSize + componentOffset, y * componentSize, x * componentSize + componentOffset, (y + 1) * componentSize);\n    gradient.addColorStop(0, a.color);\n    gradient.addColorStop(1, b.color);\n    gradient2.addColorStop(0, a.color2);\n    gradient2.addColorStop(1, b.color2);\n    ctx.strokeStyle = gradient;\n    ctx.fillStyle = gradient2;\n    ctx.beginPath();\n    ctx.moveTo(x * componentSize + componentOffset, y * componentSize);\n    ctx.lineTo(x * componentSize + componentOffset * 2, (y + 0.5) * componentSize);\n    ctx.lineTo(x * componentSize + componentOffset, (y + 1) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset, (y + 1) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset * 2, (y + 0.5) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset, y * componentSize);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n    map[x][y] = {\n        canBeHere: true,\n        canGoY: true,\n        component: new Airlock(),\n    }\n}\n\nexport function drawShip(ctx: CanvasRenderingContext2D, x0, y0, ship: Ship, map: WalkMap) {\n    // draw ship INTERIOR\n    for (let row = 0; row < ship.rows.length; row++) {\n        for (let i = 0; i < ship.rows[row].length; i++) {\n            let component = ship.rows[row][i];\n            let xy = ship.rowToXY(row, i);\n            component.cellName = String.fromCharCode(65 + row) + xy.y;\n            drawComponent(ctx, x0 + xy.x, y0 - xy.y, ship, component, map);\n        }\n    }\n    drawPassage(ctx, x0, y0, ship, map);\n}\n\nexport function draw_ship(ctx: CanvasRenderingContext2D, ship: Ship, cell_size: number, myRadars?: number) {\n    // draw ship ON STAR MAP\n    const x = (ship.x) * cell_size;\n    const y = (ship.y) * cell_size;\n    // console.log('draw', ship.color, x, y);\n    ctx.fillStyle = ship.color;\n    ctx.fillRect(x - 1, y - 1, 3, 3);\n    if (myRadars !== undefined && ship instanceof PlayerShip) {\n        for (let r = 1; r <= myRadars; r++) {\n            ctx.beginPath();\n            ctx.arc(x, y, cell_size * r, 0, 7);\n            ctx.strokeStyle = 'red';\n            ctx.stroke();\n        }\n    }\n}\n\nlet x0 = 0;\nlet y0 = 0;\nlet c1 = '';\nlet c2 = '';\n\n// function drawBackground(ts) {\n//     window.requestAnimationFrame(drawBackground);\n//     const c = gebi('systemCanvas') as HTMLCanvasElement;\n//     const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n//     const max_size = ctx.canvas.width;\n//     const cell_size = max_size / (gs.star.size);\n//     gs.tick(ts);\n//     const x = Math.round((gs.playerShip.x) * cell_size);\n//     const y = Math.round((gs.playerShip.y) * cell_size);\n//     if (x === x0 && y === y0) return;\n//     x0 = x; y0 = y;\n//     // console.log(Math.round(x), Math.round(y));\n//     const p = ctx.getImageData(x, y, 1, 1).data;\n//     const c0 = rgbToHex(p, 0);\n//     if (c0 === c1 && c1 === c2) return;\n//     // gebi('canvasBox').style.background = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n//     // gebi('canvasTopBG').style.background = `linear-gradient(to right,#${rgbToHex(p, 0)},#${rgbToHex(p, 4)})`;\n//     // gebi('canvasBox').style.background = `linear-gradient(to right,#${rgbToHex(p, 8)},#${rgbToHex(p, 12)})`;\n//     // if (c0 === c1)\n//     gebi('canvasBox').style.background = `#${c0}`;\n//     // else gebi('canvasBox').style.background = `linear-gradient(#${c0},#${c1})`;\n//     // console.log(x, y, c0, c1, c2);\n//     c2 = c1;\n//     c1 = c0;\n// }\n\n// window.requestAnimationFrame(drawBackground);\n\nexport function draw_planet(ctx: CanvasRenderingContext2D, planet: Planet, cell_size: number, x?: number, y?: number) {\n    if (x === undefined) x = (planet.x) * cell_size;\n    if (y === undefined) y = (planet.y) * cell_size;\n    var grd = ctx.createRadialGradient(x - 1, y - 1, 2, x, y, planet_size * cell_size);\n    grd.addColorStop(0, planet.color_in);\n    grd.addColorStop(1, planet.color_out);\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.arc(x, y, planet_size * cell_size, 0, 7);\n    ctx.fill();\n}\n\n\nexport function draw_star(ctx: CanvasRenderingContext2D, star: Star) {\n    //calc_sizes(ctx, star);\n    const max_size = ctx.canvas.width;\n    const cell_size = max_size / (star.size);\n    const center = max_size / 2;\n    ctx.clearRect(0, 0, max_size, max_size);\n    if (star.bright) {\n        let grd = ctx.createRadialGradient(center, center, 0, center, center, cell_size / 2);\n        grd.addColorStop(0, \"white\");\n        grd.addColorStop(0.5, star.color);\n        grd.addColorStop(1, \"transparent\");\n        ctx.fillStyle = grd;\n        ctx.fillRect(0, 0, max_size, max_size);\n    } else {\n        let grd = ctx.createRadialGradient(center, center, 10, center, center, cell_size / 2);\n        grd.addColorStop(0, star.color);\n        grd.addColorStop(1, \"transparent\");\n        ctx.fillStyle = grd;\n        ctx.fillRect(0, 0, max_size, max_size);\n    }\n    for (let planet of star.planets) {\n        draw_planet(ctx, planet, cell_size);\n    }\n}\n\nexport function draw_ships(ctx: CanvasRenderingContext2D, ships: Ship[], myRadars: number) {\n    const max_size = ctx.canvas.width;\n    const cell_size = max_size / gs.star.size;\n    ctx.clearRect(0, 0, max_size, max_size);\n    for (let ship of ships) {\n        if (ship instanceof PlayerShip || ship.seenBy(gs.playerShip, myRadars))\n            draw_ship(ctx, ship, cell_size, myRadars);\n    }\n}\n", "import { Point } from \"./geometry\";\n\nfunction _calcInterceptionTime(x0: number, y0: number, vx: number, vy: number, w: number) {\n    const D1 = w ** 2 * x0 ** 2 + w ** 2 * y0 ** 2 - (vx * y0 - vy * x0) ** 2;\n    const t1 = (-x0 * vx - y0 * vy + Math.sqrt(D1)) / (vx ** 2 + vy ** 2 - w ** 2);\n    const t2 = (-x0 * vx - y0 * vy - Math.sqrt(D1)) / (vx ** 2 + vy ** 2 - w ** 2);\n    if (Math.min(t1, t2) > 0) return Math.min(t1, t2);\n    else return Math.max(t1, t2);\n}\n\nexport function calcInterceptionTime(a: Point, b: Point, v: Point, w: number, now: number) {\n    return now + _calcInterceptionTime(b.x - a.x, b.y - a.y, v.x, v.y, w);\n}", "import { Cargo, Fuel, MissionBox, ResourceCargo, Rocket, isMissionBox } from \"./cargo\"\nimport { cargoPerCargoBay, cargoPerCargoMission, cargoPerDeliveryMission, maxFreeCargoBays, minDaysAfterIntercept, planet_size, shipBaseSpeed } from \"./const\"\nimport { draw_planet, draw_ship, draw_ships, draw_star } from \"./draw\"\nimport { GS, GameState, gs } from \"./gameState\"\nimport { calcInterceptionTime } from \"./interceptionCalc\"\nimport { Planet } from \"./planets\"\nimport { PlayerShip } from \"./playerShip\"\nimport { SaveableObject, addType, fromJSON, types } from \"./saveableType\"\nimport { Ship } from \"./ship\"\nimport { randomFrom, randomInt, seq, gebi } from \"./utils\"\n\nexport abstract class Component extends SaveableObject {\n    cellName? = ''\n    ship: Ship\n    onEnter(gs: GameState) { }\n}\nexport function isComponentType(type: typeof SaveableObject): type is typeof Component { return type.prototype instanceof Component };\n\nexport abstract class UselessComponent extends Component { }\n\nexport class Airlock extends UselessComponent {\n    onEnter(gs: GameState) {\n        gebi('Airlock_Locked').style.display = (gs.playerShip.toPlanet == gs.playerShip.onPlanet) ? '' : 'none';\n        gebi('Airlock_UnLocked').style.display = (gs.playerShip.toPlanet == gs.playerShip.onPlanet) ? 'none' : '';\n        gebi('Airlock_Detach').onclick = () => { gs.depart() };\n    }\n}\naddType(Airlock, 'Airlock')\n\nexport class Passage extends UselessComponent { }\naddType(Passage, 'Passage')\n\nexport class Ballast extends UselessComponent {\n    opposite? = ''\n    onEnter(gs: GameState) {\n        (document.querySelector('#Ballast b') as HTMLElement).innerText = this.opposite || ''\n    }\n}\naddType(Ballast, 'Ballast')\n\nexport class Debris extends UselessComponent {\n    original: string = ''\n    toJSON() {\n        return {\n            't': this.typename,\n            'o': this.original,\n        }\n    }\n    static fromJSON(type: typeof SaveableObject, data: { o: string }) {\n        let a = new Debris();\n        a.original = data.o;\n        return a;\n    }\n}\naddType(Debris, 'Debris')\n\n\n\nexport abstract class NormalComponent extends Component { }\nexport function isNormalComponentType(type: typeof SaveableObject): type is typeof NormalComponent { return type.prototype instanceof NormalComponent && !(type.prototype instanceof ComputerComponent) };\n\nexport class CargoBay extends NormalComponent {\n    cargo: Array<Cargo> = []\n    toJSON() {\n        return {\n            't': this.typename,\n            'c': this.cargo.map(x => x.toJSON())\n        };\n    }\n    static fromJSON(type: typeof SaveableObject, data: { c: Array<{ 't': string }> }) {\n        let a = new CargoBay();\n        a.cargo = data.c.map((x: { t: string }) => fromJSON(x) as Cargo);\n        return a;\n    }\n    onEnter(gs: GameState) {\n        (document.querySelector('#CargoBay ul') as HTMLUListElement).innerHTML = this.cargo.map(x => `<li>${x.toText()}</li>`).join('');\n        (document.getElementById('CargoBay_Empty') as HTMLDivElement).style.display = (this.cargo.length == 0) ? '' : 'none';\n        (document.getElementById('CargoBay_NonEmpty') as HTMLDivElement).style.display = (this.cargo.length == 0) ? 'none' : '';\n    }\n}\naddType(CargoBay, 'CargoBay');\nexport function isCargoBay(component: Component): component is CargoBay { return component instanceof CargoBay };\n\n\n\nexport class Radar extends NormalComponent {\n    lastHTMLUpdate = 0;\n    oldHTML = '';\n    onEnter(gs: GameState) {\n        const c = document.querySelector('#Radar canvas') as HTMLCanvasElement\n        const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n        this.drawRadar();\n        gebi('Radar_target').onclick = (ev) => {\n            if (!(ev.target as HTMLInputElement)?.value) return;\n            gs.playerShip.targetShip = gs.star.ships[(ev.target as HTMLInputElement).value];\n        }\n    }\n\n    shipDiv(value: { ship: Ship, dist: number }) {\n        const ship = value.ship;\n        const dist = value.dist;\n        const time = Math.ceil(dist / shipBaseSpeed);\n        const selected = (ship === gs.playerShip.targetShip) ? 'checked' : '';\n        const disabled = (ship === gs.playerShip) ? 'disabled' : '';\n        return `\n            <label><input type=\"radio\" name=\"Radar_target\" value=\"${ship.i}\" id=\"Radar_target_${ship.i}\" ${disabled} ${selected}>\n            ${ship.toHTML(false, gs.playerShip)}<br>\n        </label>`;\n    }\n\n    drawRadar(ts?: number) {\n        const c = gebi('shipsCanvas') as HTMLCanvasElement;\n        if (c.offsetParent === null) return;\n        const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n        if (gs.tick(ts)) window.requestAnimationFrame((ts) => { this.drawRadar(ts); });\n        // const ship = gs.walker.map[gs.walker.x][gs.walker.y].ship;\n        const ship = this.ship;\n        if (ship === undefined) return;\n        const myRadars = ship.componentTypes[Radar.id];\n        draw_ships(ctx, gs.star.ships, myRadars);\n        const newHTML = gs.star.ships.filter(ship => ship.seenBy(gs.playerShip, myRadars)).map(s => { return { 'ship': s, 'dist': gs.playerShip.distanceTo(s) } }).sort((a, b) => a.dist - b.dist).map(this.shipDiv).join('');\n        if (newHTML != this.oldHTML && (!ts || (this.lastHTMLUpdate + 500 <= ts))) {\n            gebi('Radar_target').innerHTML = newHTML;\n            this.oldHTML = newHTML;\n            if (ts) this.lastHTMLUpdate = ts;\n        }\n    }\n\n}\naddType(Radar, 'Radar');\n\nexport class Cloak extends NormalComponent { }\naddType(Cloak, 'Cloak');\n\nexport abstract class EngineComponent extends NormalComponent { }\n\nexport abstract class ComputerComponent extends NormalComponent { }\nexport function isComputerComponentType(type: typeof SaveableObject): type is typeof ComputerComponent { return type.prototype instanceof ComputerComponent && !(type.prototype instanceof BaseOnlyComputerComponent) };\n\nexport class NavigationComputer extends ComputerComponent {\n    lastHTMLUpdate = 0;\n    oldHTML = '';\n    target: Planet;\n    planetTr(value: { planet: Planet; i: number }) {\n        const planet = value.planet;\n        const i = value.i;\n        const time = Math.ceil(gs.playerShip.distanceTo(planet) / shipBaseSpeed);\n        const selected = (planet == this.target) ? 'checked' : '';\n        const disabled = (planet == gs.playerShip.onPlanet) ? 'disabled' : '';\n        return `<tr><td>\n            <input type=\"radio\" name=\"NavigationComputer_to\" value=\"${i}\" id=\"NavigationComputer_to_${i}\" ${disabled} ${selected}>\n        </td><td>\n            <label for=\"NavigationComputer_to_${i}\">\n            ${planet.toHTML(false, gs.playerShip, true)}\n        </label></td></tr>`\n    }\n\n    showDiv(id1: string, id2?: string) {\n        gebi('currentComponentPage').innerHTML = `#NavigationComputer_${id1}{display:block !important}`;\n        if (id2)\n            gebi('currentComponentPage').innerHTML += `#NavigationComputer_Intercept_${id2}{display:block !important}`;\n    }\n\n    onEnter(gs: GameState) {\n        this.target = gs.playerShip.toPlanet;\n        // TODO: if (gs.state == GS.withShip) ...\n        this.showDiv('Select');\n        this.drawNC();\n        (document.querySelector('#NavigationComputer table') as HTMLTableElement).onclick = (ev) => {\n            if (!(ev.target as HTMLInputElement)?.value) return;\n            // console.log((ev.target as HTMLInputElement)?.value);\n            this.target = gs.star.planets[(ev.target as HTMLInputElement).value];\n        }\n        gebi('NavigationComputer_Plot').style.display = (this.ship instanceof PlayerShip) ? 'none' : '';\n        gebi('NavigationComputer_Fly').style.display = (this.ship instanceof PlayerShip) ? '' : 'none';\n        gebi('NavigationComputer_Plot').onclick = () => {\n            gs.playerShip.planTrip(this.target, gs.now);\n            this.showDiv('Detach');\n            // console.log('NavigationComputer_Plot', gs.playerShip.toPlanet, gs.star.planets, parseInt(el.value));\n            return true;\n        }\n        gebi('NavigationComputer_Fly').onclick = () => {\n            if (!gebi('NavigationComputer_Plot')?.onclick?.()) return false;\n            this.showDiv('Departed');\n            if (gs.state == GS.onPlanet) gs.depart();\n            if (gs.state == GS.withShip) gs.leaveShip();\n        }\n    }\n    drawNC(ts?: number) {\n        if (gebi('NavigationComputer').offsetParent === null) return;\n        if (gs.tick(ts)) window.requestAnimationFrame((ts) => { this.drawNC(ts); });\n\n        const newHTML = gs.star.planets.map((p, i) => { return { 'planet': p, 'i': i, 'dist': gs.playerShip.distanceTo(p) } }).sort((a, b) => a.dist - b.dist).map(v => this.planetTr(v)).join('');\n\n        if (newHTML != this.oldHTML && (!ts || (this.lastHTMLUpdate + 500 <= ts))) {\n            (document.querySelector('#NavigationComputer table') as HTMLTableElement).innerHTML = newHTML;\n            this.oldHTML = newHTML;\n            if (ts) this.lastHTMLUpdate = ts;\n        }\n\n        const ship = gs.playerShip.targetShip;\n        if (!ship) this.showDiv('Select', 'notarget');\n        else if (!ship.seenBy(this.ship, this.ship.componentTypes[Radar.id])) this.showDiv('Select', 'nosee');\n        else if (ship.isIntercepting) this.showDiv('Select', 'interceptor');\n        else {\n            // TODO: store vx,vy in ship\n            let vx = (ship.toPlanet.x - ship.fromPoint.x) / (ship.toTime - ship.fromTime);\n            let vy = (ship.toPlanet.y - ship.fromPoint.y) / (ship.toTime - ship.fromTime);\n            let time = calcInterceptionTime(this.ship, ship, { 'x': vx, 'y': vy }, 2 * shipBaseSpeed, gs.now);\n            if (time > ship.toTime - minDaysAfterIntercept) this.showDiv('Select', 'notime');\n            else {\n                this.showDiv('Select', 'div');\n                gebi('NavigationComputer_Intercept_ship').innerHTML = ship.toHTML(false, gs.playerShip);\n                gebi('NavigationComputer_Intercept_Plot').style.display = (this.ship instanceof PlayerShip) ? 'none' : '';\n                gebi('NavigationComputer_Intercept_Fly').style.display = (this.ship instanceof PlayerShip) ? '' : 'none';\n                gebi('NavigationComputer_Intercept_Plot').onclick = () => {\n                    this.ship.performIntercept(ship, vx, vy, time, gs.now);\n                    this.showDiv('Detach');\n                    return true;\n                }\n                gebi('NavigationComputer_Intercept_Fly').onclick = () => {\n                    if (!gebi('NavigationComputer_Intercept_Plot')?.onclick?.()) return false;\n                    this.showDiv('Departed');\n                    if (gs.state == GS.onPlanet) gs.depart();\n                    if (gs.state == GS.withShip) gs.leaveShip();\n                }\n            }\n        }\n    }\n}\naddType(NavigationComputer, 'NavigationComputer');\n\n\n\nexport class TradingComputer extends ComputerComponent {\n    showDiv(id: string) {\n        gebi('currentComponentPage').innerHTML = `#TradingComputer_${id}{display:block !important}`;\n    }\n    onEnter(gs: GameState): void {\n        const planet = gs.playerShip.onPlanet as Planet;\n        if (planet === null) {\n            this.showDiv('None');\n            return;\n        }\n        gs.playerShip.countCargo();\n        if (planet.buys === null) {\n            // FREE GIFT\n            const giftAmount = Math.min(gs.playerShip.freeCargo, planet.ratio);\n            if (giftAmount == 0) {\n                this.showDiv('NoGift');\n                return;\n            }\n            this.showDiv('Gift');\n            gebi('TradingComputer_gift_number').innerText = giftAmount.toString();\n            gebi('TradingComputer_gift_type').innerText = planet.sells.id;\n            gebi('TradingComputer_gift_take').onclick = () => {\n                gs.playerShip.putCargo((planet).sells, giftAmount);\n                this.showDiv('Done');\n            };\n            return;\n        }\n        // rest is for normal trade\n        if (gs.playerShip.cargoTypes[planet.buys.id] < 1) {\n            this.showDiv('NothingToTradde');\n            return;\n        }\n        this.showDiv('Trade');\n        const slider = gebi('TradingComputer_give_slider') as HTMLInputElement;\n        gebi('TradingComputer_give_type').innerText = planet.buys.id;\n        gebi('TradingComputer_get_type').innerText = planet.sells.id;\n        slider.value = slider.max = gs.playerShip.cargoTypes[planet.buys.id].toString();\n        slider.style.display = gs.playerShip.cargoTypes[planet.buys.id] == 1 ? 'none' : '';\n        slider.onchange = () => {\n            const giveAmount = parseInt(slider.value);\n            let getAmount = Math.round(giveAmount * planet.ratio);\n            gebi('TradingComputer_max_cargo_warning').style.display = (getAmount - giveAmount > gs.playerShip.freeCargo) ? '' : 'none';\n            getAmount = Math.min(getAmount, gs.playerShip.freeCargo + giveAmount);\n            gebi('TradingComputer_give_number').innerText = giveAmount.toString();\n            gebi('TradingComputer_get_number').innerText = getAmount.toString();\n        };\n        slider.onchange();\n        gebi('TradingComputer_deal').onclick = () => {\n            const giveAmount = parseInt(slider.value);\n            let getAmount = Math.round(giveAmount * planet.ratio);\n            getAmount = Math.min(getAmount, gs.playerShip.freeCargo + giveAmount);\n            // console.log('before', gs.playerShip.cargoTypes, gs.playerShip.freeCargo);\n            // console.log(giveAmount, planet.buys, getAmount, planet.sells);\n            gs.playerShip.getCargo(planet.buys as typeof ResourceCargo, giveAmount);\n            gs.playerShip.putCargo(planet.sells as typeof ResourceCargo, getAmount);\n            // console.log('after', gs.playerShip.cargoTypes, gs.playerShip.freeCargo);\n            this.showDiv('Done');\n        };\n    }\n\n}\naddType(TradingComputer, 'TradingComputer');\n\nexport abstract class BaseOnlyComputerComponent extends ComputerComponent { }\n\nexport class MissionComputer extends BaseOnlyComputerComponent {\n    missionBoxesToHere: MissionBox[];\n    deliveryMissionGivesBoxes: number;\n    deliveryMissionGivesFreeCargoBay: boolean;\n    divsShown = ['', ''];\n    showDiv(n: number, id: string) {\n        this.divsShown[n] = id;\n        gebi('currentComponentPage').innerHTML = this.divsShown.map((id, i) => `#MissionComputer_${i}_${id}{display:block !important}`).join('');\n    }\n    fillRowSelectButtons(id: string, callback) {\n        const rows = seq(gs.playerShip.rows.length + 1);\n        rows.unshift(-1);\n        gebi(id).innerHTML = rows.map(i => `<button id=\"${id}_${i + 1}\">row ${String.fromCharCode(65 + i)}</button>`).join(' ');\n        rows.forEach(i => gebi(`${id}_${i + 1}`).onclick = () => { callback(i, this) });\n    }\n    onEnter(gs: GameState): void {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.countCargo();\n        //Delivery\n        const allCargoBays = gs.playerShip.rows.flat().filter(isCargoBay);\n        let missionBoxes: MissionBox[] = [];\n        for (let cargoBay of allCargoBays) {\n            missionBoxes = missionBoxes.concat(cargoBay.cargo.filter(isMissionBox));\n        }\n        const missionBoxesFromHere = missionBoxes.filter(box => box.from === planet.name);\n        this.missionBoxesToHere = missionBoxes.filter(box => box.to === planet.name);\n        if (this.missionBoxesToHere.length) {\n            this.showDiv(0, 'Complete');\n            const rewardCargos = Math.max(1, Math.floor(this.missionBoxesToHere.length / 2));\n            gebi('MissionComputer_Complete_resource').innerText = `${rewardCargos} ${planet.sells.id}`;\n            gebi('MissionComputer_Complete_cargo').innerText =\n                [planet.deliveryMissionRockets ? `${planet.deliveryMissionRockets} Rockets` : '',\n                planet.deliveryMissionFuel ? `${planet.deliveryMissionFuel} Fuel` : ''].filter(x => !!x).join(' and ');\n            gebi('MissionComputer_Complete_resource').onclick = () => {\n                gs.playerShip.getMissionBox(planet.name, this.missionBoxesToHere.length);\n                gs.playerShip.putCargo(planet.sells, rewardCargos);\n                this.showDiv(0, 'Completed');\n            }\n            gebi('MissionComputer_Complete_cargo').onclick = () => {\n                gs.playerShip.getMissionBox(planet.name, this.missionBoxesToHere.length);\n                gs.playerShip.putCargo(Rocket, planet.deliveryMissionRockets);\n                gs.playerShip.putCargo(Fuel, planet.deliveryMissionFuel);\n                this.showDiv(0, 'Completed');\n            }\n            // TODO: if player has 5 boxes with \"total\"==5 and 10 boxes with \"total\"==10\n            const completely = this.missionBoxesToHere.every(box => box.total == this.missionBoxesToHere[0].total && box.from == this.missionBoxesToHere[0].from) && this.missionBoxesToHere[0].total == this.missionBoxesToHere.length;\n            gebi('MissionComputer_Complete_component_wrap').style.display = completely ? '' : 'none';\n            gebi('MissionComputer_Complete_component_name').innerText = planet.deliveryMissionComponent.id;\n            this.fillRowSelectButtons('MissionComputer_Complete_component_select', this.deliveryMissionCompleteSelect);\n        } else if (missionBoxesFromHere.length) {\n            this.showDiv(0, 'InProgress');\n            const allDests = missionBoxesFromHere.map(box => box.to);\n            const uniqDests = [...new Set(allDests)];\n            gebi('MissionComputer_InProgress_to').innerText = uniqDests.join(', ');\n        } else if (gs.playerShip.freeCargo < cargoPerDeliveryMission && gs.playerShip.componentTypes[CargoBay.id] >= maxFreeCargoBays) {\n            this.showDiv(0, 'NoSpace');\n        } else {\n            this.showDiv(0, 'Offer');\n            this.deliveryMissionGivesFreeCargoBay = gs.playerShip.freeCargo < cargoPerDeliveryMission;\n            if (this.deliveryMissionGivesFreeCargoBay) {\n                this.deliveryMissionGivesBoxes = cargoPerDeliveryMission;\n            } else {\n                // Note that here we use cargoPerCargoBay. This is not a mistake. If you have 3 empty cargo bays,\n                // we don't want to occupy them completely with mission cargo.\n                this.deliveryMissionGivesBoxes = Math.max(1, Math.floor(gs.playerShip.freeCargo / cargoPerCargoBay)) * cargoPerDeliveryMission;\n            }\n            gebi('MissionComputer_Offer_n').innerText = this.deliveryMissionGivesBoxes.toString();\n            gebi('MissionComputer_Offer_to').innerText = planet.deliveryMissionDest;\n            gebi('MissionComputer_Offer_CargoBay').style.display = this.deliveryMissionGivesFreeCargoBay ? '' : 'none';\n            gebi('MissionComputer_Offer_NoCargoBay').style.display = this.deliveryMissionGivesFreeCargoBay ? 'none' : '';\n            gebi('MissionComputer_Offer_accept').onclick = () => {\n                gs.playerShip.putMissionBox(planet.name, planet.deliveryMissionDest, this.deliveryMissionGivesBoxes);\n                this.showDiv(0, 'Started');\n            };\n            this.fillRowSelectButtons('MissionComputer_Offer_CargoBay_select', this.deliveryMissionFreeCargoBaySelect);\n        }\n        //Cargo\n        if (!planet.buys) {\n            this.showDiv(1, 'None');\n        } else {\n            this.showDiv(1, 'Cargo');\n            gebi('MissionComputer_Cargo_n').innerText = cargoPerCargoMission.toString();\n            gebi('MissionComputer_Cargo_name').innerText = planet.buys.id;\n            gebi('MissionComputer_Cargo_deliver').style.display = (gs.playerShip.cargoTypes[planet.buys.id] >= cargoPerCargoMission) ? '' : 'none';\n            gebi('MissionComputer_Cargo_component_name').innerText = planet.cargoMissionComponent.id;\n            this.fillRowSelectButtons('MissionComputer_Cargo_component_select', this.cargoMissionSelect);\n        }\n    }\n    deliveryMissionFreeCargoBaySelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new CargoBay(), n);\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we've added a cargo box\n        gs.playerShip.putMissionBox(planet.name, planet.deliveryMissionDest, t.deliveryMissionGivesBoxes);\n        gs.walker.reattach();\n        t.showDiv(0, 'Started');\n    }\n    deliveryMissionCompleteSelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new (planet.deliveryMissionComponent as unknown as new () => NormalComponent)(), n);\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we might've added a cargo box\n        gs.playerShip.getMissionBox(planet.name, t.missionBoxesToHere.length);\n        gs.walker.reattach();\n        t.showDiv(0, 'Completed');\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        planet.cargoMissionComponent = randomFrom(noramalComponentTypes);\n    }\n    cargoMissionSelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet?.buys) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new (planet.cargoMissionComponent as unknown as new () => NormalComponent)(), n)\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we might've added a cargo box\n        gs.playerShip.getCargo(planet.buys, cargoPerCargoMission);\n        gs.walker.reattach();\n        t.showDiv(1, 'Completed');\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        planet.cargoMissionComponent = randomFrom(noramalComponentTypes);\n    }\n}\naddType(MissionComputer, 'MissionComputer');", "import { Cargo, MissionBox, UsefulCargo, isCargoType } from \"./cargo\"\nimport { Ballast, CargoBay, Cloak, Component, MissionComputer, NavigationComputer, NormalComponent, Radar, TradingComputer, isCargoBay, isComponentType, isComputerComponentType, isNormalComponentType } from \"./components\"\nimport { cargoPerCargoBay, minDaysAfterIntercept, shipBaseSpeed, shipColors, shipNames } from \"./const\"\nimport { GS, gs } from \"./gameState\"\nimport { Point } from \"./geometry\"\nimport { calcInterceptionTime } from \"./interceptionCalc\"\nimport { Planet } from \"./planets\"\nimport { PlayerShip } from \"./playerShip\"\nimport { fromJSON, types } from \"./saveableType\"\nimport { Star } from \"./stars\"\nimport { assert, calcColor2, gebi, randomFrom, randomInt, setStatus, shuffle, toPoint } from \"./utils\"\n\nexport let nextShip = 0;\nfunction nextShipData() {\n    nextShip++;\n    if (nextShip >= shipColors.length) nextShip = 0;\n    return { 'color': shipColors[nextShip], 'name': shipNames[nextShip] };\n}\n\nexport function setNextShip(n: number) { nextShip = n };\n\nexport interface xywh {\n    'x': number,\n    'y': number,\n    'w': number,\n    'h': number\n}\n\nexport interface ShipData {\n    'a': boolean,\n    'n': string,\n    'c': string,\n    'o': number[],\n    'r': { 't': string }[][],\n    'frX': number,\n    'frY': number,\n    'frT': number,\n    'toP': number,\n    'toT': number,\n    'p'?: boolean,\n    'on'?: number,\n    'ii': boolean,\n    'is': number,\n    'iX': number,\n    'iY': number,\n    'iT': number,\n}\n\nexport class Ship {\n    name: string;\n    color: string;\n    color2: string;\n    isAlien: boolean = false\n    rows: Array<Array<Component>> = []\n    offsets: Array<number> = []\n    componentTypes: { [typeName: string]: number }\n    cargoTypes: { [typeName: string]: number }\n    freeCargo: number\n    i: number\n    // next 4 are yet unused, to be used by detach/attach logic\n    isPlayerShip: boolean = false\n    playerOnShip: boolean = false\n    playerX: number\n    playerY: number\n    // position in space\n    x: number\n    y: number\n    fromPoint: Point\n    toPlanet: Planet\n    fromTime: number\n    toTime: number\n    // interception\n    isIntercepting: boolean = false\n    private _isBeingIntercepted: boolean = false\n    interceptingShip: Ship\n    interceptionX: number\n    interceptionY: number\n    interceptionTime: number\n\n    get isBeingIntercepted() { return this._isBeingIntercepted }\n\n    setIsBeingIntercepted(ships?: Ship[]) {\n        if (!ships) ships = gs.star.ships;\n        this._isBeingIntercepted = !!ships.find(ship => ship.isIntercepting && ship.interceptingShip == this);\n    }\n\n    updateSpaceXY(now: number, allowDispatch = true) {\n        if (this.isIntercepting) {\n            // NOTE: player ship might start interceptiong someone while being intercepted.\n            // Then we log a warning that they \"got away\" (likely they did), and move on.\n            assert(this.interceptingShip instanceof PlayerShip || !this.interceptingShip.isIntercepting);\n            if (now >= this.interceptionTime) {\n                //intercepted!\n                // console.log(`${this.name} intercepted ${this.interceptingShip.name} at dist=${this.distanceTo(this.interceptingShip)}`, this, this.interceptingShip);\n                assert(this.interceptingShip.toTime > now);\n                // Note: next line might move the target ship \"back in time\" a bit\n                this.interceptingShip.updateSpaceXY(this.interceptionTime);\n                if (this.interceptingShip.distanceTo({ 'x': this.interceptionX, 'y': this.interceptionY }) > 0.02) {\n                    console.warn(`${this.interceptingShip.name} ship got away from ${this.name}, dist `, this.distanceTo(this.interceptingShip));\n                    assert(this.interceptingShip instanceof PlayerShip);\n                    this.isIntercepting = false;\n                    this.interceptingShip.setIsBeingIntercepted();\n                    this.fromTime = now;\n                    this.fromPoint.x = this.x;\n                    this.fromPoint.y = this.y;\n                    return;\n                }\n                // console.log('intercepted1', Math.hypot(this.x - this.interceptingShip.x, this.y - this.interceptingShip.y));\n                // console.log('intercepted2', Math.hypot(this.interceptionX - this.interceptingShip.x, this.interceptionY - this.interceptingShip.y));\n                this.isIntercepting = false;\n                this.interceptingShip.setIsBeingIntercepted();\n                this.fromTime = now;\n                this.fromPoint.x = this.x = this.interceptingShip.x;\n                this.fromPoint.y = this.y = this.interceptingShip.y;\n                // TODO: do something\n                if (this instanceof PlayerShip) {\n                    gs.joinShip(this.interceptingShip);\n                    setStatus('ship', 'you_intercepted', this.interceptingShip);\n                    gebi('status_ship_you_intercepted_continue').onclick = () => { gs.leaveShip(); };\n                }\n                else if (this.interceptingShip instanceof PlayerShip) {\n                    gs.joinShip(this);\n                    setStatus('ship', 'intercepted_uninterested', this);\n                    gebi('status_ship_intercepted_uninterested_continue').onclick = () => { gs.leaveShip(); };\n                }\n            } else {\n                const flightProgress = (now - this.fromTime) / (this.interceptionTime - this.fromTime);\n                this.x = this.fromPoint.x + (this.interceptionX - this.fromPoint.x) * flightProgress;\n                this.y = this.fromPoint.y + (this.interceptionY - this.fromPoint.y) * flightProgress;\n            }\n        } else {\n            while (now >= this.toTime && allowDispatch) {\n                assert(!this.isIntercepting);\n                assert(!this.isBeingIntercepted);\n                this.toPlanet.dispatch(this, this.toTime);\n            }\n            const flightProgress = (now - this.fromTime) / (this.toTime - this.fromTime);\n            this.x = this.fromPoint.x + (this.toPlanet.x - this.fromPoint.x) * flightProgress;\n            this.y = this.fromPoint.y + (this.toPlanet.y - this.fromPoint.y) * flightProgress;\n        }\n    }\n\n    considerIntercept(ships: Ship[], now: number) {\n        if (this.isIntercepting || this.isBeingIntercepted) return;\n        // consider intercepting someone\n        const interceptableShips = shuffle(ships.filter(s => s != this && !s.isIntercepting && !s.isBeingIntercepted && Math.hypot(this.x - s.x, this.y - s.y) > 1 && s.seenBy({ 'x': this.x, 'y': this.y }, this.componentTypes[Radar.id])));\n        for (let ship of interceptableShips) {\n            // TODO: store vx,vy in ship\n            let vx = (ship.toPlanet.x - ship.fromPoint.x) / (ship.toTime - ship.fromTime);\n            let vy = (ship.toPlanet.y - ship.fromPoint.y) / (ship.toTime - ship.fromTime);\n            let time = calcInterceptionTime(this, ship, { 'x': vx, 'y': vy }, 2 * shipBaseSpeed, now);\n            if (time > ship.toTime - minDaysAfterIntercept) continue;\n            this.performIntercept(ship, vx, vy, time, now);\n            break;\n        }\n    }\n\n    performIntercept(ship: Ship, vx: number, vy: number, time: number, now: number) {\n        // TODO: store vx,vy in ship\n        this.isIntercepting = true;\n        this.interceptingShip = ship;\n        this.toPlanet = ship.toPlanet;\n        this.toTime = ship.toTime;\n        this.fromTime = now;\n        this.fromPoint = { 'x': this.x, 'y': this.y };\n        this.interceptionX = ship.x + vx * (time - now);\n        this.interceptionY = ship.y + vy * (time - now);\n        this.interceptionTime = time;\n        ship.setIsBeingIntercepted();\n    }\n\n    distanceTo(p: Point) {\n        return Math.hypot(this.x - p.x, this.y - p.y);\n    }\n\n    planTrip(toPlanet: Planet, fromTime: number) {\n        this.fromPoint = toPoint(this);\n        this.toPlanet = toPlanet;\n        this.fromTime = fromTime;\n        const dist = this.distanceTo(toPlanet);\n        const flyTime = dist / shipBaseSpeed;\n        this.toTime = fromTime + flyTime;\n        this.updateSpaceXY(this.fromTime);\n        // console.log('planTrip', fromTime, flyTime, dist, fromPlanet.name, toPlanet.name);\n    }\n\n    countComponents() {\n        this.componentTypes = {};\n        const x = Object.values(types).filter(isComponentType).forEach(\n            type => this.componentTypes[type.id] = 0);\n        const components = this.rows.flat();\n        for (let component of components) {\n            this.componentTypes[component.typename]++;\n        }\n    }\n\n    countCargo() {\n        const allCargoBays = this.rows.flat().filter(isCargoBay);\n        this.freeCargo = 0;\n        this.cargoTypes = {};\n        Object.values(types).filter(isCargoType).forEach(\n            type => this.cargoTypes[type.id] = 0);\n        for (let cargoBay of allCargoBays) {\n            this.freeCargo += cargoPerCargoBay - cargoBay.cargo.length;\n            for (let cargo of cargoBay.cargo) {\n                this.cargoTypes[cargo.typename]++;\n                // console.log(`countCargo found ${cargo.typename}, ${this.cargoTypes[cargo.typename]} at ${cargoBay.cellName}`)\n            }\n        }\n    }\n\n    addComponent(component: Component, row: number) {\n        component.ship = this;\n        // TODO: is isAlien\n        if (row < 0) {\n            this.rows.unshift([]);\n            this.rows.push([]);\n            this.offsets.unshift(0);\n            this.offsets.push(0);\n            row = 0;\n        }\n        if (row >= this.rows.length) {\n            this.rows.unshift([]);\n            this.rows.push([]);\n            this.offsets.unshift(0);\n            this.offsets.push(0);\n            row = this.rows.length - 1;\n        }\n        this.rows[row].push(component);\n    }\n\n    getCargo(kind: typeof Cargo, amount: number) {\n        // NOTE: can't take more than we have\n        if (amount > this.cargoTypes[kind.id]) return false;\n        this.cargoTypes[kind.id] -= amount;\n        this.freeCargo += amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            // filter out up to _amount_ items from cargo bays\n            // x=2;console.log([1,2,1,3,1,4,1,5].filter(v=>!(v==1&&x-->0)));\n            cargoBay.cargo = cargoBay.cargo.filter(cargo => !(cargo instanceof kind && amount-- > 0));\n            if (amount <= 0) return true;\n        }\n    }\n\n    getMissionBox(to: string, amount: number) {\n        // NOTE: can't take more than we have\n        if (amount > this.cargoTypes[MissionBox.id]) return false;\n        this.cargoTypes[MissionBox.id] -= amount;\n        this.freeCargo += amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            // filter out up to _amount_ items from cargo bays\n            // x=2;console.log([1,2,1,3,1,4,1,5].filter(v=>!(v==1&&x-->0)));\n            cargoBay.cargo = cargoBay.cargo.filter(cargo => !(cargo instanceof MissionBox && cargo.to == to && amount-- > 0));\n            if (amount <= 0) return true;\n        }\n    }\n\n    putCargo(kind: typeof Cargo, amount: number) {\n        if (amount > this.freeCargo) return false;\n        this.cargoTypes[kind.id] += amount;\n        this.freeCargo -= amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length < cargoPerCargoBay);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            while (amount > 0 && cargoBay.cargo.length < cargoPerCargoBay) {\n                cargoBay.cargo.push(new (kind as unknown as new () => Cargo)());\n                amount--;\n            }\n            if (amount <= 0) return true;\n        }\n    }\n\n    putMissionBox(from: string, to: string, total: number) {\n        if (total > this.freeCargo) return false;\n        this.cargoTypes[MissionBox.id] += total;\n        this.freeCargo -= total;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length < cargoPerCargoBay);\n        // TODO: sort\n        let amount = total;\n        for (let cargoBay of allCargoBays) {\n            while (amount > 0 && cargoBay.cargo.length < cargoPerCargoBay) {\n                let box = new MissionBox();\n                box.from = from;\n                box.to = to;\n                box.total = total;\n                cargoBay.cargo.push(box);\n                amount--;\n            }\n            if (amount <= 0) return true;\n        }\n    }\n\n    seenBy(pos: Point, myRadars: number) {\n        const dist = this.distanceTo(pos);\n        return true;// myRadars >= dist + this.componentTypes[Cloak.id];\n    }\n\n    toJSON(): ShipData {\n        return {\n            'a': this.isAlien,\n            'n': this.name,\n            'c': this.color,\n            'o': this.offsets,\n            'r': this.rows.map(row => row.map(component => component.toJSON())),\n            'frX': this.fromPoint?.x,\n            'frY': this.fromPoint?.y,\n            'frT': this.fromTime,\n            'toP': this.toPlanet?.i,\n            'toT': this.toTime,\n            'ii': this.isIntercepting,\n            'is': this.interceptingShip?.i,\n            'iX': this.interceptionX,\n            'iY': this.interceptionY,\n            'iT': this.interceptionTime,\n        }\n    }\n\n    static fromJSON(data: ShipData, star?: Star, ship?: Ship) {\n        if (!ship) ship = new Ship();\n        ship.isAlien = data.a;\n        ship.name = data.n;\n        ship.color = data.c;\n        ship.color2 = '#' + calcColor2(data.c.substr(1));\n        ship.offsets = data.o;\n        ship.rows = [];\n        for (let row = 0; row < data.r.length; row++) {\n            ship.rows[row] = [];\n            for (let c = 0; c < data.r[row].length; c++) {\n                ship.addComponent(fromJSON(data.r[row][c]) as Component, row);\n            }\n        }\n        ship.fromPoint = { 'x': data.frX, 'y': data.frY };\n        ship.fromTime = data.frT;\n        ship.toTime = data.toT;\n        if (star) ship.toPlanet = star.planets[data.toP];\n        if (data.ii) {\n            ship.isIntercepting = data.ii;\n            ship.interceptionX = data.iX;\n            ship.interceptionY = data.iY;\n            ship.interceptionTime = data.iT;\n        }\n        // ship.balanceBallast();\n        ship.fillBallastOpposite();\n        ship.countComponents();\n        return ship;\n    }\n\n    toHTML(sayShip: boolean, showTimeFrom?: Ship) {\n        let time = '';\n        if (showTimeFrom) {\n            let dist = showTimeFrom.distanceTo(this);\n            if (dist < 0.01) dist = 0;\n            time = ` (${Math.ceil(dist / shipBaseSpeed)} d)`;\n        }\n        const square = `<span class=\"colorBox\" style=\"background:${this.color};border-color:${this.color2}\"></span>`;\n        // if (sayShip) {\n        const type = this.isAlien ? '<i>Alien</i>' : this.rows.length % 2 ? '<i>Odd</i>' : '';\n        return `${square} ${type}${sayShip ? 'ship ' : ''}<b>${this.name}</b>${time}`;\n        // } else {\n        //     const type = this.isAlien ? ' (<i>Alien</i>)' : this.rows.length % 2 ? ' (<i>Odd</i>)' : '';\n        //     return `${square} <b>${this.name}</b>${type}${time}`;\n        // }\n    }\n\n    // functions used in drawing\n    get gridSize() {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x0': 0,\n                'x1': 0,\n                'y0': 0,\n                'y1': 0,\n                'w': 0,\n                'h': 0\n            }\n        } else {\n            let max_pos = 0\n            let max_neg = 0\n            for (let i = 0; i < this.rows.length; i++) {\n                max_pos = Math.max(max_pos, this.rows[i].length - this.offsets[i])\n                max_neg = Math.max(max_neg, this.offsets[i])\n            }\n            return {\n                'x0': 0,\n                'x1': this.rows.length - 1,\n                'y0': max_pos,\n                'y1': max_neg,\n                'w': this.rows.length,\n                'h': max_pos + max_neg + 1\n            }\n        }\n    }\n    rowToXY(row: number, i: number) {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0\n            }\n        } else {\n            if (i >= this.offsets[row]) {\n                return {\n                    'x': row,\n                    'y': 1 + (i - this.offsets[row])\n                }\n            } else {\n                return {\n                    'x': row,\n                    'y': (i - this.offsets[row])\n                }\n            }\n        }\n    }\n    get passage(): xywh {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0,\n                'w': 0,\n                'h': 0\n            }\n        } else {\n            return {\n                'x': 0,\n                'y': 0,\n                'w': this.rows.length,\n                'h': 1\n            }\n        }\n    }\n    oppositeComponent(a: Component) {\n        for (let row = 0; row <= this.rows.length; row++) {\n            let i = this.rows[row].indexOf(a)\n            if (i >= 0) {\n                return this.rows[this.rows.length - 1 - row][i]\n            }\n        }\n    }\n\n    static randomShip(size: number, ship?: Ship) {\n        const rowCount = 4\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        const computerTypes = Object.values(types).filter(isComputerComponentType);\n        const componentTypes = noramalComponentTypes.concat(computerTypes);\n        const cargoTypes = Object.values(types).filter(isCargoType);\n        if (ship === undefined) ship = new Ship();\n        const data = nextShipData();\n        const color = data.color;\n        ship.name = data.name;\n        ship.color = '#' + color;\n        ship.color2 = '#' + calcColor2(color);\n        ship.rows = [[], [], [], []]\n        ship.offsets = [0, 0, 0, 0]\n        for (let i = 0; i < size; i++) {\n            let componentType = randomFrom(componentTypes) as unknown as new () => Component\n            let component = new componentType()\n            if (component instanceof CargoBay) {\n                let cargos = randomInt(0, cargoPerCargoBay);\n                for (let j = 0; j < cargos; j++) {\n                    let cargoType = randomFrom(cargoTypes) as unknown as new () => Cargo\n                    component.cargo.push(new cargoType())\n                }\n            }\n            ship.addComponent(component, randomInt(0, rowCount - 1));\n        }\n        for (let i = 0; i < ship.rows.length; i++) {\n            ship.offsets[i] = randomInt(0, ship.rows[i].length)\n        }\n        ship.balanceBallast()\n        ship.countComponents()\n        return ship\n    }\n\n    static newBase() {\n        const ship = new Ship();\n        const color = randomFrom(shipColors);\n        ship.color = '#' + color;\n        ship.color2 = '#' + calcColor2(color);\n        ship.rows = [[], [], []];\n        const components = shuffle([new NavigationComputer(), new Radar(), new TradingComputer(), new MissionComputer()])\n        for (let component of components)\n            ship.addComponent(component, randomInt(0, 2));\n        ship.offsets = [\n            randomInt(0, ship.rows[0].length),\n            randomInt(0, ship.rows[1].length),\n            randomInt(0, ship.rows[2].length),\n        ];\n        ship.balanceBallast()\n        ship.countComponents()\n        return ship\n    }\n\n    deBallastTail() {\n        // remove extra ballast from tail (top of the ship)\n        // Leaves the ship unbalanced, remember to run balanceBallast after\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1;\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].at(-1) instanceof Ballast) {\n                    this.rows[i].pop();\n                }\n            }\n        }\n    }\n    balanceBallast() {\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1\n            // balance offsets\n            for (var i = 0; i <= max; i++) {\n                while (this.offsets[i] < this.offsets[max - i]) {\n                    this.rows[i].unshift(new Ballast())\n                    this.offsets[i]++\n                }\n            }\n            // add ballast to balance \n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].length < this.rows[max - i].length) {\n                    this.rows[i].push(new Ballast())\n                }\n            }\n            // remove extra ballast from head\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i][0] instanceof Ballast\n                    && this.rows[max - i][0] instanceof Ballast) {\n                    this.rows[i].shift()\n                    this.rows[max - i].shift()\n                    this.offsets[i]--\n                    this.offsets[max - i]++\n                }\n            }\n            // remove extra ballast from tail\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].at(-1) instanceof Ballast\n                    && this.rows[max - i].at(-1) instanceof Ballast) {\n                    this.rows[i].pop()\n                    this.rows[max - i].pop()\n                }\n            }\n            // TODO: remove empty rows?\n        }\n        this.fillBallastOpposite()\n    }\n\n    fillBallastOpposite() {\n        // record what's opposite to ballast\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1;\n            for (var i = 0; i <= max; i++) {\n                for (var j = 0; j <= this.rows[i].length; j++) {\n                    if (this.rows[i][j] instanceof Ballast) {\n                        (this.rows[i][j] as Ballast).opposite = this.rows[max - i][j].typename\n                    }\n                }\n            }\n        }\n    }\n    get topAirlock() {\n        // returns x-coordinate \n        // NOTE: putTwoShips assumes that airlock location is always counted from left side,\n        // i.e. return value=0 means \"leftmost column\"\n        if (this.isAlien) {\n            // TODO\n            return 0;\n        } else {\n            let maxLen = 0\n            for (let i = 0; i < this.rows.length; i++) {\n                maxLen = Math.max(maxLen, this.rows[i].length - this.offsets[i])\n            }\n            for (let i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].length - this.offsets[i] == maxLen)\n                    return i\n            }\n            return 0 // should never happen\n        }\n    }\n    get bottomAirlock() {\n        if (this.isAlien) {\n            // TODO\n            return 0;\n        } else {\n            const maxOffset = Math.max(...this.offsets);\n            return this.offsets.lastIndexOf(maxOffset);\n        }\n    }\n}", "import { Cargo, Food, Fuel, Iron, MissionBox, Radioactives, ResourceCargo, Rocket, Water, isCargoType, isMissionBox } from \"./cargo\";\nimport { NormalComponent, isCargoBay, isNormalComponentType } from \"./components\";\nimport { shipBaseSpeed } from \"./const\";\nimport { gs } from \"./gameState\";\nimport { Point } from \"./geometry\";\nimport { fromJSON, types } from \"./saveableType\";\nimport { Ship, ShipData } from \"./ship\";\nimport { shuffle, seq, randomFrom, randomInt } from \"./utils\";\n\nexport type PlanetType = [name: string, buys: typeof ResourceCargo | null, sells: typeof ResourceCargo, color_in: string, color_out: string];\n\n//export const resources = ['water', 'iron', 'food', 'radioactives'];\nconst planetTypes = (function () {\n\tconst resources = [Water, Iron, Food, Radioactives];\n\t//var colors = ['blue', 'yellow', 'green', 'red'];\n\tvar planetNamesTable = [ // table: rows: what planet buys; columns: what planet sells; value: planet name\n\t\t[null, 'water-mining', 'farming', 'burning'],\n\t\t['ice', null, 'hunting', 'fire'],\n\t\t['fishy', 'bio-mining', null, 'nuclear'],\n\t\t['frozen', 'hot mining', 'ice-farming', null]];\n\n\tvar ret: PlanetType[] = [\n\t\t['ocean', null, Water, 'navy', 'blue'],\n\t\t//['dry', Water, null, 'blue', 'white'],\n\t\t//['mining', null, Iron, 'olive', 'yellow'],\n\t\t//['populated', Food, null, 'green', 'lime'],\n\t\t['desert', Water, Fuel, 'blue', 'purple'],\n\t\t['factory', Iron, Rocket, 'yellow', 'orange'],\n\t\t// ['power', Radioactives, Battery, 'red', 'lightblue'],\n\t\t['war', Rocket, Fuel, 'orange', 'purple'],\n\t];\n\n\tfor (var buy = 0; buy < 4; buy++) {\n\t\tfor (var sell = 0; sell < 4; sell++) {\n\t\t\tif (buy == sell) continue;\n\t\t\tret.push([planetNamesTable[buy][sell] as string, resources[buy], resources[sell], resources[buy].color, resources[sell].color])\n\t\t}\n\t}\n\treturn ret;\n})();\n\nexport interface PlanetData {\n\t'x': number,\n\t'y': number,\n\t'tp': number,\n\t'b'?: ShipData,\n\t'dd'?: string,\n\t'dc'?: string,\n\t'dr'?: number,\n\t'df'?: number,\n\t'cc'?: string,\n}\n\nexport class Planet {\n\tx: number; y: number;\n\ti: number; //index in star's list of planets\n\ttype: number;\n\tname: string;\n\tbuys: typeof ResourceCargo | null;\n\tsells: typeof ResourceCargo;\n\tratio: number; //how many 'sells' resource planet gives for 1 of 'buys' resource\n\tcolor_in: string;\n\tcolor_out: string;\n\tneighbours: Planet[];\n\tbase: Ship;\n\tdeliveryMissionDest: string;\n\tdeliveryMissionComponent: typeof NormalComponent;\n\tdeliveryMissionRockets: number;\n\tdeliveryMissionFuel: number;\n\tcargoMissionComponent: typeof NormalComponent;\n\tconstructor(type_n: number) {\n\t\tvar type = planetTypes[type_n];\n\t\tthis.type = type_n;\n\t\tthis.name = type[0];\n\t\tthis.buys = type[1];\n\t\tthis.sells = type[2];\n\t\tthis.color_in = type[3];\n\t\tthis.color_out = type[4];\n\t}\n\ttoJSON(): PlanetData {\n\t\treturn {\n\t\t\t'x': this.x,\n\t\t\t'y': this.y,\n\t\t\t'tp': this.type,\n\t\t\t'b': this.base.toJSON(),\n\t\t\t'dd': this.deliveryMissionDest,\n\t\t\t'dc': this.deliveryMissionComponent?.id,\n\t\t\t'dr': this.deliveryMissionRockets,\n\t\t\t'df': this.deliveryMissionFuel,\n\t\t\t'cc': this.cargoMissionComponent?.id,\n\t\t};\n\t}\n\n\tstatic fromJSON(data: PlanetData) {\n\t\tconst planet = new Planet(data.tp);\n\t\tplanet.x = data.x;\n\t\tplanet.y = data.y;\n\t\tif (data.b) planet.base = Ship.fromJSON(data.b);\n\t\telse planet.base = Ship.newBase();\n\t\tif (data.dd) planet.deliveryMissionDest = data.dd;\n\t\tif (data.dc) planet.deliveryMissionComponent = types[data.dc] as any as typeof NormalComponent;\n\t\tif (data.dr) planet.deliveryMissionRockets = data.dr;\n\t\tif (data.df) planet.deliveryMissionFuel = data.df;\n\t\tif (data.cc) planet.cargoMissionComponent = types[data.cc] as any as typeof NormalComponent;\n\t\treturn planet;\n\t}\n\n\ttoHTML(sayPlanet: boolean, showTimeFrom?: Ship, showBuySell?: boolean) {\n\t\tlet time = '';\n\t\tif (showTimeFrom) {\n\t\t\tlet dist = showTimeFrom.distanceTo(this);\n\t\t\tif (dist < 0.01) dist = 0;\n\t\t\ttime = ` (${Math.ceil(dist / shipBaseSpeed)} d)`;\n\t\t}\n\t\tconst square = `<span class=\"colorCircle\" style=\"background: radial-gradient(closest-side, ${this.color_in}, ${this.color_out});\"></span>`;\n\t\tlet ret = `${square} <b>${this.name}</b>${sayPlanet ? ' planet' : ''}${time}`;\n\t\tif (showBuySell) ret += `<br>${this.buys ? `wants: ${this.buys.id}` : ''} ${this.sells ? `gives: ${this.sells.id}` : ''}`;\n\t\treturn ret;\n\t}\n\n\tdispatch(ship: Ship, departTime: number) {\n\t\t//send the ship in a random direction\n\t\tconst dest = this.neighbours.shift() as Planet;\n\t\tthis.neighbours.push(dest);\n\t\tship.planTrip(dest, departTime);\n\t}\n\tonEnter() {\n\t\tthis.deliveryMissionDest = randomFrom(this.neighbours).name;\n\t\tconst noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n\t\tthis.cargoMissionComponent = randomFrom(noramalComponentTypes);\n\t\tthis.deliveryMissionComponent = randomFrom(noramalComponentTypes);\n\t\tconst allCargoBays = gs.playerShip.rows.flat().filter(isCargoBay);\n\t\tlet missionBoxes: MissionBox[] = [];\n\t\tfor (let cargoBay of allCargoBays) {\n\t\t\tmissionBoxes = missionBoxes.concat(cargoBay.cargo.filter(isMissionBox));\n\t\t}\n\t\tconst missionBoxesToHere = missionBoxes.filter(box => box.to === this.name);\n\t\tif (missionBoxesToHere.length) {\n\t\t\tconst rewardCargos = Math.max(1, Math.floor(missionBoxesToHere.length / 2));\n\t\t\tthis.deliveryMissionRockets = randomInt(0, rewardCargos);\n\t\t\tthis.deliveryMissionFuel = rewardCargos - this.deliveryMissionRockets;\n\t\t}\n\t}\n}\n\nfunction isBad(x: number, y: number, size: number) {\n\tvar center = size / 2;\n\treturn x < center + 0.6 && x > center - 0.6 && y < center + 0.6 && y > center - 0.6;\n}\n\nexport function makePlanets(size: number) {\n\tvar thisPlanetTypes = shuffle(seq(planetTypes.length));\n\tfor (var _n = 0; _n < 100; _n++) {\n\t\tvar bad = false;\n\t\tvar ret: PlanetData[] = [];\n\t\tvar xx = shuffle(seq(size));\n\t\tvar yy = shuffle(seq(size));\n\t\t// console.log(_n,xx,yy);\n\t\tvar center = size / 2;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tif (isBad(xx[i] + 0.5, yy[i] + 0.5, size)) {\n\t\t\t\tbad = true;\n\t\t\t}\n\t\t\tret.push({ 'x': xx[i] + 0.5, 'y': yy[i] + 0.5, 'tp': thisPlanetTypes[i] });\n\t\t}\n\t\tif (!bad) return ret;\n\t}\n\tconsole.error('should not be here');\n\treturn [];\n}\n", "import { ResourceCargo, isCargoType, isResourceType } from \"./cargo.js\";\nimport { planet_size, shipBaseSpeed } from \"./const.js\";\nimport { lineCrossesObj } from \"./geometry.js\";\nimport { makePlanets, Planet, PlanetData, PlanetType } from \"./planets.js\";\nimport { PlayerShip } from \"./playerShip.js\";\nimport { types } from \"./saveableType.js\";\nimport { Ship, ShipData } from \"./ship.js\";\nimport { seq, randomFrom, randomInt, shuffle } from \"./utils.js\";\n\n// 1. copypaste table from https://www.cssportal.com/css3-color-names/ to vim\n// 2. :%s/^\\t\\([^\\t]*\\)\\t#[^\\t]*\\t/['\\1', /\n// 3. :%s/$/],/\n// 4. copypaste from vim to JS console, assign to var data=[...]\n// 5. use RGBToHSL function from https://css-tricks.com/converting-color-spaces-in-javascript/, modified to return only 'l' as number\n// 6. out=data.map(x=>[x[0],RGBToHSL(x[1],x[2],x[3])])\n// 7. prompt('',JSON.stringify(out.filter(x=>x[1]>40).map(x=>x[0])))\nvar starColors = [\"AliceBlue\", \"AntiqueWhite\", \"Aqua\", \"Aquamarine\", \"Azure\", \"Beige\", \"Bisque\", \"BlanchedAlmond\", \"Blue\", \"BlueViolet\", \"Brown\", \"BurlyWood\", \"CadetBlue\", \"Chartreuse\", \"Chocolate\", \"Coral\", \"CornflowerBlue\", \"Cornsilk\", \"Crimson\", \"Cyan\", \"DarkGray\", \"DarkGrey\", \"DarkKhaki\", \"DarkOrange\", \"DarkOrchid\", \"DarkSalmon\", \"DarkSeaGreen\", \"DarkTurquoise\", \"DarkViolet\", \"DeepPink\", \"DeepSkyBlue\", \"DimGray\", \"DodgerBlue\", \"FireBrick\", \"FloralWhite\", \"Fuchsia\", \"Gainsboro\", \"GhostWhite\", \"Gold\", \"Goldenrod\", \"Gray\", \"GreenYellow\", \"Grey\", \"Honeydew\", \"HotPink\", \"IndianRed\", \"Ivory\", \"Khaki\", \"Lavender\", \"LavenderBlush\", \"LawnGreen\", \"LemonChiffon\", \"LightBlue\", \"LightCoral\", \"LightCyan\", \"LightGoldenrodYellow\", \"LightGray\", \"LightGreen\", \"LightGrey\", \"LightPink\", \"LightSalmon\", \"LightSeaGreen\", \"LightSkyBlue\", \"LightSlateGray\", \"LightSlateGrey\", \"LightSteelBlue\", \"LightYellow\", \"Lime\", \"LimeGreen\", \"Linen\", \"Magenta\", \"MediumAquamarine\", \"MediumBlue\", \"MediumOrchid\", \"MediumPurple\", \"MediumSeaGreen\", \"MediumSlateBlue\", \"MediumSpringGreen\", \"MediumTurquoise\", \"MediumVioletRed\", \"MintCream\", \"MistyRose\", \"Moccasin\", \"NavajoWhite\", \"OldLace\", \"Orange\", \"OrangeRed\", \"Orchid\", \"PaleGoldenrod\", \"PaleGreen\", \"PaleTurquoise\", \"PaleVioletRed\", \"PapayaWhip\", \"PeachPuff\", \"Peru\", \"Pink\", \"Plum\", \"PowderBlue\", \"Red\", \"RosyBrown\", \"RoyalBlue\", \"Salmon\", \"SandyBrown\", \"Seashell\", \"Sienna\", \"Silver\", \"SkyBlue\", \"SlateBlue\", \"SlateGray\", \"SlateGrey\", \"Snow\", \"SpringGreen\", \"SteelBlue\", \"Tan\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Wheat\", \"White\", \"WhiteSmoke\", \"Yellow\", \"YellowGreen\"];\n\nfunction mkgrid(star: Star, size: number) {\n\tvar grid: (Star | undefined)[][] = seq(size).map(x => []);\n\tvar center = (size - 1) / 2;\n\tfor (var x = Math.floor(center); x <= Math.ceil(center); x++) {\n\t\tfor (var y = Math.floor(center); y <= Math.ceil(center); y++) {\n\t\t\tgrid[x + 1][y + 1] = star;\n\t\t}\n\t}\n\treturn grid;\n}\n\n// function countJobs(planets: Planet[]) {\n// \tvar data = { 'null': { buys: 0, sells: 0 } };\n// \tresources.forEach(x => { data[x] = { buys: 0, sells: 0 } });\n// \tplanets.forEach((planet: Planet) => { data[String(planet.buys)].buys++; data[String(planet.sells)].sells++ });\n// \tvar jobs = 0;\n// \tresources.forEach(x => { jobs += Math.min(data[x].buys, data[x].sells) });\n// \treturn jobs;\n// }\n\nexport interface StarData {\n\tc: string,\n\tsz: number,\n\t// n: number[] | false,\n\tp: PlanetData[] | false,\n\tsh: ShipData[] | false,\n\t// v: boolean,\n}\n\nexport class Star {\n\tcolor: string;\n\tsize: number;\n\t// visited: boolean;\n\t// x: number; y: number;\n\tbright: boolean;\n\tname: string;\n\t// neighbours: Directions;\n\tgrid: (Star | Planet | undefined)[][];\n\tplanets: Planet[];\n\tships: Ship[];\n\n\tconstructor(load?: StarData) {\n\t\tif (!load) {\n\t\t\tload = {\n\t\t\t\tc: randomFrom(starColors),\n\t\t\t\tsz: randomInt(5, 9),\n\t\t\t\t// n: false,\n\t\t\t\tp: false,\n\t\t\t\tsh: false,\n\t\t\t\t// v: false,\n\t\t\t}\n\n\t\t}\n\t\t// TODO: make sure colors don't repeat\n\t\tthis.color = load.c;\n\t\tthis.size = load.sz;\n\t\t// this.visited = load.v;\n\t\t// this.x = this.y = this.size / 2;\n\t\tthis.bright = false;\n\t\tthis.name = this.color;\n\t\tif (this.size % 2 == 0) {\n\t\t\tthis.bright = true;\n\t\t\tthis.name = 'bright ' + this.name;\n\t\t}\n\t\t// this.neighbours = new Directions(this);\n\t\t// if (load.n) {\n\t\t// \tfor (var value of load.n) {\n\t\t// \t\tthis.neighbours.add(new Direction(value, this));\n\t\t// \t}\n\t\t// }\n\t\tthis.grid = mkgrid(this, this.size);\n\t\tif (!load.p) load.p = makePlanets(this.size); //from planets.js\n\t\tthis.planets = load.p.map(x => Planet.fromJSON(x));\n\t\tfor (let i = 0; i < this.planets.length; i++) {\n\t\t\tlet planet = this.planets[i];\n\t\t\tplanet.i = i;\n\t\t\t// add neighbours\n\t\t\tplanet.neighbours = shuffle(this.planets.filter(p => p != planet && !this.pathCollides(p, planet)));\n\t\t\t// add planet to grid\n\t\t\tthis.grid[Math.floor(planet.x)][Math.floor(planet.y)] = planet;\n\t\t}\n\t\tif (load.sh) {\n\t\t\tthis.ships = load.sh.map(s => {\n\t\t\t\tif (s.p) return PlayerShip.fromJSON(s, this);\n\t\t\t\treturn Ship.fromJSON(s, this);\n\t\t\t});\n\t\t\tfor (let i = 0; i < this.ships.length; i++) {\n\t\t\t\tthis.ships[i].i = i;\n\t\t\t\tif (this.ships[i].isIntercepting) {\n\t\t\t\t\tthis.ships[i].interceptingShip = this.ships[load.sh[i].is];\n\t\t\t\t\tthis.ships[i].interceptingShip.setIsBeingIntercepted(this.ships);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this.jobs = countJobs(this.planets);\n\t\tthis.setRatios();\n\t}\n\n\t// link(other: Star, direction: number | Direction) {\n\t// \tif (direction instanceof Direction) {\n\t// \t\tdirection.target = other;\n\t// \t\tother.neighbours.link(direction.value + 180, this);\n\t// \t} else {\n\t// \t\tthis.neighbours.link(direction, other);\n\t// \t\tother.neighbours.link(direction + 180, this);\n\t// \t}\n\t// }\n\n\tpathCollides(a: Planet, b: Planet): boolean {\n\t\tif (lineCrossesObj(a, b, { 'x': this.size / 2, 'y': this.size / 2 }, 0.5)) return true;\n\t\tfor (var planet of this.planets) {\n\t\t\tif (planet != a && planet != b &&\n\t\t\t\tlineCrossesObj(a, b, planet, planet_size)) return true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tcomputeRareResources(planets?: Planet[]) {\n\t\tif (planets === undefined) planets = this.planets;\n\t\tconst producedResources = planets.map(planet => planet.sells);\n\t\tconst rareResources = Object.values(types).filter(isCargoType).filter(resource => !producedResources.includes(resource));\n\t\tconst abundantResources = planets.filter(planet => planet.buys === null).map(planet => planet.sells);\n\t\treturn {\n\t\t\t'exotic': rareResources,\n\t\t\t'abundant': abundantResources\n\t\t}\n\t}\n\n\tsetRatios() {\n\t\tconst ar = this.computeRareResources();\n\t\tfor (let planet of this.planets) {\n\t\t\tif (planet.buys === null) planet.ratio = 2; //gives for free\n\t\t\telse if (ar.abundant.includes(planet.buys)) planet.ratio = 1;\n\t\t\telse if (ar.exotic.includes(planet.buys)) planet.ratio = 2;\n\t\t\telse planet.ratio = 1.4;\n\t\t}\n\t}\n\n\taddRandomShips(now: number) {\n\t\tthis.ships = [];\n\t\tfor (let i = 0; i < this.planets.length; i++) {\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (this.planets[i].neighbours.indexOf(this.planets[j]) < 0) continue;\n\t\t\t\tlet s = Ship.randomShip(15);\n\t\t\t\ts.x = this.planets[i].x;\n\t\t\t\ts.y = this.planets[i].y;\n\t\t\t\tconst dist = Math.hypot(this.planets[i].x - this.planets[j].x, this.planets[i].y - this.planets[j].y);\n\t\t\t\tconst flyTime = dist / shipBaseSpeed;\n\t\t\t\tthis.planets[i].dispatch(s, now - flyTime);\n\t\t\t\tthis.ships.push(s);\n\t\t\t\tthis.ships.at(-1)!.i = this.ships.length - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON(): StarData {\n\t\treturn {\n\t\t\tc: this.color,\n\t\t\tsz: this.size,\n\t\t\t// n: Array.from(this.neighbours).map(x => x.value),\n\t\t\tp: this.planets.map(x => x.toJSON()),\n\t\t\t// v: this.visited,\n\t\t\tsh: this.ships.map(x => x.toJSON()),\n\t\t};\n\t}\n}\n\n", "import { assert, setStatus, showDate } from \"./utils\";\nimport { PlayerShip, isPlayerShip } from \"./playerShip\";\nimport { Star } from \"./stars\";\nimport { Walker } from \"./walker\";\nimport { Ship, nextShip, setNextShip } from \"./ship\";\n\nexport enum GS { flying, onPlanet, withShip };\n\nexport class GameState {\n    private _state: GS;\n    star: Star;\n    playerShip: PlayerShip;\n    withShip: Ship;\n    walker: Walker;\n    now = 0;\n    lastTickTimestamp: number;\n    lastDate: number;\n    private _timeFlies = false;\n    tickInterval = 0;\n\n    get state() { return this._state };\n    set state(value: GS) {\n        if (this._state == value) return;\n        this._state = value;\n        this.timeFlies = value == GS.flying;\n    };\n\n    get timeFlies() { return this._timeFlies };\n    set timeFlies(value: boolean) {\n        // console.trace(value);\n        if (this._timeFlies == value) return;\n        this._timeFlies = value;\n        if (value) {\n            const t = this;\n            this.lastTickTimestamp = performance.now();\n            this.tickInterval = setInterval(function () { t.tick() }, 1000);\n        } else {\n            clearInterval(this.tickInterval);\n        }\n\n    };\n\n    tick(ts?: number): boolean {\n        if (!this.timeFlies) return false;\n        if (!ts) ts = performance.now();\n        if (ts <= this.lastTickTimestamp) return true;\n        this.now += Math.max(0, Math.min(ts - this.lastTickTimestamp, 1000)) / 1000;\n        this.lastTickTimestamp = ts;\n        const newDate = Math.floor(this.now);\n        for (let ship of this.star.ships) {\n            ship.updateSpaceXY(this.now);\n        }\n        if (this.lastDate != newDate) {\n            showDate(newDate);\n            this.lastDate = newDate;\n            if (this.timeFlies) {\n                let tripRemain = Math.ceil(this.playerShip.toTime - this.now);\n                setStatus('planet', 'travelling', this.playerShip.toPlanet, tripRemain);\n                if (this.playerShip.isIntercepting) {\n                    let tripRemain = Math.ceil(this.playerShip.interceptionTime - this.now);\n                    setStatus('ship', 'intercepting', this.playerShip.interceptingShip, tripRemain);\n                }\n            }\n            for (let ship of this.star.ships) {\n                ship.considerIntercept(this.star.ships, this.now);\n            }\n        }\n        return true;\n    };\n\n    depart() {\n        assert(this.state == GS.onPlanet);\n        // console.log(this.playerShip);\n        // ship.fromPlanet = this;\n        // ship.toPlanet = dest;\n        // ship.fromTime = departTime;\n\n        // if (this.playerShip.onPlanet !== null) {\n        //     this.playerShip.fromPlanet = this.playerShip.onPlanet;\n        // }\n        this.state = GS.flying;\n        this.timeFlies = true;\n        // this.playerShip.flying = true;\n        this.playerShip.onPlanet = null;\n        this.walker.detach();\n        this.lastDate = -1;\n        this.tick();\n    };\n\n    arrive(noOnEnter?: boolean, noSave?: boolean) {\n        assert(this.state == GS.flying);\n        this.playerShip.onPlanet = this.playerShip.toPlanet;\n        this.playerShip.x = this.playerShip.onPlanet.x;\n        this.playerShip.y = this.playerShip.onPlanet.y;\n        // this.playerShip.flying = false;\n        this.state = GS.onPlanet;\n        this.timeFlies = false;\n        if (!noOnEnter) this.playerShip.onPlanet.onEnter();\n        this.walker.attach(this.playerShip.onPlanet.base);\n        setStatus('planet', 'docked', this.playerShip.onPlanet);\n        if (!noSave) localStorage.space2d3_3 = JSON.stringify(this.toJSON());\n    };\n\n    joinShip(ship: Ship) {\n        assert(this.state == GS.flying);\n        this.state = GS.withShip;\n        this.withShip = ship;\n        this.timeFlies = false;\n    }\n\n    leaveShip() {\n        assert(this.state == GS.withShip);\n        gs.state = GS.flying;\n        this.timeFlies = true;\n        setStatus('ship', 'none');\n        //re+enter currect component - for example, if you left the ship while standing in Radar component\n        this.walker.triggerOnEnter();\n    }\n\n    toJSON() {\n        return {\n            'v': 2,\n            's': this.star.toJSON(),\n            'n': this.now,\n            'ns': nextShip,\n        }\n    }\n\n    static fromJSON(a): GameState | false {\n        if (a?.v != 2) return false;\n        const gs = new GameState();\n        gs.star = new Star(a.s);\n        const playerShips = gs.star.ships.filter(isPlayerShip);\n        if (playerShips.length != 1) return false;\n        gs.playerShip = playerShips[0];\n        gs.now = a.n;\n        setNextShip(a.ns || 0);\n        return gs;\n    }\n}\n\nexport function loadGS(data) {\n    const ret = GameState.fromJSON(data);\n    if (ret) {\n        gs = ret;\n        return true;\n    }\n    return false;\n}\n\nexport function newGS() {\n    if (gs) gs.timeFlies = false; //in case a game is already in progress\n    gs = new GameState();\n}\n\nexport let gs: GameState;", "import { GS, gs } from \"./gameState\";\nimport { assert, setStatus } from \"./utils\";\nimport { Planet } from \"./planets\";\nimport { Ship, ShipData } from \"./ship\";\nimport { Star } from \"./stars\";\n\n\nexport class PlayerShip extends Ship {\n    // flying = false;\n    onPlanet: Planet | null;\n    targetShip: Ship | null;\n\n    updateSpaceXY(now: number, allowArrive: boolean = true) {\n        // console.log('updateSpaceXY', now, this.toTime);\n        switch (gs.state) {\n            case GS.flying:\n                if (now >= this.toTime && allowArrive) {\n                    gs.arrive();\n                }\n                else super.updateSpaceXY(now, false);\n                break;\n            case GS.onPlanet:\n                assert(this.onPlanet);\n                this.x = this.onPlanet.x;\n                this.y = this.onPlanet.y;\n                break;\n            case GS.withShip:\n                assert(!gs.timeFlies);\n                super.updateSpaceXY(now, false);\n                break;\n        }\n    }\n\n    considerIntercept() { }\n\n    static randomShip(size: number): PlayerShip {\n        let ship = new PlayerShip();\n        Ship.randomShip(size, ship); //also fills in properties of the `ship` argument\n        ship.name = 'Your Ship';\n        return ship;\n    }\n\n    toJSON(): ShipData {\n        const data = super.toJSON();\n        data.p = true;\n        if (this.onPlanet != null) data.on = this.onPlanet.i;\n        return data;\n    }\n\n    static fromJSON(data: ShipData, star: Star) {\n        let ship = new PlayerShip();\n        Ship.fromJSON(data, star, ship);\n        return ship;\n    }\n}\n\nexport function isPlayerShip(ship: Ship): ship is PlayerShip { return ship instanceof PlayerShip };\n", "import { Component } from \"./components\"\nimport { componentSize, drawAirlock, drawShip } from \"./draw\"\nimport { Ship } from \"./ship\"\n\ninterface WalkPoint {\n    canBeHere?: boolean,\n    canGoX?: boolean,\n    canGoY?: boolean,\n    ship?: Ship,\n    component?: Component,\n}\n\nexport type WalkMap = WalkPoint[][];\n\n// export class WalkMap {\n//     map: Array<Array<WalkPoint>> = []\n//     constructor(maxX: number, maxY: number) {\n//         for (let x = 0; x <= maxX; x++) {\n//             this.map[x] = []\n//             for (let y = 0; y <= maxY; y++) {\n//                 this.map[x][y] = {}\n//             }\n//         }\n//     }\n// }\n\nexport class Walker {\n    x: number\n    y: number\n    map: WalkMap\n    box: HTMLElement\n    human: HTMLElement\n    canvas: HTMLCanvasElement\n    ctx: CanvasRenderingContext2D\n    onEnter: (arg0?: Component) => void\n\n    oneShipData: { x0: number; x1: number; y0: number; y1: number; w: number; h: number; };\n    twoShipsData: { ax0: number; ay0: number; airlock_x: number; airlock_y: number; bx0: number; by0: number; max_x: number; max_y: number; }\n    hasSecondShip = false;\n    myShip: Ship;\n    secondShip: Ship;\n\n    newMap(maxX: number, maxY: number) {\n        this.map = [];\n        for (let x = 0; x <= maxX; x++) {\n            this.map[x] = [];\n            for (let y = 0; y <= maxY; y++) {\n                this.map[x][y] = {};\n            }\n        }\n    }\n\n    triggerOnEnter() {\n        this.onEnter(this.map[this.x][this.y].component)\n    }\n\n    goX(sign: number) {\n        if (!this.map[this.x][this.y].canGoX) return false;\n        if (!this.map[this.x + sign][this.y].canBeHere) return false;\n        this.x += sign\n        this.reposition()\n        this.triggerOnEnter()\n        return true\n    }\n    goY(sign: number, sure?: boolean) {\n        if (!sure && !this.map[this.x][this.y].canGoY) return false;\n        if (!this.map[this.x][this.y + sign].canBeHere) return false;\n        this.y += sign\n        this.reposition()\n        this.triggerOnEnter()\n        return true\n    }\n\n    goUp() { this.goY(-1); this.human.style.transform = 'rotate(180deg)' }\n    goDn(sure?: boolean) { this.goY(1, sure); this.human.style.transform = 'rotate(0deg)' }\n    goLt() { this.goX(-1); this.human.style.transform = 'rotate(90deg)' }\n    goRt() { this.goX(1); this.human.style.transform = 'rotate(-90deg)' }\n\n    jumpTo(x: number, y: number, callOnEnter = true) {\n        this.x = x;\n        this.y = y;\n        this.reposition(true);\n        if (callOnEnter) this.triggerOnEnter();\n    }\n\n    reposition(fast?: boolean) {\n        if (fast) {\n            this.canvas.classList.add('notransition');\n        }\n        let walkerOnCanvas_x = (this.x + 0.5) * componentSize\n        let walkerOnDiv_x = this.box.offsetWidth / 2\n        let canvasOffset_x = walkerOnDiv_x - walkerOnCanvas_x\n        this.canvas.style.left = canvasOffset_x + 'px'\n\n        let walkerOnCanvas_y = (this.y + 0.5) * componentSize\n        let walkerOnDiv_y = this.box.offsetHeight / 2\n        let canvasOffset_y = walkerOnDiv_y - walkerOnCanvas_y\n        this.canvas.style.top = canvasOffset_y + 'px'\n        if (fast) {\n            this.canvas.offsetHeight; // Trigger a reflow, flushing the CSS changes\n            this.canvas.classList.remove('notransition');\n        }\n    }\n\n    putTwoShips(a: Ship, b: Ship) {\n        const a_sz = a.gridSize;\n        const b_sz = b.gridSize;\n        const a_lock = a.bottomAirlock;\n        const b_lock = b.topAirlock;\n        const airlock_x = Math.max(a_lock, b_lock) + 1;\n        const airlock_y = a_sz.h + 1;\n        const max_x = airlock_x + Math.max(a_sz.w - a_lock, b_sz.w - b_lock);\n        const max_y = airlock_y + b_sz.h + 1;\n        this.myShip = b;\n        this.secondShip = a;\n        this.hasSecondShip = true;\n        this.twoShipsData = {\n            'ax0': airlock_x - a_lock + a_sz.x0,\n            'ay0': a_sz.y0 + 1,\n            'airlock_x': airlock_x,\n            'airlock_y': airlock_y,\n            'bx0': airlock_x - b_lock + b_sz.x0,\n            'by0': airlock_y + b_sz.y0 + 1,\n            'max_x': max_x,\n            'max_y': max_y,\n        };\n    }\n\n    drawTwoShips(a: Ship, b: Ship) {\n        this.putTwoShips(a, b);\n        const c = this.twoShipsData;\n        //console.log('putTwoShips says', a.gridSize, b.gridSize, a.bottomAirlock, b.topAirlock, c)\n        this.newMap(c.max_x, c.max_y);\n        this.ctx.canvas.width = componentSize * (c.max_x + 1);\n        this.ctx.canvas.height = componentSize * (c.max_y + 1);\n\n        drawShip(this.ctx, c.ax0, c.ay0, a, this.map);\n        drawShip(this.ctx, c.bx0, c.by0, b, this.map);\n        drawAirlock(this.ctx, c.airlock_x, c.airlock_y, a, b, this.map);\n    }\n\n    drawMyShip() {\n        this.hasSecondShip = false;\n        const gs = this.oneShipData = this.myShip.gridSize;\n        this.newMap(gs.w + 1, gs.h + 1);\n        this.ctx.canvas.width = componentSize * (gs.w + 2);\n        this.ctx.canvas.height = componentSize * (gs.h + 2);\n        drawShip(this.ctx, gs.x0 + 1, gs.y0 + 1, this.myShip, this.map);\n    }\n\n    detach() {\n        if (!this.hasSecondShip) return false;\n        let moveDnFromAirlock = false;\n        if (this.y == this.twoShipsData.airlock_y) {\n            //player stands in airlock\n            // assume my ship is lower ship\n            this.y++;\n            moveDnFromAirlock = true;\n        }\n        this.secondShip.playerOnShip = (this.y < this.twoShipsData.airlock_y);\n        this.myShip.playerOnShip = (this.y > this.twoShipsData.airlock_y);\n        if (this.y < this.twoShipsData.airlock_y) {\n            // player on top (\"a\") ship\n            // TODO\n        } else {\n            // player on bottom (\"b\") ship, which is also my ship\n            const player_x = this.myShip.playerX = this.x - this.twoShipsData.bx0;\n            const player_y = this.myShip.playerY = this.y - this.twoShipsData.by0;\n            this.drawMyShip();\n            if (moveDnFromAirlock) {\n                this.jumpTo(this.oneShipData.x0 + 1 + player_x, this.oneShipData.y0 + player_y, false);\n                this.goDn(true);\n            } else {\n                this.jumpTo(this.oneShipData.x0 + 1 + player_x, this.oneShipData.y0 + 1 + player_y, false);\n            }\n        }\n    }\n\n    attach(otherShip: Ship) {\n        if (this.hasSecondShip) return false;\n        // player coordinates relative to ship\n        const player_x = this.x - 1 - this.oneShipData.x0;\n        const player_y = this.y - 1 - this.oneShipData.y0;\n        this.drawTwoShips(otherShip, this.myShip);\n        this.jumpTo(this.twoShipsData.bx0 + player_x, this.twoShipsData.by0 + player_y);\n    }\n\n    reattach() {\n        if (!this.hasSecondShip) return false;\n        if (this.y >= this.twoShipsData.airlock_y) {\n            // assuming player is on the top ship\n            return\n        }\n        const player_x = this.secondShip.playerX = this.x - this.twoShipsData.ax0;\n        const player_y = this.secondShip.playerY = this.y - this.twoShipsData.ay0;\n        this.drawTwoShips(this.secondShip, this.myShip);\n        this.jumpTo(this.twoShipsData.ax0 + player_x, this.twoShipsData.ay0 + player_y);\n    }\n}", "//import { } from \"./draw.js\";\nimport { PlayerShip } from \"./playerShip.js\";\nimport { ShipData } from \"./ship.js\";\nimport { Component } from \"./components.js\";\nimport { gebi, setStatus, showDate, toPoint } from \"./utils.js\";\nimport { Walker } from \"./walker.js\";\nimport { Star } from \"./stars.js\";\nimport { GS, gs, loadGS, newGS } from \"./gameState.js\";\nimport { shipBaseSpeed } from \"./const.js\";\nimport { draw_star } from \"./draw.js\";\n\nif (location.hostname == 'localhost' || location.hostname == '127.0.0.1') {\n    new EventSource('/esbuild').addEventListener('change', () => location.reload());\n}\n\n// const newEasyShip = new PlayerShip();\n// newEasyShip.name = 'Your Ship';\n// newEasyShip.color = 'white';\n// newEasyShip.rows = [[], []];\n// const cb = new CargoBay();\n// cb.cargo.push(new Water());\n// cb.cargo.push(new Food());\n// cb.cargo.push(new Iron());\n// cb.cargo.push(new Radioactives());\n// newEasyShip.addComponent(cb, 0);\n// newEasyShip.offsets = [0, 0];\n// newEasyShip.balanceBallast();\n// newEasyShip.countComponents();\n// newEasyShip.fromPoint = { 'x': 0, 'y': 0 };\n// newEasyShip.fromTime = -1;\n// newEasyShip.toPlanet = { 'i': 0 };\n// newEasyShip.toTime = 0;\n// console.log(JSON.stringify(newEasyShip.toJSON()));\n\nconst newEasyShip = { \"a\": false, \"n\": \"Your Ship\", \"c\": \"#5E5E5E\", \"o\": [0, 0], \"r\": [[{ \"t\": \"CargoBay\", \"c\": [{ \"t\": \"Water\" }, { \"t\": \"Food\" }, { \"t\": \"Iron\" }, { \"t\": \"Radioactives\" }] }], [{ \"t\": \"Ballast\" }]], \"frX\": 0, \"frY\": 0, \"frT\": -1, \"toP\": 0, \"toT\": 0, \"p\": true }\nif (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    newEasyShip.c = '#919191';\n}\n\nvar w = new Walker()\n\nvar c = gebi(\"myCanvas\") as HTMLCanvasElement;\nvar ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n\nw.box = gebi('canvasBox')\nw.human = gebi('human')\nw.canvas = c\nw.ctx = ctx\nw.onEnter = onEnter\nwindow.onresize = () => { gs.walker.reposition(true) }\n\nfunction newGame(shipData?: ShipData) {\n    newGS();\n    gs.star = new Star();\n    gs.star.addRandomShips(0);\n    if (shipData) gs.playerShip = PlayerShip.fromJSON(shipData, gs.star);\n    else gs.playerShip = PlayerShip.randomShip(15);\n    gs.star.ships.push(gs.playerShip);\n\n    gs.playerShip.fromPoint = toPoint(gs.star.planets[1]);\n    gs.playerShip.toPlanet = gs.star.planets[1];\n    // gs.playerShip.planTrip({ x: gs.star.planets[0].x - shipBaseSpeed, y: gs.star.planets[0].y }, gs.star.planets[0], -1);\n    gs.now = 0;\n    startGame(true);\n}\n\nfunction loadGame() {\n    if (!loadGS(JSON.parse(localStorage.space2d3_3))) return false;\n    startGame();\n    return true;\n}\n\nfunction startGame(newGame = false) {\n    w.myShip = gs.playerShip;\n    w.drawMyShip();\n    w.jumpTo(w.oneShipData.x0 + 1, w.oneShipData.y0 + 1);\n    gs.walker = w;\n    gebi('main').style.display = 'flex';\n    gs.state = GS.flying;\n    gs.arrive(!newGame, newGame); //do not trigger onEnter on loadGame (you're supposed to reused saved data instead of regenerating new one); do not save on new game\n    showDate(Math.floor(gs.now));\n    const c = gebi('systemCanvas') as HTMLCanvasElement;\n    const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n    draw_star(ctx, gs.star);\n    for (let ship of gs.star.ships) {\n        ship.updateSpaceXY(gs.now, false);\n    }\n    setStatus('ship', 'none'); //in case a game is already in progress\n    window.gs = gs;\n}\n\ngebi('newGameEasy').onclick = () => { newGame(newEasyShip) };\ngebi('newGameHard').onclick = () => { newGame() };\n\nif (localStorage.space2d3_3) {\n    if (!loadGame()) {\n        localStorage.space2d3_3 = prompt('Error loading game. Fix savegame data below or press Cancel to delete savegame and start anew', localStorage.space2d3_3) || '';\n        location.reload();\n    }\n} else (gebi('newGameDialog') as HTMLDialogElement).showModal();\n\ngebi('newGameButton').onclick = () => {\n    gebi('newGameCancelBox').style.display = '';\n    (gebi('newGameDialog') as HTMLDialogElement).showModal();\n};\n\nwindow.onkeypress = (e) => {\n    switch (e.key) {\n        case 'w': w.goUp(); break;\n        case 'a': w.goLt(); break;\n        case 's': w.goDn(); break;\n        case 'd': w.goRt(); break;\n    }\n}\n\nfunction onEnter(c?: Component) {\n    if (!c) return;\n    gebi('currentComponent').innerHTML = `#${c.typename} {display:block}`\n    if (c.cellName)\n        gebi('componentLegend').innerText = `${c.cellName}: ${c.typename}`\n    else\n        gebi('componentLegend').innerText = `${c.typename}`\n    c.onEnter(gs)\n}\n"],
  "mappings": "MA2FO,SAASA,GAAOC,EAAa,CAEhC,IAAMC,EAAS,SAASD,EAAK,EAAE,EACzBE,EAAKD,GAAU,GAAM,IACrBE,EAAKF,GAAU,EAAK,IACpBG,EAAIH,EAAS,IAEfI,EAASH,EAAI,IACbI,EAASH,EAAI,IACbI,EAASH,EAAI,IAEbC,EAAQ,OAASA,EAAQ,KAAK,KAAMA,EAAQ,MAAS,MAAQ,GAAG,EAC/DA,EAAQA,EAAQ,MACjBC,EAAQ,OAASA,EAAQ,KAAK,KAAMA,EAAQ,MAAS,MAAQ,GAAG,EAC/DA,EAAQA,EAAQ,MACjBC,EAAQ,OAASA,EAAQ,KAAK,KAAMA,EAAQ,MAAS,MAAQ,GAAG,EAC/DA,EAAQA,EAAQ,MAErBF,EAAQA,EAAQ,IAChBC,EAAQA,EAAQ,IAChBC,EAAQA,EAAQ,IAMhB,IAAIC,GAHMH,EAAQ,MAASC,EAAQ,MAASC,EAAQ,OACxC,IAIZ,OAAIC,EAAQ,QAAUA,EAAQ,KAAK,IAAIA,EAAO,EAAI,CAAC,EAC9CA,EAAS,MAAQA,EAAU,GAAK,IAExB,IAAMA,EAAS,EAGhC,CAGO,SAASC,GAAOC,EAAG,CACtB,IAAIF,GAASE,EAAI,IAAM,IACnBC,EAAQH,EACRI,EAAQJ,EAENK,EAAQ,OACRC,EAAQ,IACRC,EAAQ,QAEV,CAACC,EAAGC,EAAGC,CAAC,EAAI,CAACP,EAAOH,EAAOI,CAAK,EAC/B,IAAIO,GAAK,KAAK,IAAIA,EAAG,CAAC,EAAI,QACrB,KAAK,IAAIA,EAAG,CAAC,GACZA,EAAI,GAAK,KAAO,KAAK,EAEhCH,GAAKH,EACLI,GAAKH,EACLI,GAAKH,EAELJ,EAAQK,EAAI,IACZR,EAAQS,EAAI,IACZL,EAAQM,EAAI,IAEZ,IAAIb,EAAQM,EAAQ,OAASH,EAAS,QAAWI,EAAS,OAEtDV,EAAIG,EAAQ,SACV,MAAQ,KAAK,IAAIA,EAAQ,EAAI,GAAI,EAAI,KACrC,MAAQA,EACd,OAAAH,EAAI,KAAK,MAAMA,EAAI,GAAG,GAEd,GAAK,GAAKA,GAAK,GAAKA,GAAK,EAAIA,GAAG,SAAS,EAAE,EAAE,MAAM,CAAC,CAChE,CCvJO,SAASkB,EAAUC,EAAWC,EAAmB,CACvD,OAAID,EAAIC,IAAG,CAACD,EAAGC,CAAC,EAAI,CAACA,EAAGD,CAAC,GAClB,KAAK,MAAM,KAAK,OAAO,GAAKC,EAAID,EAAI,EAAE,EAAIA,CAClD,CAEO,SAASE,EAAcF,EAAW,CACxC,OAAOA,EAAE,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAE,MAAM,CAAC,CAC9C,CAEO,SAASG,EAAWC,EAAiB,CAC3C,OAAOA,EAAM,IAAKJ,IAAY,CAAE,KAAM,KAAK,OAAO,EAAG,MAAOA,CAAE,EAAE,EAC9D,KAAK,CAACA,EAAsBC,IAAyBD,EAAE,KAAOC,EAAE,IAAI,EACpE,IAAKD,GAAuBA,EAAE,KAAK,CACtC,CAEO,SAASK,EAAIL,EAAqB,CACxC,MAAO,CAAC,GAAG,MAAMA,CAAC,EAAE,KAAK,CAAC,CAE3B,CAKO,SAASM,EAAKC,EAAY,CAChC,IAAMC,EAAU,SAAS,eAAeD,CAAE,EAC1C,GAAI,CAACC,EAAS,MAAM,eAAe,WAAWD,CAAE,YAAY,EAC5D,OAAOC,CACR,CAOO,SAASC,EAAUC,EAAyBC,EAAYC,EAAiBC,EAAe,CAC9FC,EAAK,UAAUJ,CAAI,EAAE,EAAE,UAAY,WAAWA,CAAI,IAAIC,CAAE,6BACpDC,IAAKE,EAAK,UAAUJ,CAAI,IAAIC,CAAE,OAAO,EAAE,UAAYC,EAAI,OAAO,EAAI,GAClEC,IAAMC,EAAK,UAAUJ,CAAI,IAAIC,CAAE,OAAO,EAAE,UAAYE,EAAK,SAAS,EACvE,CAEO,SAASE,GAASC,EAAe,CACvCF,EAAK,SAAS,EAAE,WAAaE,EAAQ,GAAG,SAAS,EACjD,IAAMC,EAAO,KAAK,MAAMD,EAAQ,GAAG,EAAI,IACjCE,EAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAAE,KAAK,MAAOF,EAAQ,IAAO,EAAE,CAAC,EACpHG,EAAM,KAAK,MAAMH,EAAQ,EAAE,EAAI,EACrCF,EAAK,UAAU,EAAE,UAAY,GAAGK,CAAG,IAAID,CAAK,IAAID,CAAI,EAIrD,CAEO,SAASG,GAAWC,EAAa,CACvC,IAAMC,EAAIC,GAAOF,CAAG,EACpB,OAAIC,EAAI,GAAWE,GAAO,KAAK,IAAIF,EAAI,GAAI,GAAG,CAAC,EACnCE,GAAO,KAAK,IAAIF,EAAI,GAAI,CAAC,CAAC,CACvC,CAEO,SAASG,EAAOC,EAAgBC,KAAcC,EAAyB,CAC7E,GAAI,CAACF,EACJ,MAAIE,EAAK,QAAQ,QAAQ,MAAMD,EAAK,GAAGC,CAAI,EACrC,IAAI,MAAMD,CAAG,CAErB,CAEO,SAASE,GAAQC,EAAiB,CACxC,MAAO,CAAE,EAAKA,EAAE,EAAG,EAAKA,EAAE,CAAE,CAC7B,CCzEO,IAAeC,EAAf,KAA8B,CACjC,OAAO,GAEP,IAAI,QAAS,CAAE,OAAO,KAAK,WAAqC,CAChE,IAAI,UAAmB,CAAE,OAAO,KAAK,OAAO,EAAG,CAE/C,QAAS,CACL,MAAO,CAAE,EAAK,KAAK,QAAS,CAChC,CACA,OAAO,SAASC,EAA6BC,EAAc,CAEvD,OAAO,IAAKD,CAChB,CACJ,EAEO,SAASE,GAASD,EAAuB,CAC5C,IAAMD,EAAOG,EAAMF,EAAK,CAAC,EACzB,OAAOD,EAAK,SAASA,EAAMC,CAAI,CACnC,CAGO,IAAIE,EAAkD,CAAC,EAEvD,SAASC,EAAQJ,EAA6BK,EAAY,CAC7DF,EAAME,CAAE,EAAIL,EACZA,EAAK,GAAKK,CACd,CCxBO,IAAeC,EAAf,cAA6BC,CAAe,CAC/C,OAAO,OACP,QAAS,CACL,MAAO,GAAI,KAAK,OAAwB,QAAU,EAAE,IAAI,KAAK,QAAQ,EACzE,CACJ,EACO,SAASC,EAAYC,EAAmD,CAAE,OAAOA,EAAK,qBAAqBH,CAAM,CAEjH,IAAeI,GAAf,cAAmCJ,CAAM,CAAE,EAErCK,EAAN,cAAqBD,EAAY,CACpC,OAAO,OAAS,WACpB,EACAE,EAAQD,EAAQ,QAAQ,EAEjB,IAAME,EAAN,cAAmBH,EAAY,CAClC,OAAO,OAAS,iBACpB,EACAE,EAAQC,EAAM,MAAM,EAEb,IAAeC,EAAf,cAAqCR,CAAM,CAAE,EAG7C,IAAMS,EAAN,cAAoBC,CAAc,CACrC,OAAgB,MAAQ,OACxB,OAAO,OAAS,iBACpB,EACAC,EAAQF,EAAO,OAAO,EAEf,IAAMG,EAAN,cAAmBF,CAAc,CACpC,OAAgB,MAAQ,SACxB,OAAO,OAAS,oBACpB,EACAC,EAAQC,EAAM,MAAM,EAEb,IAAMC,EAAN,cAAmBH,CAAc,CACpC,OAAgB,MAAQ,QACxB,OAAO,OAAS,iBACpB,EACAC,EAAQE,EAAM,MAAM,EAEb,IAAMC,EAAN,cAA2BJ,CAAc,CAC5C,OAAgB,MAAQ,MACxB,OAAO,OAAS,oBACpB,EACAC,EAAQG,EAAc,cAAc,EAQ7B,IAAMC,EAAN,cAAyBC,CAAM,CAClC,OAAO,OAAS,wBAChB,KACA,GACA,MACA,QAAS,CACL,MAAO,GAAI,KAAK,OAAwB,QAAU,EAAE,IAAI,KAAK,QAAQ,UAAU,KAAK,EAAE,aAC1F,CACA,QAAyB,CACrB,MAAO,CACH,EAAK,KAAK,SACV,EAAK,KAAK,KACV,GAAM,KAAK,GACX,IAAO,KAAK,KAChB,CACJ,CAEA,OAAO,SAASC,EAAyBC,EAAkC,CACvE,IAAMC,EAAM,IAAIF,EAChB,OAAAE,EAAI,KAAOD,EAAK,EAChBC,EAAI,GAAKD,EAAK,GACdC,EAAI,MAAQD,EAAK,IACVC,CACX,CACJ,EACAR,EAAQI,EAAY,YAAY,EACzB,SAASK,GAAaC,EAAiC,CAAE,OAAOA,aAAgBN,CAAW,CCxE3F,IAAMO,GAAY,CAAC,kBAAmB,iBAAkB,kBAAmB,OAAQ,mBAAoB,aAAc,aAAc,mBAAoB,cAAe,kBAAmB,sBAAuB,oBAAqB,eAAgB,cAAe,iBAAkB,mBAAoB,YAAa,UAAW,yBAA0B,iBAAkB,eAAgB,gBAAiB,OAAQ,eAAgB,eAAgB,OAAQ,iBAAkB,cAAe,QAAS,gBAAiB,UAAW,eAAgB,gBAAiB,kBAAmB,wBAAyB,mBAAoB,gBAAiB,eAAgB,iBAAkB,sBAAuB,gBAAiB,iBAAkB,gBAAiB,gBAAiB,oBAAqB,UAAW,aAAc,oBAAqB,mBAAmB,EACr0BC,GAAa,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,QAAQ,ECR7gB,SAASC,GAAWC,EAAWC,EAAmB,CACjD,IAAMC,EAAI,KAAK,MAAMF,EAAGC,CAAC,EACzB,MAAO,CAACD,EAAIE,EAAGD,EAAIC,CAAC,CACrB,CAEA,SAASC,GAAUC,EAAYC,EAAoB,CAClD,OAAOD,EAAG,CAAC,EAAIC,EAAG,CAAC,EAAID,EAAG,CAAC,EAAIC,EAAG,CAAC,CACpC,CAQA,SAASC,GAAUC,EAAUC,EAAUC,EAAkB,CACxD,IAAMC,EAAIX,GAAWQ,EAAE,EAAIC,EAAE,EAAGD,EAAE,EAAIC,EAAE,CAAC,EACnCG,EAAIR,GAAUO,EAAG,CAACD,EAAE,EAAID,EAAE,EAAGC,EAAE,EAAID,EAAE,CAAC,CAAC,EAC7C,MAAO,CAACA,EAAE,EAAIE,EAAE,CAAC,EAAIC,EAAGH,EAAE,EAAIE,EAAE,CAAC,EAAIC,CAAC,CACvC,CAGO,SAASC,GAAeL,EAAUC,EAAUC,EAAUI,EAAc,CAC1E,GAAM,CAACb,EAAGC,CAAC,EAAIK,GAAUC,EAAGC,EAAGC,CAAC,EAChC,OAAOT,GAAK,KAAK,IAAIO,EAAE,EAAGC,EAAE,CAAC,GAC5BR,GAAK,KAAK,IAAIO,EAAE,EAAGC,EAAE,CAAC,GACtBP,GAAK,KAAK,IAAIM,EAAE,EAAGC,EAAE,CAAC,GACtBP,GAAK,KAAK,IAAIM,EAAE,EAAGC,EAAE,CAAC,GACtB,KAAK,MAAMR,EAAIS,EAAE,EAAGR,EAAIQ,EAAE,CAAC,EAAII,CACjC,CCrBO,IAAMC,EAAgB,GAChBC,EAAkB,EAE/B,SAASC,GAAcC,EAA+BC,EAAWC,EAAWC,EAAYC,EAAsBC,EAAc,CAExHL,EAAI,UAAU,EACVG,EAAK,QACLH,EAAI,KAAKC,EAAIJ,EAAeK,EAAIL,EAAgBC,EAAiBD,EAAeA,EAAgB,EAAIC,CAAe,EAEnHE,EAAI,KAAKC,EAAIJ,EAAgBC,EAAiBI,EAAIL,EAAeA,EAAgB,EAAIC,EAAiBD,CAAa,EAEvHG,EAAI,UAAY,EAChBA,EAAI,YAAcG,EAAK,MACvBH,EAAI,UAAYG,EAAK,OACrBH,EAAI,KAAK,EACTA,EAAI,OAAO,EACXA,EAAI,aAAe,MACnBA,EAAI,UAAYG,EAAK,MACrBH,EAAI,SAASI,EAAU,UAAY,GAAIH,EAAIJ,EAAgBC,EAAkB,EAAYI,EAAIL,EAAgB,CAAU,EACvH,IAAIS,EAAiBF,EAAU,SAAS,CAAC,EACrCA,aAAqBG,IAAmBD,GAAkB,KAC1DF,aAAqBI,IAAOF,GAAkB,KAClDN,EAAI,SAASM,EAAgBL,EAAIJ,EAAgBC,EAAkB,EAAYI,EAAIL,EAAgB,EAAa,EAAE,EAClHQ,EAAIJ,CAAC,EAAEC,CAAC,EAAI,CACR,UAAW,GACX,OAAQC,EAAK,QACb,OAAQ,CAACA,EAAK,QACd,KAAMA,EACN,UAAWC,CACf,CACJ,CAEA,SAASK,GAAYT,EAA+BU,EAAYC,EAAYR,EAAYE,EAAc,CAClG,IAAMO,EAAIT,EAAK,QACfH,EAAI,UAAU,EACdA,EAAI,MAAMU,EAAKE,EAAE,GAAKf,GAAgBc,EAAKC,EAAE,GAAKf,EAAee,EAAE,EAAIf,EAAee,EAAE,EAAIf,CAAa,EACzGG,EAAI,YAAcG,EAAK,MACvBH,EAAI,UAAYG,EAAK,OACrBH,EAAI,KAAK,EACTA,EAAI,OAAO,EACX,IAAII,EAAY,IAAIS,EACpB,QAASZ,EAAI,EAAGA,EAAIW,EAAE,EAAGX,IACrB,QAASC,EAAI,EAAGA,EAAIU,EAAE,EAAGV,IACrBG,EAAIJ,EAAIS,CAAE,EAAER,EAAIS,CAAE,EAAI,CAClB,UAAW,GACX,OAAQ,GACR,OAAQ,GACR,KAAMR,EACN,UAAWC,CACf,CACZ,CAEO,SAASU,GAAYd,EAA+BC,EAAWC,EAAWa,EAASC,EAASX,EAAc,CAG7G,IAAMY,EAAWjB,EAAI,qBAAqBC,EAAIJ,EAAgBC,EAAiBI,EAAIL,EAAeI,EAAIJ,EAAgBC,GAAkBI,EAAI,GAAKL,CAAa,EACxJqB,EAAYlB,EAAI,qBAAqBC,EAAIJ,EAAgBC,EAAiBI,EAAIL,EAAeI,EAAIJ,EAAgBC,GAAkBI,EAAI,GAAKL,CAAa,EAC/JoB,EAAS,aAAa,EAAGF,EAAE,KAAK,EAChCE,EAAS,aAAa,EAAGD,EAAE,KAAK,EAChCE,EAAU,aAAa,EAAGH,EAAE,MAAM,EAClCG,EAAU,aAAa,EAAGF,EAAE,MAAM,EAClChB,EAAI,YAAciB,EAClBjB,EAAI,UAAYkB,EAChBlB,EAAI,UAAU,EACdA,EAAI,OAAOC,EAAIJ,EAAgBC,EAAiBI,EAAIL,CAAa,EACjEG,EAAI,OAAOC,EAAIJ,EAAgBC,EAAkB,GAAII,EAAI,IAAOL,CAAa,EAC7EG,EAAI,OAAOC,EAAIJ,EAAgBC,GAAkBI,EAAI,GAAKL,CAAa,EACvEG,EAAI,QAAQC,EAAI,GAAKJ,EAAgBC,GAAkBI,EAAI,GAAKL,CAAa,EAC7EG,EAAI,QAAQC,EAAI,GAAKJ,EAAgBC,EAAkB,GAAII,EAAI,IAAOL,CAAa,EACnFG,EAAI,QAAQC,EAAI,GAAKJ,EAAgBC,EAAiBI,EAAIL,CAAa,EACvEG,EAAI,UAAU,EACdA,EAAI,KAAK,EACTA,EAAI,OAAO,EACXK,EAAIJ,CAAC,EAAEC,CAAC,EAAI,CACR,UAAW,GACX,OAAQ,GACR,UAAW,IAAIiB,CACnB,CACJ,CAEO,SAASC,GAASpB,EAA+BU,EAAIC,EAAIR,EAAYE,EAAc,CAEtF,QAASgB,EAAM,EAAGA,EAAMlB,EAAK,KAAK,OAAQkB,IACtC,QAASC,EAAI,EAAGA,EAAInB,EAAK,KAAKkB,CAAG,EAAE,OAAQC,IAAK,CAC5C,IAAIlB,EAAYD,EAAK,KAAKkB,CAAG,EAAEC,CAAC,EAC5BC,EAAKpB,EAAK,QAAQkB,EAAKC,CAAC,EAC5BlB,EAAU,SAAW,OAAO,aAAa,GAAKiB,CAAG,EAAIE,EAAG,EACxDxB,GAAcC,EAAKU,EAAKa,EAAG,EAAGZ,EAAKY,EAAG,EAAGpB,EAAMC,EAAWC,CAAG,CACjE,CAEJI,GAAYT,EAAKU,EAAIC,EAAIR,EAAME,CAAG,CACtC,CAEO,SAASmB,GAAUxB,EAA+BG,EAAYsB,EAAmBC,EAAmB,CAEvG,IAAMzB,EAAKE,EAAK,EAAKsB,EACfvB,EAAKC,EAAK,EAAKsB,EAIrB,GAFAzB,EAAI,UAAYG,EAAK,MACrBH,EAAI,SAASC,EAAI,EAAGC,EAAI,EAAG,EAAG,CAAC,EAC3BwB,IAAa,QAAavB,aAAgBwB,EAC1C,QAASC,EAAI,EAAGA,GAAKF,EAAUE,IAC3B5B,EAAI,UAAU,EACdA,EAAI,IAAIC,EAAGC,EAAGuB,EAAYG,EAAG,EAAG,CAAC,EACjC5B,EAAI,YAAc,MAClBA,EAAI,OAAO,CAGvB,CAmCO,SAAS6B,GAAYC,EAA+BC,EAAgBC,EAAmBC,EAAYC,EAAY,CAC9GD,IAAM,SAAWA,EAAKF,EAAO,EAAKC,GAClCE,IAAM,SAAWA,EAAKH,EAAO,EAAKC,GACtC,IAAIG,EAAML,EAAI,qBAAqBG,EAAI,EAAGC,EAAI,EAAG,EAAGD,EAAGC,EAAG,GAAcF,CAAS,EACjFG,EAAI,aAAa,EAAGJ,EAAO,QAAQ,EACnCI,EAAI,aAAa,EAAGJ,EAAO,SAAS,EACpCD,EAAI,UAAYK,EAChBL,EAAI,UAAU,EACdA,EAAI,IAAIG,EAAGC,EAAG,GAAcF,EAAW,EAAG,CAAC,EAC3CF,EAAI,KAAK,CACb,CAGO,SAASM,GAAUN,EAA+BO,EAAY,CAEjE,IAAMC,EAAWR,EAAI,OAAO,MACtBE,EAAYM,EAAYD,EAAK,KAC7BE,EAASD,EAAW,EAE1B,GADAR,EAAI,UAAU,EAAG,EAAGQ,EAAUA,CAAQ,EAClCD,EAAK,OAAQ,CACb,IAAIF,EAAML,EAAI,qBAAqBS,EAAQA,EAAQ,EAAGA,EAAQA,EAAQP,EAAY,CAAC,EACnFG,EAAI,aAAa,EAAG,OAAO,EAC3BA,EAAI,aAAa,GAAKE,EAAK,KAAK,EAChCF,EAAI,aAAa,EAAG,aAAa,EACjCL,EAAI,UAAYK,EAChBL,EAAI,SAAS,EAAG,EAAGQ,EAAUA,CAAQ,CACzC,KAAO,CACH,IAAIH,EAAML,EAAI,qBAAqBS,EAAQA,EAAQ,GAAIA,EAAQA,EAAQP,EAAY,CAAC,EACpFG,EAAI,aAAa,EAAGE,EAAK,KAAK,EAC9BF,EAAI,aAAa,EAAG,aAAa,EACjCL,EAAI,UAAYK,EAChBL,EAAI,SAAS,EAAG,EAAGQ,EAAUA,CAAQ,CACzC,CACA,QAASP,KAAUM,EAAK,QACpBR,GAAYC,EAAKC,EAAQC,CAAS,CAE1C,CAEO,SAASQ,GAAWV,EAA+BW,EAAeC,EAAkB,CACvF,IAAMJ,EAAWR,EAAI,OAAO,MACtBE,EAAYM,EAAWK,EAAG,KAAK,KACrCb,EAAI,UAAU,EAAG,EAAGQ,EAAUA,CAAQ,EACtC,QAASM,KAAQH,GACTG,aAAgBC,GAAcD,EAAK,OAAOD,EAAG,WAAYD,CAAQ,IACjEI,GAAUhB,EAAKc,EAAMZ,EAAWU,CAAQ,CAEpD,CCrMA,SAASK,GAAsBC,EAAYC,EAAYC,EAAYC,EAAYC,EAAW,CACtF,IAAMC,EAAKD,GAAK,EAAIJ,GAAM,EAAII,GAAK,EAAIH,GAAM,GAAKC,EAAKD,EAAKE,EAAKH,IAAO,EAClEM,GAAM,CAACN,EAAKE,EAAKD,EAAKE,EAAK,KAAK,KAAKE,CAAE,IAAMH,GAAM,EAAIC,GAAM,EAAIC,GAAK,GACtEG,GAAM,CAACP,EAAKE,EAAKD,EAAKE,EAAK,KAAK,KAAKE,CAAE,IAAMH,GAAM,EAAIC,GAAM,EAAIC,GAAK,GAC5E,OAAI,KAAK,IAAIE,EAAIC,CAAE,EAAI,EAAU,KAAK,IAAID,EAAIC,CAAE,EACpC,KAAK,IAAID,EAAIC,CAAE,CAC/B,CAEO,SAASC,GAAqBC,EAAUC,EAAUC,EAAUP,EAAWQ,EAAa,CACvF,OAAOA,EAAMb,GAAsBW,EAAE,EAAID,EAAE,EAAGC,EAAE,EAAID,EAAE,EAAGE,EAAE,EAAGA,EAAE,EAAGP,CAAC,CACxE,CCDO,IAAeS,GAAf,cAAiCC,CAAe,CACnD,SAAY,GACZ,KACA,QAAQC,EAAe,CAAE,CAC7B,EACO,SAASC,GAAgBC,EAAuD,CAAE,OAAOA,EAAK,qBAAqBJ,EAAU,CAE7H,IAAeK,EAAf,cAAwCL,EAAU,CAAE,EAE9CM,EAAN,cAAsBD,CAAiB,CAC1C,QAAQH,EAAe,CACnBK,EAAK,gBAAgB,EAAE,MAAM,QAAWL,EAAG,WAAW,UAAYA,EAAG,WAAW,SAAY,GAAK,OACjGK,EAAK,kBAAkB,EAAE,MAAM,QAAWL,EAAG,WAAW,UAAYA,EAAG,WAAW,SAAY,OAAS,GACvGK,EAAK,gBAAgB,EAAE,QAAU,IAAM,CAAEL,EAAG,OAAO,CAAE,CACzD,CACJ,EACAM,EAAQF,EAAS,SAAS,EAEnB,IAAMG,EAAN,cAAsBJ,CAAiB,CAAE,EAChDG,EAAQC,EAAS,SAAS,EAEnB,IAAMC,EAAN,cAAsBL,CAAiB,CAC1C,SAAY,GACZ,QAAQH,EAAe,CAClB,SAAS,cAAc,YAAY,EAAkB,UAAY,KAAK,UAAY,EACvF,CACJ,EACAM,EAAQE,EAAS,SAAS,EAEnB,IAAMC,GAAN,MAAMC,UAAeP,CAAiB,CACzC,SAAmB,GACnB,QAAS,CACL,MAAO,CACH,EAAK,KAAK,SACV,EAAK,KAAK,QACd,CACJ,CACA,OAAO,SAASD,EAA6BS,EAAqB,CAC9D,IAAIC,EAAI,IAAIF,EACZ,OAAAE,EAAE,SAAWD,EAAK,EACXC,CACX,CACJ,EACAN,EAAQG,GAAQ,QAAQ,EAIjB,IAAeI,EAAf,cAAuCf,EAAU,CAAE,EACnD,SAASgB,EAAsBZ,EAA6D,CAAE,OAAOA,EAAK,qBAAqBW,GAAmB,EAAEX,EAAK,qBAAqBa,EAAmB,CAEjM,IAAMC,EAAN,MAAMC,UAAiBJ,CAAgB,CAC1C,MAAsB,CAAC,EACvB,QAAS,CACL,MAAO,CACH,EAAK,KAAK,SACV,EAAK,KAAK,MAAM,IAAIK,GAAKA,EAAE,OAAO,CAAC,CACvC,CACJ,CACA,OAAO,SAAShB,EAA6BS,EAAqC,CAC9E,IAAIC,EAAI,IAAIK,EACZ,OAAAL,EAAE,MAAQD,EAAK,EAAE,IAAKO,GAAqBC,GAASD,CAAC,CAAU,EACxDN,CACX,CACA,QAAQZ,EAAe,CAClB,SAAS,cAAc,cAAc,EAAuB,UAAY,KAAK,MAAM,IAAIkB,GAAK,OAAOA,EAAE,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,EAC7H,SAAS,eAAe,gBAAgB,EAAqB,MAAM,QAAW,KAAK,MAAM,QAAU,EAAK,GAAK,OAC7G,SAAS,eAAe,mBAAmB,EAAqB,MAAM,QAAW,KAAK,MAAM,QAAU,EAAK,OAAS,EACzH,CACJ,EACAZ,EAAQU,EAAU,UAAU,EACrB,SAASI,EAAWC,EAA6C,CAAE,OAAOA,aAAqBL,CAAS,CAIxG,IAAMM,EAAN,MAAMC,UAAcV,CAAgB,CACvC,eAAiB,EACjB,QAAU,GACV,QAAQb,EAAe,CAEnB,IAAMwB,EADI,SAAS,cAAc,eAAe,EAClC,WAAW,IAAI,EAC7B,KAAK,UAAU,EACfnB,EAAK,cAAc,EAAE,QAAWoB,GAAO,CAC7BA,EAAG,QAA6B,QACtCzB,EAAG,WAAW,WAAaA,EAAG,KAAK,MAAOyB,EAAG,OAA4B,KAAK,EAClF,CACJ,CAEA,QAAQC,EAAqC,CACzC,IAAMC,EAAOD,EAAM,KACbE,EAAOF,EAAM,KACbG,EAAO,KAAK,KAAKD,EAAO,EAAa,EACrCE,EAAYH,IAAS3B,EAAG,WAAW,WAAc,UAAY,GAC7D+B,EAAYJ,IAAS3B,EAAG,WAAc,WAAa,GACzD,MAAO;AAAA,oEACqD2B,EAAK,CAAC,sBAAsBA,EAAK,CAAC,KAAKI,CAAQ,IAAID,CAAQ;AAAA,cACjHH,EAAK,OAAO,GAAO3B,EAAG,UAAU,CAAC;AAAA,iBAE3C,CAEA,UAAUgC,EAAa,CACnB,IAAMC,EAAI5B,EAAK,aAAa,EAC5B,GAAI4B,EAAE,eAAiB,KAAM,OAC7B,IAAMT,EAAMS,EAAE,WAAW,IAAI,EACzBjC,EAAG,KAAKgC,CAAE,GAAG,OAAO,sBAAuBA,GAAO,CAAE,KAAK,UAAUA,CAAE,CAAG,CAAC,EAE7E,IAAML,EAAO,KAAK,KAClB,GAAIA,IAAS,OAAW,OACxB,IAAMO,EAAWP,EAAK,eAAeJ,EAAM,EAAE,EAC7CY,GAAWX,EAAKxB,EAAG,KAAK,MAAOkC,CAAQ,EACvC,IAAME,EAAUpC,EAAG,KAAK,MAAM,OAAO2B,GAAQA,EAAK,OAAO3B,EAAG,WAAYkC,CAAQ,CAAC,EAAE,IAAIG,IAAc,CAAE,KAAQA,EAAG,KAAQrC,EAAG,WAAW,WAAWqC,CAAC,CAAE,EAAG,EAAE,KAAK,CAACzB,EAAG0B,IAAM1B,EAAE,KAAO0B,EAAE,IAAI,EAAE,IAAI,KAAK,OAAO,EAAE,KAAK,EAAE,EAChNF,GAAW,KAAK,UAAY,CAACJ,GAAO,KAAK,eAAiB,KAAOA,KACjE3B,EAAK,cAAc,EAAE,UAAY+B,EACjC,KAAK,QAAUA,EACXJ,IAAI,KAAK,eAAiBA,GAEtC,CAEJ,EACA1B,EAAQgB,EAAO,OAAO,EAEf,IAAMiB,EAAN,cAAoB1B,CAAgB,CAAE,EAC7CP,EAAQiC,EAAO,OAAO,EAIf,IAAeC,EAAf,cAAyCC,CAAgB,CAAE,EAC3D,SAASC,GAAwBC,EAA+D,CAAE,OAAOA,EAAK,qBAAqBH,GAAqB,EAAEG,EAAK,qBAAqBC,GAA2B,CAE/M,IAAMC,GAAN,cAAiCL,CAAkB,CACtD,eAAiB,EACjB,QAAU,GACV,OACA,SAASM,EAAsC,CAC3C,IAAMC,EAASD,EAAM,OACf,EAAIA,EAAM,EACVE,EAAO,KAAK,KAAKC,EAAG,WAAW,WAAWF,CAAM,EAAI,EAAa,EACjEG,EAAYH,GAAU,KAAK,OAAU,UAAY,GACjDI,EAAYJ,GAAUE,EAAG,WAAW,SAAY,WAAa,GACnE,MAAO;AAAA,sEACuD,CAAC,+BAA+B,CAAC,KAAKE,CAAQ,IAAID,CAAQ;AAAA;AAAA,gDAEhF,CAAC;AAAA,cACnCH,EAAO,OAAO,GAAOE,EAAG,WAAY,EAAI,CAAC;AAAA,2BAEnD,CAEA,QAAQG,EAAaC,EAAc,CAC/BC,EAAK,sBAAsB,EAAE,UAAY,uBAAuBF,CAAG,6BAC/DC,IACAC,EAAK,sBAAsB,EAAE,WAAa,iCAAiCD,CAAG,6BACtF,CAEA,QAAQJ,EAAe,CACnB,KAAK,OAASA,EAAG,WAAW,SAE5B,KAAK,QAAQ,QAAQ,EACrB,KAAK,OAAO,EACX,SAAS,cAAc,2BAA2B,EAAuB,QAAWM,GAAO,CAClFA,EAAG,QAA6B,QAEtC,KAAK,OAASN,EAAG,KAAK,QAASM,EAAG,OAA4B,KAAK,EACvE,EACAD,EAAK,yBAAyB,EAAE,MAAM,QAAW,KAAK,gBAAgBE,EAAc,OAAS,GAC7FF,EAAK,wBAAwB,EAAE,MAAM,QAAW,KAAK,gBAAgBE,EAAc,GAAK,OACxFF,EAAK,yBAAyB,EAAE,QAAU,KACtCL,EAAG,WAAW,SAAS,KAAK,OAAQA,EAAG,GAAG,EAC1C,KAAK,QAAQ,QAAQ,EAEd,IAEXK,EAAK,wBAAwB,EAAE,QAAU,IAAM,CAC3C,GAAI,CAACA,EAAK,yBAAyB,GAAG,UAAU,EAAG,MAAO,GAC1D,KAAK,QAAQ,UAAU,EACnBL,EAAG,OAAS,GAAaA,EAAG,OAAO,EACnCA,EAAG,OAAS,GAAaA,EAAG,UAAU,CAC9C,CACJ,CACA,OAAOQ,EAAa,CAChB,GAAIH,EAAK,oBAAoB,EAAE,eAAiB,KAAM,OAClDL,EAAG,KAAKQ,CAAE,GAAG,OAAO,sBAAuBA,GAAO,CAAE,KAAK,OAAOA,CAAE,CAAG,CAAC,EAE1E,IAAMC,EAAUT,EAAG,KAAK,QAAQ,IAAI,CAACU,EAAGC,KAAe,CAAE,OAAUD,EAAG,EAAKC,EAAG,KAAQX,EAAG,WAAW,WAAWU,CAAC,CAAE,EAAG,EAAE,KAAK,CAACE,EAAGC,IAAMD,EAAE,KAAOC,EAAE,IAAI,EAAE,IAAIC,GAAK,KAAK,SAASA,CAAC,CAAC,EAAE,KAAK,EAAE,EAErLL,GAAW,KAAK,UAAY,CAACD,GAAO,KAAK,eAAiB,KAAOA,KAChE,SAAS,cAAc,2BAA2B,EAAuB,UAAYC,EACtF,KAAK,QAAUA,EACXD,IAAI,KAAK,eAAiBA,IAGlC,IAAMO,EAAOf,EAAG,WAAW,WAC3B,GAAI,CAACe,EAAM,KAAK,QAAQ,SAAU,UAAU,UACnC,CAACA,EAAK,OAAO,KAAK,KAAM,KAAK,KAAK,eAAeC,EAAM,EAAE,CAAC,EAAG,KAAK,QAAQ,SAAU,OAAO,UAC3FD,EAAK,eAAgB,KAAK,QAAQ,SAAU,aAAa,MAC7D,CAED,IAAIE,GAAMF,EAAK,SAAS,EAAIA,EAAK,UAAU,IAAMA,EAAK,OAASA,EAAK,UAChEG,GAAMH,EAAK,SAAS,EAAIA,EAAK,UAAU,IAAMA,EAAK,OAASA,EAAK,UAChEhB,EAAOoB,GAAqB,KAAK,KAAMJ,EAAM,CAAE,EAAKE,EAAI,EAAKC,CAAG,EAAG,EAAI,GAAelB,EAAG,GAAG,EAC5FD,EAAOgB,EAAK,OAAS,EAAuB,KAAK,QAAQ,SAAU,QAAQ,GAE3E,KAAK,QAAQ,SAAU,KAAK,EAC5BV,EAAK,mCAAmC,EAAE,UAAYU,EAAK,OAAO,GAAOf,EAAG,UAAU,EACtFK,EAAK,mCAAmC,EAAE,MAAM,QAAW,KAAK,gBAAgBE,EAAc,OAAS,GACvGF,EAAK,kCAAkC,EAAE,MAAM,QAAW,KAAK,gBAAgBE,EAAc,GAAK,OAClGF,EAAK,mCAAmC,EAAE,QAAU,KAChD,KAAK,KAAK,iBAAiBU,EAAME,EAAIC,EAAInB,EAAMC,EAAG,GAAG,EACrD,KAAK,QAAQ,QAAQ,EACd,IAEXK,EAAK,kCAAkC,EAAE,QAAU,IAAM,CACrD,GAAI,CAACA,EAAK,mCAAmC,GAAG,UAAU,EAAG,MAAO,GACpE,KAAK,QAAQ,UAAU,EACnBL,EAAG,OAAS,GAAaA,EAAG,OAAO,EACnCA,EAAG,OAAS,GAAaA,EAAG,UAAU,CAC9C,EAER,CACJ,CACJ,EACAoB,EAAQxB,GAAoB,oBAAoB,EAIzC,IAAMyB,GAAN,cAA8B9B,CAAkB,CACnD,QAAQ+B,EAAY,CAChBjB,EAAK,sBAAsB,EAAE,UAAY,oBAAoBiB,CAAE,4BACnE,CACA,QAAQtB,EAAqB,CACzB,IAAMF,EAASE,EAAG,WAAW,SAC7B,GAAIF,IAAW,KAAM,CACjB,KAAK,QAAQ,MAAM,EACnB,MACJ,CAEA,GADAE,EAAG,WAAW,WAAW,EACrBF,EAAO,OAAS,KAAM,CAEtB,IAAMyB,EAAa,KAAK,IAAIvB,EAAG,WAAW,UAAWF,EAAO,KAAK,EACjE,GAAIyB,GAAc,EAAG,CACjB,KAAK,QAAQ,QAAQ,EACrB,MACJ,CACA,KAAK,QAAQ,MAAM,EACnBlB,EAAK,6BAA6B,EAAE,UAAYkB,EAAW,SAAS,EACpElB,EAAK,2BAA2B,EAAE,UAAYP,EAAO,MAAM,GAC3DO,EAAK,2BAA2B,EAAE,QAAU,IAAM,CAC9CL,EAAG,WAAW,SAAUF,EAAQ,MAAOyB,CAAU,EACjD,KAAK,QAAQ,MAAM,CACvB,EACA,MACJ,CAEA,GAAIvB,EAAG,WAAW,WAAWF,EAAO,KAAK,EAAE,EAAI,EAAG,CAC9C,KAAK,QAAQ,iBAAiB,EAC9B,MACJ,CACA,KAAK,QAAQ,OAAO,EACpB,IAAM0B,EAASnB,EAAK,6BAA6B,EACjDA,EAAK,2BAA2B,EAAE,UAAYP,EAAO,KAAK,GAC1DO,EAAK,0BAA0B,EAAE,UAAYP,EAAO,MAAM,GAC1D0B,EAAO,MAAQA,EAAO,IAAMxB,EAAG,WAAW,WAAWF,EAAO,KAAK,EAAE,EAAE,SAAS,EAC9E0B,EAAO,MAAM,QAAUxB,EAAG,WAAW,WAAWF,EAAO,KAAK,EAAE,GAAK,EAAI,OAAS,GAChF0B,EAAO,SAAW,IAAM,CACpB,IAAMC,EAAa,SAASD,EAAO,KAAK,EACpCE,EAAY,KAAK,MAAMD,EAAa3B,EAAO,KAAK,EACpDO,EAAK,mCAAmC,EAAE,MAAM,QAAWqB,EAAYD,EAAazB,EAAG,WAAW,UAAa,GAAK,OACpH0B,EAAY,KAAK,IAAIA,EAAW1B,EAAG,WAAW,UAAYyB,CAAU,EACpEpB,EAAK,6BAA6B,EAAE,UAAYoB,EAAW,SAAS,EACpEpB,EAAK,4BAA4B,EAAE,UAAYqB,EAAU,SAAS,CACtE,EACAF,EAAO,SAAS,EAChBnB,EAAK,sBAAsB,EAAE,QAAU,IAAM,CACzC,IAAMoB,EAAa,SAASD,EAAO,KAAK,EACpCE,EAAY,KAAK,MAAMD,EAAa3B,EAAO,KAAK,EACpD4B,EAAY,KAAK,IAAIA,EAAW1B,EAAG,WAAW,UAAYyB,CAAU,EAGpEzB,EAAG,WAAW,SAASF,EAAO,KAA8B2B,CAAU,EACtEzB,EAAG,WAAW,SAASF,EAAO,MAA+B4B,CAAS,EAEtE,KAAK,QAAQ,MAAM,CACvB,CACJ,CAEJ,EACAN,EAAQC,GAAiB,iBAAiB,EAEnC,IAAe1B,GAAf,cAAiDJ,CAAkB,CAAE,EAE/DoC,GAAN,cAA8BhC,EAA0B,CAC3D,mBACA,0BACA,iCACA,UAAY,CAAC,GAAI,EAAE,EACnB,QAAQiC,EAAWN,EAAY,CAC3B,KAAK,UAAUM,CAAC,EAAIN,EACpBjB,EAAK,sBAAsB,EAAE,UAAY,KAAK,UAAU,IAAI,CAACiB,EAAIX,IAAM,oBAAoBA,CAAC,IAAIW,CAAE,4BAA4B,EAAE,KAAK,EAAE,CAC3I,CACA,qBAAqBA,EAAYO,EAAU,CACvC,IAAMC,EAAOC,EAAI/B,EAAG,WAAW,KAAK,OAAS,CAAC,EAC9C8B,EAAK,QAAQ,EAAE,EACfzB,EAAKiB,CAAE,EAAE,UAAYQ,EAAK,IAAInB,GAAK,eAAeW,CAAE,IAAIX,EAAI,CAAC,SAAS,OAAO,aAAa,GAAKA,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,EACtHmB,EAAK,QAAQnB,GAAKN,EAAK,GAAGiB,CAAE,IAAIX,EAAI,CAAC,EAAE,EAAE,QAAU,IAAM,CAAEkB,EAASlB,EAAG,IAAI,CAAE,CAAC,CAClF,CACA,QAAQX,EAAqB,CACzB,IAAMF,EAASE,EAAG,WAAW,SAC7B,GAAI,CAACF,EAAQ,OACbE,EAAG,WAAW,WAAW,EAEzB,IAAMgC,EAAehC,EAAG,WAAW,KAAK,KAAK,EAAE,OAAOiC,CAAU,EAC5DC,EAA6B,CAAC,EAClC,QAASC,KAAYH,EACjBE,EAAeA,EAAa,OAAOC,EAAS,MAAM,OAAOC,EAAY,CAAC,EAE1E,IAAMC,EAAuBH,EAAa,OAAOI,GAAOA,EAAI,OAASxC,EAAO,IAAI,EAEhF,GADA,KAAK,mBAAqBoC,EAAa,OAAOI,GAAOA,EAAI,KAAOxC,EAAO,IAAI,EACvE,KAAK,mBAAmB,OAAQ,CAChC,KAAK,QAAQ,EAAG,UAAU,EAC1B,IAAMyC,EAAe,KAAK,IAAI,EAAG,KAAK,MAAM,KAAK,mBAAmB,OAAS,CAAC,CAAC,EAC/ElC,EAAK,mCAAmC,EAAE,UAAY,GAAGkC,CAAY,IAAIzC,EAAO,MAAM,EAAE,GACxFO,EAAK,gCAAgC,EAAE,UACnC,CAACP,EAAO,uBAAyB,GAAGA,EAAO,sBAAsB,WAAa,GAC9EA,EAAO,oBAAsB,GAAGA,EAAO,mBAAmB,QAAU,EAAE,EAAE,OAAO0C,GAAK,CAAC,CAACA,CAAC,EAAE,KAAK,OAAO,EACzGnC,EAAK,mCAAmC,EAAE,QAAU,IAAM,CACtDL,EAAG,WAAW,cAAcF,EAAO,KAAM,KAAK,mBAAmB,MAAM,EACvEE,EAAG,WAAW,SAASF,EAAO,MAAOyC,CAAY,EACjD,KAAK,QAAQ,EAAG,WAAW,CAC/B,EACAlC,EAAK,gCAAgC,EAAE,QAAU,IAAM,CACnDL,EAAG,WAAW,cAAcF,EAAO,KAAM,KAAK,mBAAmB,MAAM,EACvEE,EAAG,WAAW,SAASyC,EAAQ3C,EAAO,sBAAsB,EAC5DE,EAAG,WAAW,SAAS0C,EAAM5C,EAAO,mBAAmB,EACvD,KAAK,QAAQ,EAAG,WAAW,CAC/B,EAEA,IAAM6C,EAAa,KAAK,mBAAmB,MAAML,GAAOA,EAAI,OAAS,KAAK,mBAAmB,CAAC,EAAE,OAASA,EAAI,MAAQ,KAAK,mBAAmB,CAAC,EAAE,IAAI,GAAK,KAAK,mBAAmB,CAAC,EAAE,OAAS,KAAK,mBAAmB,OACrNjC,EAAK,yCAAyC,EAAE,MAAM,QAAUsC,EAAa,GAAK,OAClFtC,EAAK,yCAAyC,EAAE,UAAYP,EAAO,yBAAyB,GAC5F,KAAK,qBAAqB,4CAA6C,KAAK,6BAA6B,CAC7G,SAAWuC,EAAqB,OAAQ,CACpC,KAAK,QAAQ,EAAG,YAAY,EAC5B,IAAMO,EAAWP,EAAqB,IAAIC,GAAOA,EAAI,EAAE,EACjDO,EAAY,CAAC,GAAG,IAAI,IAAID,CAAQ,CAAC,EACvCvC,EAAK,+BAA+B,EAAE,UAAYwC,EAAU,KAAK,IAAI,CACzE,MAAW7C,EAAG,WAAW,UAAY,GAA2BA,EAAG,WAAW,eAAe8C,EAAS,EAAE,GAAK,EACzG,KAAK,QAAQ,EAAG,SAAS,GAEzB,KAAK,QAAQ,EAAG,OAAO,EACvB,KAAK,iCAAmC9C,EAAG,WAAW,UAAY,EAC9D,KAAK,iCACL,KAAK,0BAA4B,EAIjC,KAAK,0BAA4B,KAAK,IAAI,EAAG,KAAK,MAAMA,EAAG,WAAW,UAAY,CAAgB,CAAC,EAAI,EAE3GK,EAAK,yBAAyB,EAAE,UAAY,KAAK,0BAA0B,SAAS,EACpFA,EAAK,0BAA0B,EAAE,UAAYP,EAAO,oBACpDO,EAAK,gCAAgC,EAAE,MAAM,QAAU,KAAK,iCAAmC,GAAK,OACpGA,EAAK,kCAAkC,EAAE,MAAM,QAAU,KAAK,iCAAmC,OAAS,GAC1GA,EAAK,8BAA8B,EAAE,QAAU,IAAM,CACjDL,EAAG,WAAW,cAAcF,EAAO,KAAMA,EAAO,oBAAqB,KAAK,yBAAyB,EACnG,KAAK,QAAQ,EAAG,SAAS,CAC7B,EACA,KAAK,qBAAqB,wCAAyC,KAAK,iCAAiC,GAGxGA,EAAO,MAGR,KAAK,QAAQ,EAAG,OAAO,EACvBO,EAAK,yBAAyB,EAAE,UAAY,IAAqB,SAAS,EAC1EA,EAAK,4BAA4B,EAAE,UAAYP,EAAO,KAAK,GAC3DO,EAAK,+BAA+B,EAAE,MAAM,QAAWL,EAAG,WAAW,WAAWF,EAAO,KAAK,EAAE,GAAK,GAAwB,GAAK,OAChIO,EAAK,sCAAsC,EAAE,UAAYP,EAAO,sBAAsB,GACtF,KAAK,qBAAqB,yCAA0C,KAAK,kBAAkB,GAP3F,KAAK,QAAQ,EAAG,MAAM,CAS9B,CACA,kCAAkC8B,EAAW,EAAG,CAC5C,IAAM9B,EAASE,EAAG,WAAW,SACxBF,IACLE,EAAG,WAAW,cAAc,EAC5BA,EAAG,WAAW,aAAa,IAAI8C,EAAYlB,CAAC,EAC5C5B,EAAG,WAAW,eAAe,EAC7BA,EAAG,WAAW,gBAAgB,EAC9BA,EAAG,WAAW,WAAW,EACzBA,EAAG,WAAW,cAAcF,EAAO,KAAMA,EAAO,oBAAqB,EAAE,yBAAyB,EAChGE,EAAG,OAAO,SAAS,EACnB,EAAE,QAAQ,EAAG,SAAS,EAC1B,CACA,8BAA8B4B,EAAW,EAAG,CACxC,IAAM9B,EAASE,EAAG,WAAW,SAC7B,GAAI,CAACF,EAAQ,OACbE,EAAG,WAAW,cAAc,EAC5BA,EAAG,WAAW,aAAa,IAAKF,EAAO,yBAAqE8B,CAAC,EAC7G5B,EAAG,WAAW,eAAe,EAC7BA,EAAG,WAAW,gBAAgB,EAC9BA,EAAG,WAAW,WAAW,EACzBA,EAAG,WAAW,cAAcF,EAAO,KAAM,EAAE,mBAAmB,MAAM,EACpEE,EAAG,OAAO,SAAS,EACnB,EAAE,QAAQ,EAAG,WAAW,EACxB,IAAM+C,EAAwB,OAAO,OAAOC,CAAK,EAAE,OAAOC,CAAqB,EAC/EnD,EAAO,sBAAwBoD,EAAWH,CAAqB,CACnE,CACA,mBAAmBnB,EAAW,EAAG,CAC7B,IAAM9B,EAASE,EAAG,WAAW,SAC7B,GAAI,CAACF,GAAQ,KAAM,OACnBE,EAAG,WAAW,cAAc,EAC5BA,EAAG,WAAW,aAAa,IAAKF,EAAO,sBAAkE8B,CAAC,EAC1G5B,EAAG,WAAW,eAAe,EAC7BA,EAAG,WAAW,gBAAgB,EAC9BA,EAAG,WAAW,WAAW,EACzBA,EAAG,WAAW,SAASF,EAAO,KAAM,EAAoB,EACxDE,EAAG,OAAO,SAAS,EACnB,EAAE,QAAQ,EAAG,WAAW,EACxB,IAAM+C,EAAwB,OAAO,OAAOC,CAAK,EAAE,OAAOC,CAAqB,EAC/EnD,EAAO,sBAAwBoD,EAAWH,CAAqB,CACnE,CACJ,EACA3B,EAAQO,GAAiB,iBAAiB,ECjanC,IAAIwB,EAAW,EACtB,SAASC,IAAe,CACpB,OAAAD,IACIA,GAAYE,GAAW,SAAQF,EAAW,GACvC,CAAE,MAASE,GAAWF,CAAQ,EAAG,KAAQG,GAAUH,CAAQ,CAAE,CACxE,CAEO,SAASI,GAAYC,EAAW,CAAEL,EAAWK,CAAE,CA6B/C,IAAMC,EAAN,MAAMC,CAAK,CACd,KACA,MACA,OACA,QAAmB,GACnB,KAAgC,CAAC,EACjC,QAAyB,CAAC,EAC1B,eACA,WACA,UACA,EAEA,aAAwB,GACxB,aAAwB,GACxB,QACA,QAEA,EACA,EACA,UACA,SACA,SACA,OAEA,eAA0B,GAClB,oBAA+B,GACvC,iBACA,cACA,cACA,iBAEA,IAAI,oBAAqB,CAAE,OAAO,KAAK,mBAAoB,CAE3D,sBAAsBC,EAAgB,CAC7BA,IAAOA,EAAQC,EAAG,KAAK,OAC5B,KAAK,oBAAsB,CAAC,CAACD,EAAM,KAAKE,GAAQA,EAAK,gBAAkBA,EAAK,kBAAoB,IAAI,CACxG,CAEA,cAAcC,EAAaC,EAAgB,GAAM,CAC7C,GAAI,KAAK,eAIL,GADAC,EAAO,KAAK,4BAA4BC,GAAc,CAAC,KAAK,iBAAiB,cAAc,EACvFH,GAAO,KAAK,iBAAkB,CAM9B,GAHAE,EAAO,KAAK,iBAAiB,OAASF,CAAG,EAEzC,KAAK,iBAAiB,cAAc,KAAK,gBAAgB,EACrD,KAAK,iBAAiB,WAAW,CAAE,EAAK,KAAK,cAAe,EAAK,KAAK,aAAc,CAAC,EAAI,IAAM,CAC/F,QAAQ,KAAK,GAAG,KAAK,iBAAiB,IAAI,uBAAuB,KAAK,IAAI,UAAW,KAAK,WAAW,KAAK,gBAAgB,CAAC,EAC3HE,EAAO,KAAK,4BAA4BC,CAAU,EAClD,KAAK,eAAiB,GACtB,KAAK,iBAAiB,sBAAsB,EAC5C,KAAK,SAAWH,EAChB,KAAK,UAAU,EAAI,KAAK,EACxB,KAAK,UAAU,EAAI,KAAK,EACxB,MACJ,CAGA,KAAK,eAAiB,GACtB,KAAK,iBAAiB,sBAAsB,EAC5C,KAAK,SAAWA,EAChB,KAAK,UAAU,EAAI,KAAK,EAAI,KAAK,iBAAiB,EAClD,KAAK,UAAU,EAAI,KAAK,EAAI,KAAK,iBAAiB,EAE9C,gBAAgBG,GAChBL,EAAG,SAAS,KAAK,gBAAgB,EACjCM,EAAU,OAAQ,kBAAmB,KAAK,gBAAgB,EAC1DC,EAAK,sCAAsC,EAAE,QAAU,IAAM,CAAEP,EAAG,UAAU,CAAG,GAE1E,KAAK,4BAA4BK,IACtCL,EAAG,SAAS,IAAI,EAChBM,EAAU,OAAQ,2BAA4B,IAAI,EAClDC,EAAK,+CAA+C,EAAE,QAAU,IAAM,CAAEP,EAAG,UAAU,CAAG,EAEhG,KAAO,CACH,IAAMQ,GAAkBN,EAAM,KAAK,WAAa,KAAK,iBAAmB,KAAK,UAC7E,KAAK,EAAI,KAAK,UAAU,GAAK,KAAK,cAAgB,KAAK,UAAU,GAAKM,EACtE,KAAK,EAAI,KAAK,UAAU,GAAK,KAAK,cAAgB,KAAK,UAAU,GAAKA,CAC1E,KACG,CACH,KAAON,GAAO,KAAK,QAAUC,GACzBC,EAAO,CAAC,KAAK,cAAc,EAC3BA,EAAO,CAAC,KAAK,kBAAkB,EAC/B,KAAK,SAAS,SAAS,KAAM,KAAK,MAAM,EAE5C,IAAMI,GAAkBN,EAAM,KAAK,WAAa,KAAK,OAAS,KAAK,UACnE,KAAK,EAAI,KAAK,UAAU,GAAK,KAAK,SAAS,EAAI,KAAK,UAAU,GAAKM,EACnE,KAAK,EAAI,KAAK,UAAU,GAAK,KAAK,SAAS,EAAI,KAAK,UAAU,GAAKA,CACvE,CACJ,CAEA,kBAAkBT,EAAeG,EAAa,CAC1C,GAAI,KAAK,gBAAkB,KAAK,mBAAoB,OAEpD,IAAMO,EAAqBC,EAAQX,EAAM,OAAOY,GAAKA,GAAK,MAAQ,CAACA,EAAE,gBAAkB,CAACA,EAAE,oBAAsB,KAAK,MAAM,KAAK,EAAIA,EAAE,EAAG,KAAK,EAAIA,EAAE,CAAC,EAAI,GAAKA,EAAE,OAAO,CAAE,EAAK,KAAK,EAAG,EAAK,KAAK,CAAE,EAAG,KAAK,eAAeC,EAAM,EAAE,CAAC,CAAC,CAAC,EACpO,QAASX,KAAQQ,EAAoB,CAEjC,IAAII,GAAMZ,EAAK,SAAS,EAAIA,EAAK,UAAU,IAAMA,EAAK,OAASA,EAAK,UAChEa,GAAMb,EAAK,SAAS,EAAIA,EAAK,UAAU,IAAMA,EAAK,OAASA,EAAK,UAChEc,EAAOC,GAAqB,KAAMf,EAAM,CAAE,EAAKY,EAAI,EAAKC,CAAG,EAAG,EAAI,GAAeZ,CAAG,EACxF,GAAI,EAAAa,EAAOd,EAAK,OAAS,GACzB,MAAK,iBAAiBA,EAAMY,EAAIC,EAAIC,EAAMb,CAAG,EAC7C,MACJ,CACJ,CAEA,iBAAiBD,EAAYY,EAAYC,EAAYC,EAAcb,EAAa,CAE5E,KAAK,eAAiB,GACtB,KAAK,iBAAmBD,EACxB,KAAK,SAAWA,EAAK,SACrB,KAAK,OAASA,EAAK,OACnB,KAAK,SAAWC,EAChB,KAAK,UAAY,CAAE,EAAK,KAAK,EAAG,EAAK,KAAK,CAAE,EAC5C,KAAK,cAAgBD,EAAK,EAAIY,GAAME,EAAOb,GAC3C,KAAK,cAAgBD,EAAK,EAAIa,GAAMC,EAAOb,GAC3C,KAAK,iBAAmBa,EACxBd,EAAK,sBAAsB,CAC/B,CAEA,WAAWgB,EAAU,CACjB,OAAO,KAAK,MAAM,KAAK,EAAIA,EAAE,EAAG,KAAK,EAAIA,EAAE,CAAC,CAChD,CAEA,SAASC,EAAkBC,EAAkB,CACzC,KAAK,UAAYC,GAAQ,IAAI,EAC7B,KAAK,SAAWF,EAChB,KAAK,SAAWC,EAEhB,IAAME,EADO,KAAK,WAAWH,CAAQ,EACd,GACvB,KAAK,OAASC,EAAWE,EACzB,KAAK,cAAc,KAAK,QAAQ,CAEpC,CAEA,iBAAkB,CACd,KAAK,eAAiB,CAAC,EACvB,IAAMC,EAAI,OAAO,OAAOC,CAAK,EAAE,OAAOC,EAAe,EAAE,QACnDC,GAAQ,KAAK,eAAeA,EAAK,EAAE,EAAI,CAAC,EACtCC,EAAa,KAAK,KAAK,KAAK,EAClC,QAASC,KAAaD,EAClB,KAAK,eAAeC,EAAU,QAAQ,GAE9C,CAEA,YAAa,CACT,IAAMC,EAAe,KAAK,KAAK,KAAK,EAAE,OAAOC,CAAU,EACvD,KAAK,UAAY,EACjB,KAAK,WAAa,CAAC,EACnB,OAAO,OAAON,CAAK,EAAE,OAAOO,CAAW,EAAE,QACrCL,GAAQ,KAAK,WAAWA,EAAK,EAAE,EAAI,CAAC,EACxC,QAASM,KAAYH,EAAc,CAC/B,KAAK,WAAa,EAAmBG,EAAS,MAAM,OACpD,QAASC,KAASD,EAAS,MACvB,KAAK,WAAWC,EAAM,QAAQ,GAGtC,CACJ,CAEA,aAAaL,EAAsBM,EAAa,CAC5CN,EAAU,KAAO,KAEbM,EAAM,IACN,KAAK,KAAK,QAAQ,CAAC,CAAC,EACpB,KAAK,KAAK,KAAK,CAAC,CAAC,EACjB,KAAK,QAAQ,QAAQ,CAAC,EACtB,KAAK,QAAQ,KAAK,CAAC,EACnBA,EAAM,GAENA,GAAO,KAAK,KAAK,SACjB,KAAK,KAAK,QAAQ,CAAC,CAAC,EACpB,KAAK,KAAK,KAAK,CAAC,CAAC,EACjB,KAAK,QAAQ,QAAQ,CAAC,EACtB,KAAK,QAAQ,KAAK,CAAC,EACnBA,EAAM,KAAK,KAAK,OAAS,GAE7B,KAAK,KAAKA,CAAG,EAAE,KAAKN,CAAS,CACjC,CAEA,SAASO,EAAoBC,EAAgB,CAEzC,GAAIA,EAAS,KAAK,WAAWD,EAAK,EAAE,EAAG,MAAO,GAC9C,KAAK,WAAWA,EAAK,EAAE,GAAKC,EAC5B,KAAK,WAAaA,EAClB,IAAMP,EAAe,KAAK,KAAK,KAAK,EAAE,OAAOC,CAAU,EAAE,OAAOE,GAAYA,EAAS,MAAM,MAAM,EAEjG,QAASA,KAAYH,EAIjB,GADAG,EAAS,MAAQA,EAAS,MAAM,OAAOC,GAAS,EAAEA,aAAiBE,GAAQC,KAAW,EAAE,EACpFA,GAAU,EAAG,MAAO,EAEhC,CAEA,cAAcC,EAAYD,EAAgB,CAEtC,GAAIA,EAAS,KAAK,WAAWE,EAAW,EAAE,EAAG,MAAO,GACpD,KAAK,WAAWA,EAAW,EAAE,GAAKF,EAClC,KAAK,WAAaA,EAClB,IAAMP,EAAe,KAAK,KAAK,KAAK,EAAE,OAAOC,CAAU,EAAE,OAAOE,GAAYA,EAAS,MAAM,MAAM,EAEjG,QAASA,KAAYH,EAIjB,GADAG,EAAS,MAAQA,EAAS,MAAM,OAAOC,GAAS,EAAEA,aAAiBK,GAAcL,EAAM,IAAMI,GAAMD,KAAW,EAAE,EAC5GA,GAAU,EAAG,MAAO,EAEhC,CAEA,SAASD,EAAoBC,EAAgB,CACzC,GAAIA,EAAS,KAAK,UAAW,MAAO,GACpC,KAAK,WAAWD,EAAK,EAAE,GAAKC,EAC5B,KAAK,WAAaA,EAClB,IAAMP,EAAe,KAAK,KAAK,KAAK,EAAE,OAAOC,CAAU,EAAE,OAAOE,GAAYA,EAAS,MAAM,OAAS,CAAgB,EAEpH,QAASA,KAAYH,EAAc,CAC/B,KAAOO,EAAS,GAAKJ,EAAS,MAAM,OAAS,GACzCA,EAAS,MAAM,KAAK,IAAKG,CAAqC,EAC9DC,IAEJ,GAAIA,GAAU,EAAG,MAAO,EAC5B,CACJ,CAEA,cAAcG,EAAcF,EAAYG,EAAe,CACnD,GAAIA,EAAQ,KAAK,UAAW,MAAO,GACnC,KAAK,WAAWF,EAAW,EAAE,GAAKE,EAClC,KAAK,WAAaA,EAClB,IAAMX,EAAe,KAAK,KAAK,KAAK,EAAE,OAAOC,CAAU,EAAE,OAAOE,GAAYA,EAAS,MAAM,OAAS,CAAgB,EAEhHI,EAASI,EACb,QAASR,KAAYH,EAAc,CAC/B,KAAOO,EAAS,GAAKJ,EAAS,MAAM,OAAS,GAAkB,CAC3D,IAAIS,EAAM,IAAIH,EACdG,EAAI,KAAOF,EACXE,EAAI,GAAKJ,EACTI,EAAI,MAAQD,EACZR,EAAS,MAAM,KAAKS,CAAG,EACvBL,GACJ,CACA,GAAIA,GAAU,EAAG,MAAO,EAC5B,CACJ,CAEA,OAAOM,EAAYC,EAAkB,CACjC,IAAMC,EAAO,KAAK,WAAWF,CAAG,EAChC,MAAO,EACX,CAEA,QAAmB,CACf,MAAO,CACH,EAAK,KAAK,QACV,EAAK,KAAK,KACV,EAAK,KAAK,MACV,EAAK,KAAK,QACV,EAAK,KAAK,KAAK,IAAIR,GAAOA,EAAI,IAAIN,GAAaA,EAAU,OAAO,CAAC,CAAC,EAClE,IAAO,KAAK,WAAW,EACvB,IAAO,KAAK,WAAW,EACvB,IAAO,KAAK,SACZ,IAAO,KAAK,UAAU,EACtB,IAAO,KAAK,OACZ,GAAM,KAAK,eACX,GAAM,KAAK,kBAAkB,EAC7B,GAAM,KAAK,cACX,GAAM,KAAK,cACX,GAAM,KAAK,gBACf,CACJ,CAEA,OAAO,SAASiB,EAAgBC,EAAa5C,EAAa,CACjDA,IAAMA,EAAO,IAAIH,GACtBG,EAAK,QAAU2C,EAAK,EACpB3C,EAAK,KAAO2C,EAAK,EACjB3C,EAAK,MAAQ2C,EAAK,EAClB3C,EAAK,OAAS,IAAM6C,GAAWF,EAAK,EAAE,OAAO,CAAC,CAAC,EAC/C3C,EAAK,QAAU2C,EAAK,EACpB3C,EAAK,KAAO,CAAC,EACb,QAASgC,EAAM,EAAGA,EAAMW,EAAK,EAAE,OAAQX,IAAO,CAC1ChC,EAAK,KAAKgC,CAAG,EAAI,CAAC,EAClB,QAASc,EAAI,EAAGA,EAAIH,EAAK,EAAEX,CAAG,EAAE,OAAQc,IACpC9C,EAAK,aAAa+C,GAASJ,EAAK,EAAEX,CAAG,EAAEc,CAAC,CAAC,EAAgBd,CAAG,CAEpE,CACA,OAAAhC,EAAK,UAAY,CAAE,EAAK2C,EAAK,IAAK,EAAKA,EAAK,GAAI,EAChD3C,EAAK,SAAW2C,EAAK,IACrB3C,EAAK,OAAS2C,EAAK,IACfC,IAAM5C,EAAK,SAAW4C,EAAK,QAAQD,EAAK,GAAG,GAC3CA,EAAK,KACL3C,EAAK,eAAiB2C,EAAK,GAC3B3C,EAAK,cAAgB2C,EAAK,GAC1B3C,EAAK,cAAgB2C,EAAK,GAC1B3C,EAAK,iBAAmB2C,EAAK,IAGjC3C,EAAK,oBAAoB,EACzBA,EAAK,gBAAgB,EACdA,CACX,CAEA,OAAOgD,EAAkBC,EAAqB,CAC1C,IAAInC,EAAO,GACX,GAAImC,EAAc,CACd,IAAIP,EAAOO,EAAa,WAAW,IAAI,EACnCP,EAAO,MAAMA,EAAO,GACxB5B,EAAO,KAAK,KAAK,KAAK4B,EAAO,EAAa,CAAC,KAC/C,CACA,IAAMQ,EAAS,4CAA4C,KAAK,KAAK,iBAAiB,KAAK,MAAM,YAE3F1B,EAAO,KAAK,QAAU,eAAiB,KAAK,KAAK,OAAS,EAAI,aAAe,GACnF,MAAO,GAAG0B,CAAM,IAAI1B,CAAI,GAAGwB,EAAU,QAAU,EAAE,MAAM,KAAK,IAAI,OAAOlC,CAAI,EAK/E,CAGA,IAAI,UAAW,CACX,GAAI,KAAK,QAEL,MAAO,CACH,GAAM,EACN,GAAM,EACN,GAAM,EACN,GAAM,EACN,EAAK,EACL,EAAK,CACT,EACG,CACH,IAAIqC,EAAU,EACVC,EAAU,EACd,QAAS,EAAI,EAAG,EAAI,KAAK,KAAK,OAAQ,IAClCD,EAAU,KAAK,IAAIA,EAAS,KAAK,KAAK,CAAC,EAAE,OAAS,KAAK,QAAQ,CAAC,CAAC,EACjEC,EAAU,KAAK,IAAIA,EAAS,KAAK,QAAQ,CAAC,CAAC,EAE/C,MAAO,CACH,GAAM,EACN,GAAM,KAAK,KAAK,OAAS,EACzB,GAAMD,EACN,GAAMC,EACN,EAAK,KAAK,KAAK,OACf,EAAKD,EAAUC,EAAU,CAC7B,CACJ,CACJ,CACA,QAAQpB,EAAaqB,EAAW,CAC5B,OAAI,KAAK,QAEE,CACH,EAAK,EACL,EAAK,CACT,EAEIA,GAAK,KAAK,QAAQrB,CAAG,EACd,CACH,EAAKA,EACL,EAAK,GAAKqB,EAAI,KAAK,QAAQrB,CAAG,EAClC,EAEO,CACH,EAAKA,EACL,EAAMqB,EAAI,KAAK,QAAQrB,CAAG,CAC9B,CAGZ,CACA,IAAI,SAAgB,CAChB,OAAI,KAAK,QAEE,CACH,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,CACT,EAEO,CACH,EAAK,EACL,EAAK,EACL,EAAK,KAAK,KAAK,OACf,EAAK,CACT,CAER,CACA,kBAAkBsB,EAAc,CAC5B,QAAStB,EAAM,EAAGA,GAAO,KAAK,KAAK,OAAQA,IAAO,CAC9C,IAAI,EAAI,KAAK,KAAKA,CAAG,EAAE,QAAQsB,CAAC,EAChC,GAAI,GAAK,EACL,OAAO,KAAK,KAAK,KAAK,KAAK,OAAS,EAAItB,CAAG,EAAE,CAAC,CAEtD,CACJ,CAEA,OAAO,WAAWuB,EAAcvD,EAAa,CAEzC,IAAMwD,EAAwB,OAAO,OAAOlC,CAAK,EAAE,OAAOmC,CAAqB,EACzEC,EAAgB,OAAO,OAAOpC,CAAK,EAAE,OAAOqC,EAAuB,EACnEC,EAAiBJ,EAAsB,OAAOE,CAAa,EAC3DG,EAAa,OAAO,OAAOvC,CAAK,EAAE,OAAOO,CAAW,EACtD7B,IAAS,SAAWA,EAAO,IAAIH,GACnC,IAAM8C,EAAOpD,GAAa,EACpBuE,EAAQnB,EAAK,MACnB3C,EAAK,KAAO2C,EAAK,KACjB3C,EAAK,MAAQ,IAAM8D,EACnB9D,EAAK,OAAS,IAAM6C,GAAWiB,CAAK,EACpC9D,EAAK,KAAO,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC3BA,EAAK,QAAU,CAAC,EAAG,EAAG,EAAG,CAAC,EAC1B,QAASqD,EAAI,EAAGA,EAAIE,EAAMF,IAAK,CAC3B,IAAIU,EAAgBC,EAAWJ,CAAc,EACzClC,EAAY,IAAIqC,EACpB,GAAIrC,aAAqBuC,EAAU,CAC/B,IAAIC,GAASC,EAAU,EAAG,CAAgB,EAC1C,QAASC,GAAI,EAAGA,GAAIF,GAAQE,KAAK,CAC7B,IAAIC,GAAYL,EAAWH,CAAU,EACrCnC,EAAU,MAAM,KAAK,IAAI2C,EAAW,CACxC,CACJ,CACArE,EAAK,aAAa0B,EAAWyC,EAAU,EAAG,CAAY,CAAC,CAC3D,CACA,QAASd,EAAI,EAAGA,EAAIrD,EAAK,KAAK,OAAQqD,IAClCrD,EAAK,QAAQqD,CAAC,EAAIc,EAAU,EAAGnE,EAAK,KAAKqD,CAAC,EAAE,MAAM,EAEtD,OAAArD,EAAK,eAAe,EACpBA,EAAK,gBAAgB,EACdA,CACX,CAEA,OAAO,SAAU,CACb,IAAMA,EAAO,IAAIH,EACXiE,EAAQE,EAAWxE,EAAU,EACnCQ,EAAK,MAAQ,IAAM8D,EACnB9D,EAAK,OAAS,IAAM6C,GAAWiB,CAAK,EACpC9D,EAAK,KAAO,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EACvB,IAAMyB,EAAahB,EAAQ,CAAC,IAAI6D,GAAsB,IAAI3D,EAAS,IAAI4D,GAAmB,IAAIC,EAAiB,CAAC,EAChH,QAAS9C,KAAaD,EAClBzB,EAAK,aAAa0B,EAAWyC,EAAU,EAAG,CAAC,CAAC,EAChD,OAAAnE,EAAK,QAAU,CACXmE,EAAU,EAAGnE,EAAK,KAAK,CAAC,EAAE,MAAM,EAChCmE,EAAU,EAAGnE,EAAK,KAAK,CAAC,EAAE,MAAM,EAChCmE,EAAU,EAAGnE,EAAK,KAAK,CAAC,EAAE,MAAM,CACpC,EACAA,EAAK,eAAe,EACpBA,EAAK,gBAAgB,EACdA,CACX,CAEA,eAAgB,CAGZ,GAAI,MAAK,QAEF,CACH,IAAMyE,EAAM,KAAK,KAAK,OAAS,EAC/B,QAASpB,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,KAAO,KAAK,KAAKA,CAAC,EAAE,GAAG,EAAE,YAAaqB,GAClC,KAAK,KAAKrB,CAAC,EAAE,IAAI,CAG7B,CACJ,CACA,gBAAiB,CACb,GAAI,MAAK,QAEF,CACH,IAAMoB,EAAM,KAAK,KAAK,OAAS,EAE/B,QAASpB,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,KAAO,KAAK,QAAQA,CAAC,EAAI,KAAK,QAAQoB,EAAMpB,CAAC,GACzC,KAAK,KAAKA,CAAC,EAAE,QAAQ,IAAIqB,CAAS,EAClC,KAAK,QAAQrB,CAAC,IAItB,QAASA,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,KAAO,KAAK,KAAKA,CAAC,EAAE,OAAS,KAAK,KAAKoB,EAAMpB,CAAC,EAAE,QAC5C,KAAK,KAAKA,CAAC,EAAE,KAAK,IAAIqB,CAAS,EAIvC,QAASrB,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,KAAO,KAAK,KAAKA,CAAC,EAAE,CAAC,YAAaqB,GAC3B,KAAK,KAAKD,EAAMpB,CAAC,EAAE,CAAC,YAAaqB,GACpC,KAAK,KAAKrB,CAAC,EAAE,MAAM,EACnB,KAAK,KAAKoB,EAAMpB,CAAC,EAAE,MAAM,EACzB,KAAK,QAAQA,CAAC,IACd,KAAK,QAAQoB,EAAMpB,CAAC,IAI5B,QAASA,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,KAAO,KAAK,KAAKA,CAAC,EAAE,GAAG,EAAE,YAAaqB,GAC/B,KAAK,KAAKD,EAAMpB,CAAC,EAAE,GAAG,EAAE,YAAaqB,GACxC,KAAK,KAAKrB,CAAC,EAAE,IAAI,EACjB,KAAK,KAAKoB,EAAMpB,CAAC,EAAE,IAAI,CAInC,CACA,KAAK,oBAAoB,CAC7B,CAEA,qBAAsB,CAElB,GAAI,MAAK,QAEF,CACH,IAAMoB,EAAM,KAAK,KAAK,OAAS,EAC/B,QAASpB,EAAI,EAAGA,GAAKoB,EAAKpB,IACtB,QAASe,EAAI,EAAGA,GAAK,KAAK,KAAKf,CAAC,EAAE,OAAQe,IAClC,KAAK,KAAKf,CAAC,EAAEe,CAAC,YAAaM,IAC1B,KAAK,KAAKrB,CAAC,EAAEe,CAAC,EAAc,SAAW,KAAK,KAAKK,EAAMpB,CAAC,EAAEe,CAAC,EAAE,SAI9E,CACJ,CACA,IAAI,YAAa,CAIb,GAAI,KAAK,QAEL,MAAO,GACJ,CACH,IAAIO,EAAS,EACb,QAAStB,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAClCsB,EAAS,KAAK,IAAIA,EAAQ,KAAK,KAAKtB,CAAC,EAAE,OAAS,KAAK,QAAQA,CAAC,CAAC,EAEnE,QAASA,EAAI,EAAGA,EAAI,KAAK,KAAK,OAAQA,IAClC,GAAI,KAAK,KAAKA,CAAC,EAAE,OAAS,KAAK,QAAQA,CAAC,GAAKsB,EACzC,OAAOtB,EAEf,MAAO,EACX,CACJ,CACA,IAAI,eAAgB,CAChB,GAAI,KAAK,QAEL,MAAO,GACJ,CACH,IAAMuB,EAAY,KAAK,IAAI,GAAG,KAAK,OAAO,EAC1C,OAAO,KAAK,QAAQ,YAAYA,CAAS,CAC7C,CACJ,CACJ,ECxkBA,IAAMC,GAAe,UAAY,CAChC,IAAMC,EAAY,CAACC,EAAOC,EAAMC,EAAMC,CAAY,EAmBlD,QAjBIC,EAAmB,CACtB,CAAC,KAAM,eAAgB,UAAW,SAAS,EAC3C,CAAC,MAAO,KAAM,UAAW,MAAM,EAC/B,CAAC,QAAS,aAAc,KAAM,SAAS,EACvC,CAAC,SAAU,aAAc,cAAe,IAAI,CAAC,EAE1CC,EAAoB,CACvB,CAAC,QAAS,KAAML,EAAO,OAAQ,MAAM,EAIrC,CAAC,SAAUA,EAAOM,EAAM,OAAQ,QAAQ,EACxC,CAAC,UAAWL,EAAMM,EAAQ,SAAU,QAAQ,EAE5C,CAAC,MAAOA,EAAQD,EAAM,SAAU,QAAQ,CACzC,EAESE,EAAM,EAAGA,EAAM,EAAGA,IAC1B,QAASC,EAAO,EAAGA,EAAO,EAAGA,IACxBD,GAAOC,GACXJ,EAAI,KAAK,CAACD,EAAiBI,CAAG,EAAEC,CAAI,EAAaV,EAAUS,CAAG,EAAGT,EAAUU,CAAI,EAAGV,EAAUS,CAAG,EAAE,MAAOT,EAAUU,CAAI,EAAE,KAAK,CAAC,EAGhI,OAAOJ,CACR,EAAG,EAcUK,GAAN,MAAMC,CAAO,CACnB,EAAW,EACX,EACA,KACA,KACA,KACA,MACA,MACA,SACA,UACA,WACA,KACA,oBACA,yBACA,uBACA,oBACA,sBACA,YAAYC,EAAgB,CAC3B,IAAIC,EAAOf,GAAYc,CAAM,EAC7B,KAAK,KAAOA,EACZ,KAAK,KAAOC,EAAK,CAAC,EAClB,KAAK,KAAOA,EAAK,CAAC,EAClB,KAAK,MAAQA,EAAK,CAAC,EACnB,KAAK,SAAWA,EAAK,CAAC,EACtB,KAAK,UAAYA,EAAK,CAAC,CACxB,CACA,QAAqB,CACpB,MAAO,CACN,EAAK,KAAK,EACV,EAAK,KAAK,EACV,GAAM,KAAK,KACX,EAAK,KAAK,KAAK,OAAO,EACtB,GAAM,KAAK,oBACX,GAAM,KAAK,0BAA0B,GACrC,GAAM,KAAK,uBACX,GAAM,KAAK,oBACX,GAAM,KAAK,uBAAuB,EACnC,CACD,CAEA,OAAO,SAASC,EAAkB,CACjC,IAAMC,EAAS,IAAIJ,EAAOG,EAAK,EAAE,EACjC,OAAAC,EAAO,EAAID,EAAK,EAChBC,EAAO,EAAID,EAAK,EACZA,EAAK,EAAGC,EAAO,KAAOC,EAAK,SAASF,EAAK,CAAC,EACzCC,EAAO,KAAOC,EAAK,QAAQ,EAC5BF,EAAK,KAAIC,EAAO,oBAAsBD,EAAK,IAC3CA,EAAK,KAAIC,EAAO,yBAA2BE,EAAMH,EAAK,EAAE,GACxDA,EAAK,KAAIC,EAAO,uBAAyBD,EAAK,IAC9CA,EAAK,KAAIC,EAAO,oBAAsBD,EAAK,IAC3CA,EAAK,KAAIC,EAAO,sBAAwBE,EAAMH,EAAK,EAAE,GAClDC,CACR,CAEA,OAAOG,EAAoBC,EAAqBC,EAAuB,CACtE,IAAIC,EAAO,GACX,GAAIF,EAAc,CACjB,IAAIG,EAAOH,EAAa,WAAW,IAAI,EACnCG,EAAO,MAAMA,EAAO,GACxBD,EAAO,KAAK,KAAK,KAAKC,EAAO,EAAa,CAAC,KAC5C,CAEA,IAAIjB,EAAM,GADK,8EAA8E,KAAK,QAAQ,KAAK,KAAK,SAAS,aAC1G,OAAO,KAAK,IAAI,OAAOa,EAAY,UAAY,EAAE,GAAGG,CAAI,GAC3E,OAAID,IAAaf,GAAO,OAAO,KAAK,KAAO,UAAU,KAAK,KAAK,EAAE,GAAK,EAAE,IAAI,KAAK,MAAQ,UAAU,KAAK,MAAM,EAAE,GAAK,EAAE,IAChHA,CACR,CAEA,SAASkB,EAAYC,EAAoB,CAExC,IAAMC,EAAO,KAAK,WAAW,MAAM,EACnC,KAAK,WAAW,KAAKA,CAAI,EACzBF,EAAK,SAASE,EAAMD,CAAU,CAC/B,CACA,SAAU,CACT,KAAK,oBAAsBE,EAAW,KAAK,UAAU,EAAE,KACvD,IAAMC,EAAwB,OAAO,OAAOV,CAAK,EAAE,OAAOW,CAAqB,EAC/E,KAAK,sBAAwBF,EAAWC,CAAqB,EAC7D,KAAK,yBAA2BD,EAAWC,CAAqB,EAChE,IAAME,EAAeC,EAAG,WAAW,KAAK,KAAK,EAAE,OAAOC,CAAU,EAC5DC,EAA6B,CAAC,EAClC,QAASC,KAAYJ,EACpBG,EAAeA,EAAa,OAAOC,EAAS,MAAM,OAAOC,EAAY,CAAC,EAEvE,IAAMC,EAAqBH,EAAa,OAAOI,GAAOA,EAAI,KAAO,KAAK,IAAI,EAC1E,GAAID,EAAmB,OAAQ,CAC9B,IAAME,EAAe,KAAK,IAAI,EAAG,KAAK,MAAMF,EAAmB,OAAS,CAAC,CAAC,EAC1E,KAAK,uBAAyBG,EAAU,EAAGD,CAAY,EACvD,KAAK,oBAAsBA,EAAe,KAAK,sBAChD,CACD,CACD,EAEA,SAASE,GAAMC,EAAWC,EAAWC,EAAc,CAClD,IAAIC,EAASD,EAAO,EACpB,OAAOF,EAAIG,EAAS,IAAOH,EAAIG,EAAS,IAAOF,EAAIE,EAAS,IAAOF,EAAIE,EAAS,EACjF,CAEO,SAASC,GAAYF,EAAc,CAEzC,QADIG,EAAkBC,EAAQC,EAAIjD,GAAY,MAAM,CAAC,EAC5CkD,EAAK,EAAGA,EAAK,IAAKA,IAAM,CAOhC,QANIC,EAAM,GACN5C,EAAoB,CAAC,EACrB6C,EAAKJ,EAAQC,EAAIL,CAAI,CAAC,EACtBS,EAAKL,EAAQC,EAAIL,CAAI,CAAC,EAEtBC,EAASD,EAAO,EACXU,EAAI,EAAGA,EAAIV,EAAMU,IACrBb,GAAMW,EAAGE,CAAC,EAAI,GAAKD,EAAGC,CAAC,EAAI,GAAKV,CAAI,IACvCO,EAAM,IAEP5C,EAAI,KAAK,CAAE,EAAK6C,EAAGE,CAAC,EAAI,GAAK,EAAKD,EAAGC,CAAC,EAAI,GAAK,GAAMP,EAAgBO,CAAC,CAAE,CAAC,EAE1E,GAAI,CAACH,EAAK,OAAO5C,CAClB,CACA,eAAQ,MAAM,oBAAoB,EAC3B,CAAC,CACT,CCzJA,IAAIgD,GAAa,CAAC,YAAa,eAAgB,OAAQ,aAAc,QAAS,QAAS,SAAU,iBAAkB,OAAQ,aAAc,QAAS,YAAa,YAAa,aAAc,YAAa,QAAS,iBAAkB,WAAY,UAAW,OAAQ,WAAY,WAAY,YAAa,aAAc,aAAc,aAAc,eAAgB,gBAAiB,aAAc,WAAY,cAAe,UAAW,aAAc,YAAa,cAAe,UAAW,YAAa,aAAc,OAAQ,YAAa,OAAQ,cAAe,OAAQ,WAAY,UAAW,YAAa,QAAS,QAAS,WAAY,gBAAiB,YAAa,eAAgB,YAAa,aAAc,YAAa,uBAAwB,YAAa,aAAc,YAAa,YAAa,cAAe,gBAAiB,eAAgB,iBAAkB,iBAAkB,iBAAkB,cAAe,OAAQ,YAAa,QAAS,UAAW,mBAAoB,aAAc,eAAgB,eAAgB,iBAAkB,kBAAmB,oBAAqB,kBAAmB,kBAAmB,YAAa,YAAa,WAAY,cAAe,UAAW,SAAU,YAAa,SAAU,gBAAiB,YAAa,gBAAiB,gBAAiB,aAAc,YAAa,OAAQ,OAAQ,OAAQ,aAAc,MAAO,YAAa,YAAa,SAAU,aAAc,WAAY,SAAU,SAAU,UAAW,YAAa,YAAa,YAAa,OAAQ,cAAe,YAAa,MAAO,UAAW,SAAU,YAAa,SAAU,QAAS,QAAS,aAAc,SAAU,aAAa,EAEzkD,SAASC,GAAOC,EAAYC,EAAc,CAGzC,QAFIC,EAA+BC,EAAIF,CAAI,EAAE,IAAIG,GAAK,CAAC,CAAC,EACpDC,GAAUJ,EAAO,GAAK,EACjBG,EAAI,KAAK,MAAMC,CAAM,EAAGD,GAAK,KAAK,KAAKC,CAAM,EAAGD,IACxD,QAASE,EAAI,KAAK,MAAMD,CAAM,EAAGC,GAAK,KAAK,KAAKD,CAAM,EAAGC,IACxDJ,EAAKE,EAAI,CAAC,EAAEE,EAAI,CAAC,EAAIN,EAGvB,OAAOE,CACR,CAoBO,IAAMK,EAAN,KAAW,CACjB,MACA,KAGA,OACA,KAEA,KACA,QACA,MAEA,YAAYC,EAAiB,CACvBA,IACJA,EAAO,CACN,EAAGC,EAAWX,EAAU,EACxB,GAAIY,EAAU,EAAG,CAAC,EAElB,EAAG,GACH,GAAI,EAEL,GAID,KAAK,MAAQF,EAAK,EAClB,KAAK,KAAOA,EAAK,GAGjB,KAAK,OAAS,GACd,KAAK,KAAO,KAAK,MACb,KAAK,KAAO,GAAK,IACpB,KAAK,OAAS,GACd,KAAK,KAAO,UAAY,KAAK,MAQ9B,KAAK,KAAOT,GAAO,KAAM,KAAK,IAAI,EAC7BS,EAAK,IAAGA,EAAK,EAAIG,GAAY,KAAK,IAAI,GAC3C,KAAK,QAAUH,EAAK,EAAE,IAAIJ,GAAKQ,GAAO,SAASR,CAAC,CAAC,EACjD,QAASS,EAAI,EAAGA,EAAI,KAAK,QAAQ,OAAQA,IAAK,CAC7C,IAAIC,EAAS,KAAK,QAAQD,CAAC,EAC3BC,EAAO,EAAID,EAEXC,EAAO,WAAaC,EAAQ,KAAK,QAAQ,OAAOC,GAAKA,GAAKF,GAAU,CAAC,KAAK,aAAaE,EAAGF,CAAM,CAAC,CAAC,EAElG,KAAK,KAAK,KAAK,MAAMA,EAAO,CAAC,CAAC,EAAE,KAAK,MAAMA,EAAO,CAAC,CAAC,EAAIA,CACzD,CACA,GAAIN,EAAK,GAAI,CACZ,KAAK,MAAQA,EAAK,GAAG,IAAIS,GACpBA,EAAE,EAAUC,EAAW,SAASD,EAAG,IAAI,EACpCE,EAAK,SAASF,EAAG,IAAI,CAC5B,EACD,QAASJ,EAAI,EAAGA,EAAI,KAAK,MAAM,OAAQA,IACtC,KAAK,MAAMA,CAAC,EAAE,EAAIA,EACd,KAAK,MAAMA,CAAC,EAAE,iBACjB,KAAK,MAAMA,CAAC,EAAE,iBAAmB,KAAK,MAAML,EAAK,GAAGK,CAAC,EAAE,EAAE,EACzD,KAAK,MAAMA,CAAC,EAAE,iBAAiB,sBAAsB,KAAK,KAAK,EAGlE,CAEA,KAAK,UAAU,CAChB,CAYA,aAAaO,EAAWC,EAAoB,CAC3C,GAAIC,GAAeF,EAAGC,EAAG,CAAE,EAAK,KAAK,KAAO,EAAG,EAAK,KAAK,KAAO,CAAE,EAAG,EAAG,EAAG,MAAO,GAClF,QAASP,KAAU,KAAK,QACvB,GAAIA,GAAUM,GAAKN,GAAUO,GAC5BC,GAAeF,EAAGC,EAAGP,EAAQ,EAAW,EAAG,MAAO,GAEpD,MAAO,EACR,CAEA,qBAAqBS,EAAoB,CACpCA,IAAY,SAAWA,EAAU,KAAK,SAC1C,IAAMC,EAAoBD,EAAQ,IAAIT,GAAUA,EAAO,KAAK,EACtDW,EAAgB,OAAO,OAAOC,CAAK,EAAE,OAAOC,CAAW,EAAE,OAAOC,GAAY,CAACJ,EAAkB,SAASI,CAAQ,CAAC,EACjHC,EAAoBN,EAAQ,OAAOT,GAAUA,EAAO,OAAS,IAAI,EAAE,IAAIA,GAAUA,EAAO,KAAK,EACnG,MAAO,CACN,OAAUW,EACV,SAAYI,CACb,CACD,CAEA,WAAY,CACX,IAAMC,EAAK,KAAK,qBAAqB,EACrC,QAAShB,KAAU,KAAK,QACnBA,EAAO,OAAS,KAAMA,EAAO,MAAQ,EAChCgB,EAAG,SAAS,SAAShB,EAAO,IAAI,EAAGA,EAAO,MAAQ,EAClDgB,EAAG,OAAO,SAAShB,EAAO,IAAI,EAAGA,EAAO,MAAQ,EACpDA,EAAO,MAAQ,GAEtB,CAEA,eAAeiB,EAAa,CAC3B,KAAK,MAAQ,CAAC,EACd,QAASlB,EAAI,EAAGA,EAAI,KAAK,QAAQ,OAAQA,IACxC,QAASmB,EAAI,EAAGA,EAAInB,EAAGmB,IAAK,CAC3B,GAAI,KAAK,QAAQnB,CAAC,EAAE,WAAW,QAAQ,KAAK,QAAQmB,CAAC,CAAC,EAAI,EAAG,SAC7D,IAAIf,EAAIE,EAAK,WAAW,EAAE,EAC1BF,EAAE,EAAI,KAAK,QAAQJ,CAAC,EAAE,EACtBI,EAAE,EAAI,KAAK,QAAQJ,CAAC,EAAE,EAEtB,IAAMoB,EADO,KAAK,MAAM,KAAK,QAAQpB,CAAC,EAAE,EAAI,KAAK,QAAQmB,CAAC,EAAE,EAAG,KAAK,QAAQnB,CAAC,EAAE,EAAI,KAAK,QAAQmB,CAAC,EAAE,CAAC,EAC7E,GACvB,KAAK,QAAQnB,CAAC,EAAE,SAASI,EAAGc,EAAME,CAAO,EACzC,KAAK,MAAM,KAAKhB,CAAC,EACjB,KAAK,MAAM,GAAG,EAAE,EAAG,EAAI,KAAK,MAAM,OAAS,CAC5C,CAEF,CAEA,QAAmB,CAClB,MAAO,CACN,EAAG,KAAK,MACR,GAAI,KAAK,KAET,EAAG,KAAK,QAAQ,IAAIb,GAAKA,EAAE,OAAO,CAAC,EAEnC,GAAI,KAAK,MAAM,IAAIA,GAAKA,EAAE,OAAO,CAAC,CACnC,CACD,CACD,EC/KO,IAAM8B,GAAN,MAAMC,CAAU,CACX,OACR,KACA,WACA,SACA,OACA,IAAM,EACN,kBACA,SACQ,WAAa,GACrB,aAAe,EAEf,IAAI,OAAQ,CAAE,OAAO,KAAK,MAAO,CACjC,IAAI,MAAMC,EAAW,CACb,KAAK,QAAUA,IACnB,KAAK,OAASA,EACd,KAAK,UAAYA,GAAS,EAC9B,CAEA,IAAI,WAAY,CAAE,OAAO,KAAK,UAAW,CACzC,IAAI,UAAUA,EAAgB,CAE1B,GAAI,KAAK,YAAcA,EAEvB,GADA,KAAK,WAAaA,EACdA,EAAO,CACP,IAAM,EAAI,KACV,KAAK,kBAAoB,YAAY,IAAI,EACzC,KAAK,aAAe,YAAY,UAAY,CAAE,EAAE,KAAK,CAAE,EAAG,GAAI,CAClE,MACI,cAAc,KAAK,YAAY,CAGvC,CAEA,KAAKC,EAAsB,CACvB,GAAI,CAAC,KAAK,UAAW,MAAO,GAE5B,GADKA,IAAIA,EAAK,YAAY,IAAI,GAC1BA,GAAM,KAAK,kBAAmB,MAAO,GACzC,KAAK,KAAO,KAAK,IAAI,EAAG,KAAK,IAAIA,EAAK,KAAK,kBAAmB,GAAI,CAAC,EAAI,IACvE,KAAK,kBAAoBA,EACzB,IAAMC,EAAU,KAAK,MAAM,KAAK,GAAG,EACnC,QAASC,KAAQ,KAAK,KAAK,MACvBA,EAAK,cAAc,KAAK,GAAG,EAE/B,GAAI,KAAK,UAAYD,EAAS,CAG1B,GAFAE,GAASF,CAAO,EAChB,KAAK,SAAWA,EACZ,KAAK,UAAW,CAChB,IAAIG,EAAa,KAAK,KAAK,KAAK,WAAW,OAAS,KAAK,GAAG,EAE5D,GADAC,EAAU,SAAU,aAAc,KAAK,WAAW,SAAUD,CAAU,EAClE,KAAK,WAAW,eAAgB,CAChC,IAAIA,EAAa,KAAK,KAAK,KAAK,WAAW,iBAAmB,KAAK,GAAG,EACtEC,EAAU,OAAQ,eAAgB,KAAK,WAAW,iBAAkBD,CAAU,CAClF,CACJ,CACA,QAASF,KAAQ,KAAK,KAAK,MACvBA,EAAK,kBAAkB,KAAK,KAAK,MAAO,KAAK,GAAG,CAExD,CACA,MAAO,EACX,CAEA,QAAS,CACLI,EAAO,KAAK,OAAS,CAAW,EAShC,KAAK,MAAQ,EACb,KAAK,UAAY,GAEjB,KAAK,WAAW,SAAW,KAC3B,KAAK,OAAO,OAAO,EACnB,KAAK,SAAW,GAChB,KAAK,KAAK,CACd,CAEA,OAAOC,EAAqBC,EAAkB,CAC1CF,EAAO,KAAK,OAAS,CAAS,EAC9B,KAAK,WAAW,SAAW,KAAK,WAAW,SAC3C,KAAK,WAAW,EAAI,KAAK,WAAW,SAAS,EAC7C,KAAK,WAAW,EAAI,KAAK,WAAW,SAAS,EAE7C,KAAK,MAAQ,EACb,KAAK,UAAY,GACZC,GAAW,KAAK,WAAW,SAAS,QAAQ,EACjD,KAAK,OAAO,OAAO,KAAK,WAAW,SAAS,IAAI,EAChDF,EAAU,SAAU,SAAU,KAAK,WAAW,QAAQ,EACjDG,IAAQ,aAAa,WAAa,KAAK,UAAU,KAAK,OAAO,CAAC,EACvE,CAEA,SAASN,EAAY,CACjBI,EAAO,KAAK,OAAS,CAAS,EAC9B,KAAK,MAAQ,EACb,KAAK,SAAWJ,EAChB,KAAK,UAAY,EACrB,CAEA,WAAY,CACRI,EAAO,KAAK,OAAS,CAAW,EAChCG,EAAG,MAAQ,EACX,KAAK,UAAY,GACjBJ,EAAU,OAAQ,MAAM,EAExB,KAAK,OAAO,eAAe,CAC/B,CAEA,QAAS,CACL,MAAO,CACH,EAAK,EACL,EAAK,KAAK,KAAK,OAAO,EACtB,EAAK,KAAK,IACV,GAAMK,CACV,CACJ,CAEA,OAAO,SAASC,EAAsB,CAClC,GAAIA,GAAG,GAAK,EAAG,MAAO,GACtB,IAAMF,EAAK,IAAIX,EACfW,EAAG,KAAO,IAAIG,EAAKD,EAAE,CAAC,EACtB,IAAME,EAAcJ,EAAG,KAAK,MAAM,OAAOK,EAAY,EACrD,OAAID,EAAY,QAAU,EAAU,IACpCJ,EAAG,WAAaI,EAAY,CAAC,EAC7BJ,EAAG,IAAME,EAAE,EACXI,GAAYJ,EAAE,IAAM,CAAC,EACdF,EACX,CACJ,EAEO,SAASO,GAAOC,EAAM,CACzB,IAAMC,EAAMrB,GAAU,SAASoB,CAAI,EACnC,OAAIC,GACAT,EAAKS,EACE,IAEJ,EACX,CAEO,SAASC,IAAQ,CAChBV,IAAIA,EAAG,UAAY,IACvBA,EAAK,IAAIZ,EACb,CAEO,IAAIY,ECpJJ,IAAMW,EAAN,MAAMC,UAAmBC,CAAK,CAEjC,SACA,WAEA,cAAcC,EAAaC,EAAuB,GAAM,CAEpD,OAAQC,EAAG,MAAO,CACd,OACQF,GAAO,KAAK,QAAUC,EACtBC,EAAG,OAAO,EAET,MAAM,cAAcF,EAAK,EAAK,EACnC,MACJ,OACIG,EAAO,KAAK,QAAQ,EACpB,KAAK,EAAI,KAAK,SAAS,EACvB,KAAK,EAAI,KAAK,SAAS,EACvB,MACJ,OACIA,EAAO,CAACD,EAAG,SAAS,EACpB,MAAM,cAAcF,EAAK,EAAK,EAC9B,KACR,CACJ,CAEA,mBAAoB,CAAE,CAEtB,OAAO,WAAWI,EAA0B,CACxC,IAAIC,EAAO,IAAIP,EACf,OAAAC,EAAK,WAAWK,EAAMC,CAAI,EAC1BA,EAAK,KAAO,YACLA,CACX,CAEA,QAAmB,CACf,IAAMC,EAAO,MAAM,OAAO,EAC1B,OAAAA,EAAK,EAAI,GACL,KAAK,UAAY,OAAMA,EAAK,GAAK,KAAK,SAAS,GAC5CA,CACX,CAEA,OAAO,SAASA,EAAgBC,EAAY,CACxC,IAAIF,EAAO,IAAIP,EACf,OAAAC,EAAK,SAASO,EAAMC,EAAMF,CAAI,EACvBA,CACX,CACJ,EAEO,SAASG,GAAaH,EAAgC,CAAE,OAAOA,aAAgBR,CAAW,CC9B1F,IAAMY,GAAN,KAAa,CAChB,EACA,EACA,IACA,IACA,MACA,OACA,IACA,QAEA,YACA,aACA,cAAgB,GAChB,OACA,WAEA,OAAOC,EAAcC,EAAc,CAC/B,KAAK,IAAM,CAAC,EACZ,QAASC,EAAI,EAAGA,GAAKF,EAAME,IAAK,CAC5B,KAAK,IAAIA,CAAC,EAAI,CAAC,EACf,QAASC,EAAI,EAAGA,GAAKF,EAAME,IACvB,KAAK,IAAID,CAAC,EAAEC,CAAC,EAAI,CAAC,CAE1B,CACJ,CAEA,gBAAiB,CACb,KAAK,QAAQ,KAAK,IAAI,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,SAAS,CACnD,CAEA,IAAIC,EAAc,CAEd,MADI,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,QAC1B,CAAC,KAAK,IAAI,KAAK,EAAIA,CAAI,EAAE,KAAK,CAAC,EAAE,UAAkB,IACvD,KAAK,GAAKA,EACV,KAAK,WAAW,EAChB,KAAK,eAAe,EACb,GACX,CACA,IAAIA,EAAcC,EAAgB,CAE9B,MADI,CAACA,GAAQ,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,QACnC,CAAC,KAAK,IAAI,KAAK,CAAC,EAAE,KAAK,EAAID,CAAI,EAAE,UAAkB,IACvD,KAAK,GAAKA,EACV,KAAK,WAAW,EAChB,KAAK,eAAe,EACb,GACX,CAEA,MAAO,CAAE,KAAK,IAAI,EAAE,EAAG,KAAK,MAAM,MAAM,UAAY,gBAAiB,CACrE,KAAKC,EAAgB,CAAE,KAAK,IAAI,EAAGA,CAAI,EAAG,KAAK,MAAM,MAAM,UAAY,cAAe,CACtF,MAAO,CAAE,KAAK,IAAI,EAAE,EAAG,KAAK,MAAM,MAAM,UAAY,eAAgB,CACpE,MAAO,CAAE,KAAK,IAAI,CAAC,EAAG,KAAK,MAAM,MAAM,UAAY,gBAAiB,CAEpE,OAAOH,EAAWC,EAAWG,EAAc,GAAM,CAC7C,KAAK,EAAIJ,EACT,KAAK,EAAIC,EACT,KAAK,WAAW,EAAI,EAChBG,GAAa,KAAK,eAAe,CACzC,CAEA,WAAWC,EAAgB,CACnBA,GACA,KAAK,OAAO,UAAU,IAAI,cAAc,EAE5C,IAAIC,GAAoB,KAAK,EAAI,IAAOC,EAEpCC,EADgB,KAAK,IAAI,YAAc,EACNF,EACrC,KAAK,OAAO,MAAM,KAAOE,EAAiB,KAE1C,IAAIC,GAAoB,KAAK,EAAI,IAAOF,EAEpCG,EADgB,KAAK,IAAI,aAAe,EACPD,EACrC,KAAK,OAAO,MAAM,IAAMC,EAAiB,KACrCL,IACA,KAAK,OAAO,aACZ,KAAK,OAAO,UAAU,OAAO,cAAc,EAEnD,CAEA,YAAYM,EAASC,EAAS,CAC1B,IAAMC,EAAOF,EAAE,SACTG,EAAOF,EAAE,SACTG,EAASJ,EAAE,cACXK,EAASJ,EAAE,WACXK,EAAY,KAAK,IAAIF,EAAQC,CAAM,EAAI,EACvCE,EAAYL,EAAK,EAAI,EACrBM,EAAQF,EAAY,KAAK,IAAIJ,EAAK,EAAIE,EAAQD,EAAK,EAAIE,CAAM,EAC7DI,EAAQF,EAAYJ,EAAK,EAAI,EACnC,KAAK,OAASF,EACd,KAAK,WAAaD,EAClB,KAAK,cAAgB,GACrB,KAAK,aAAe,CAChB,IAAOM,EAAYF,EAASF,EAAK,GACjC,IAAOA,EAAK,GAAK,EACjB,UAAaI,EACb,UAAaC,EACb,IAAOD,EAAYD,EAASF,EAAK,GACjC,IAAOI,EAAYJ,EAAK,GAAK,EAC7B,MAASK,EACT,MAASC,CACb,CACJ,CAEA,aAAaT,EAASC,EAAS,CAC3B,KAAK,YAAYD,EAAGC,CAAC,EACrB,IAAMS,EAAI,KAAK,aAEf,KAAK,OAAOA,EAAE,MAAOA,EAAE,KAAK,EAC5B,KAAK,IAAI,OAAO,MAAQd,GAAiBc,EAAE,MAAQ,GACnD,KAAK,IAAI,OAAO,OAASd,GAAiBc,EAAE,MAAQ,GAEpDC,GAAS,KAAK,IAAKD,EAAE,IAAKA,EAAE,IAAKV,EAAG,KAAK,GAAG,EAC5CW,GAAS,KAAK,IAAKD,EAAE,IAAKA,EAAE,IAAKT,EAAG,KAAK,GAAG,EAC5CW,GAAY,KAAK,IAAKF,EAAE,UAAWA,EAAE,UAAWV,EAAGC,EAAG,KAAK,GAAG,CAClE,CAEA,YAAa,CACT,KAAK,cAAgB,GACrB,IAAMY,EAAK,KAAK,YAAc,KAAK,OAAO,SAC1C,KAAK,OAAOA,EAAG,EAAI,EAAGA,EAAG,EAAI,CAAC,EAC9B,KAAK,IAAI,OAAO,MAAQjB,GAAiBiB,EAAG,EAAI,GAChD,KAAK,IAAI,OAAO,OAASjB,GAAiBiB,EAAG,EAAI,GACjDF,GAAS,KAAK,IAAKE,EAAG,GAAK,EAAGA,EAAG,GAAK,EAAG,KAAK,OAAQ,KAAK,GAAG,CAClE,CAEA,QAAS,CACL,GAAI,CAAC,KAAK,cAAe,MAAO,GAChC,IAAIC,EAAoB,GASxB,GARI,KAAK,GAAK,KAAK,aAAa,YAG5B,KAAK,IACLA,EAAoB,IAExB,KAAK,WAAW,aAAgB,KAAK,EAAI,KAAK,aAAa,UAC3D,KAAK,OAAO,aAAgB,KAAK,EAAI,KAAK,aAAa,UACnD,OAAK,EAAI,KAAK,aAAa,WAGxB,CAEH,IAAMC,EAAW,KAAK,OAAO,QAAU,KAAK,EAAI,KAAK,aAAa,IAC5DC,EAAW,KAAK,OAAO,QAAU,KAAK,EAAI,KAAK,aAAa,IAClE,KAAK,WAAW,EACZF,GACA,KAAK,OAAO,KAAK,YAAY,GAAK,EAAIC,EAAU,KAAK,YAAY,GAAKC,EAAU,EAAK,EACrF,KAAK,KAAK,EAAI,GAEd,KAAK,OAAO,KAAK,YAAY,GAAK,EAAID,EAAU,KAAK,YAAY,GAAK,EAAIC,EAAU,EAAK,CAEjG,CACJ,CAEA,OAAOC,EAAiB,CACpB,GAAI,KAAK,cAAe,MAAO,GAE/B,IAAMF,EAAW,KAAK,EAAI,EAAI,KAAK,YAAY,GACzCC,EAAW,KAAK,EAAI,EAAI,KAAK,YAAY,GAC/C,KAAK,aAAaC,EAAW,KAAK,MAAM,EACxC,KAAK,OAAO,KAAK,aAAa,IAAMF,EAAU,KAAK,aAAa,IAAMC,CAAQ,CAClF,CAEA,UAAW,CACP,GAAI,CAAC,KAAK,cAAe,MAAO,GAChC,GAAI,KAAK,GAAK,KAAK,aAAa,UAE5B,OAEJ,IAAMD,EAAW,KAAK,WAAW,QAAU,KAAK,EAAI,KAAK,aAAa,IAChEC,EAAW,KAAK,WAAW,QAAU,KAAK,EAAI,KAAK,aAAa,IACtE,KAAK,aAAa,KAAK,WAAY,KAAK,MAAM,EAC9C,KAAK,OAAO,KAAK,aAAa,IAAMD,EAAU,KAAK,aAAa,IAAMC,CAAQ,CAClF,CACJ,GC3LI,SAAS,UAAY,aAAe,SAAS,UAAY,cACzD,IAAI,YAAY,UAAU,EAAE,iBAAiB,SAAU,IAAM,SAAS,OAAO,CAAC,EAsBlF,IAAME,GAAc,CAAE,EAAK,GAAO,EAAK,YAAa,EAAK,UAAW,EAAK,CAAC,EAAG,CAAC,EAAG,EAAK,CAAC,CAAC,CAAE,EAAK,WAAY,EAAK,CAAC,CAAE,EAAK,OAAQ,EAAG,CAAE,EAAK,MAAO,EAAG,CAAE,EAAK,MAAO,EAAG,CAAE,EAAK,cAAe,CAAC,CAAE,CAAC,EAAG,CAAC,CAAE,EAAK,SAAU,CAAC,CAAC,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,GAAI,IAAO,EAAG,IAAO,EAAG,EAAK,EAAK,EAClR,OAAO,WAAW,8BAA8B,EAAE,UAClDA,GAAY,EAAI,WAGpB,IAAIC,EAAI,IAAIC,GAERC,GAAIC,EAAK,UAAU,EACnBC,GAAMF,GAAE,WAAW,IAAI,EAE3BF,EAAE,IAAMG,EAAK,WAAW,EACxBH,EAAE,MAAQG,EAAK,OAAO,EACtBH,EAAE,OAASE,GACXF,EAAE,IAAMI,GACRJ,EAAE,QAAUK,GACZ,OAAO,SAAW,IAAM,CAAEC,EAAG,OAAO,WAAW,EAAI,CAAE,EAErD,SAASC,GAAQC,EAAqB,CAClCC,GAAM,EACNH,EAAG,KAAO,IAAII,EACdJ,EAAG,KAAK,eAAe,CAAC,EACpBE,EAAUF,EAAG,WAAaK,EAAW,SAASH,EAAUF,EAAG,IAAI,EAC9DA,EAAG,WAAaK,EAAW,WAAW,EAAE,EAC7CL,EAAG,KAAK,MAAM,KAAKA,EAAG,UAAU,EAEhCA,EAAG,WAAW,UAAYM,GAAQN,EAAG,KAAK,QAAQ,CAAC,CAAC,EACpDA,EAAG,WAAW,SAAWA,EAAG,KAAK,QAAQ,CAAC,EAE1CA,EAAG,IAAM,EACTO,GAAU,EAAI,CAClB,CAEA,SAASC,IAAW,CAChB,OAAKC,GAAO,KAAK,MAAM,aAAa,UAAU,CAAC,GAC/CF,GAAU,EACH,IAFkD,EAG7D,CAEA,SAASA,GAAUN,EAAU,GAAO,CAChCP,EAAE,OAASM,EAAG,WACdN,EAAE,WAAW,EACbA,EAAE,OAAOA,EAAE,YAAY,GAAK,EAAGA,EAAE,YAAY,GAAK,CAAC,EACnDM,EAAG,OAASN,EACZG,EAAK,MAAM,EAAE,MAAM,QAAU,OAC7BG,EAAG,MAAQ,EACXA,EAAG,OAAO,CAACC,EAASA,CAAO,EAC3BS,GAAS,KAAK,MAAMV,EAAG,GAAG,CAAC,EAE3B,IAAMF,EADID,EAAK,cAAc,EACf,WAAW,IAAI,EAC7Bc,GAAUb,EAAKE,EAAG,IAAI,EACtB,QAASY,KAAQZ,EAAG,KAAK,MACrBY,EAAK,cAAcZ,EAAG,IAAK,EAAK,EAEpCa,EAAU,OAAQ,MAAM,EACxB,OAAO,GAAKb,CAChB,CAEAH,EAAK,aAAa,EAAE,QAAU,IAAM,CAAEI,GAAQR,EAAW,CAAE,EAC3DI,EAAK,aAAa,EAAE,QAAU,IAAM,CAAEI,GAAQ,CAAE,EAE5C,aAAa,WACRO,GAAS,IACV,aAAa,WAAa,OAAO,gGAAiG,aAAa,UAAU,GAAK,GAC9J,SAAS,OAAO,GAEhBX,EAAK,eAAe,EAAwB,UAAU,EAE9DA,EAAK,eAAe,EAAE,QAAU,IAAM,CAClCA,EAAK,kBAAkB,EAAE,MAAM,QAAU,GACxCA,EAAK,eAAe,EAAwB,UAAU,CAC3D,EAEA,OAAO,WAAciB,GAAM,CACvB,OAAQA,EAAE,IAAK,CACX,IAAK,IAAKpB,EAAE,KAAK,EAAG,MACpB,IAAK,IAAKA,EAAE,KAAK,EAAG,MACpB,IAAK,IAAKA,EAAE,KAAK,EAAG,MACpB,IAAK,IAAKA,EAAE,KAAK,EAAG,KACxB,CACJ,EAEA,SAASK,GAAQH,EAAe,CACvBA,IACLC,EAAK,kBAAkB,EAAE,UAAY,IAAID,EAAE,QAAQ,mBAC/CA,EAAE,SACFC,EAAK,iBAAiB,EAAE,UAAY,GAAGD,EAAE,QAAQ,KAAKA,EAAE,QAAQ,GAEhEC,EAAK,iBAAiB,EAAE,UAAY,GAAGD,EAAE,QAAQ,GACrDA,EAAE,QAAQI,CAAE,EAChB",
  "names": ["RGBtoL", "hex", "bigint", "r", "g", "b", "var_R", "var_G", "var_B", "var_Y", "LtoRGB", "l", "var_X", "var_Z", "ref_X", "ref_Y", "ref_Z", "X", "Y", "Z", "n", "randomInt", "a", "b", "randomFrom", "shuffle", "array", "seq", "gebi", "id", "element", "setStatus", "type", "id", "obj", "days", "gebi", "showDate", "today", "year", "month", "day", "calcColor2", "hex", "l", "RGBtoL", "LtoRGB", "assert", "condition", "msg", "args", "toPoint", "a", "SaveableObject", "type", "data", "fromJSON", "types", "addType", "id", "Cargo", "SaveableObject", "isCargoType", "type", "UsefulCargo", "Rocket", "addType", "Fuel", "ResourceCargo", "Water", "ResourceCargo", "addType", "Iron", "Food", "Radioactives", "MissionBox", "Cargo", "type", "data", "ret", "isMissionBox", "item", "shipNames", "shipColors", "normVector", "x", "y", "d", "scalarMul", "v1", "v2", "dotOnLine", "a", "b", "p", "v", "m", "lineCrossesObj", "size", "componentSize", "componentOffset", "drawComponent", "ctx", "x", "y", "ship", "component", "map", "componentTitle", "ComputerComponent", "Cloak", "drawPassage", "x0", "y0", "p", "Passage", "drawAirlock", "a", "b", "gradient", "gradient2", "Airlock", "drawShip", "row", "i", "xy", "draw_ship", "cell_size", "myRadars", "PlayerShip", "r", "draw_planet", "ctx", "planet", "cell_size", "x", "y", "grd", "draw_star", "star", "max_size", "center", "draw_ships", "ships", "myRadars", "gs", "ship", "PlayerShip", "draw_ship", "_calcInterceptionTime", "x0", "y0", "vx", "vy", "w", "D1", "t1", "t2", "calcInterceptionTime", "a", "b", "v", "now", "Component", "SaveableObject", "gs", "isComponentType", "type", "UselessComponent", "Airlock", "gebi", "addType", "Passage", "Ballast", "Debris", "_Debris", "data", "a", "NormalComponent", "isNormalComponentType", "ComputerComponent", "CargoBay", "_CargoBay", "x", "fromJSON", "isCargoBay", "component", "Radar", "_Radar", "ctx", "ev", "value", "ship", "dist", "time", "selected", "disabled", "ts", "c", "myRadars", "draw_ships", "newHTML", "s", "b", "Cloak", "ComputerComponent", "NormalComponent", "isComputerComponentType", "type", "BaseOnlyComputerComponent", "NavigationComputer", "value", "planet", "time", "gs", "selected", "disabled", "id1", "id2", "gebi", "ev", "PlayerShip", "ts", "newHTML", "p", "i", "a", "b", "v", "ship", "Radar", "vx", "vy", "calcInterceptionTime", "addType", "TradingComputer", "id", "giftAmount", "slider", "giveAmount", "getAmount", "MissionComputer", "n", "callback", "rows", "seq", "allCargoBays", "isCargoBay", "missionBoxes", "cargoBay", "isMissionBox", "missionBoxesFromHere", "box", "rewardCargos", "x", "Rocket", "Fuel", "completely", "allDests", "uniqDests", "CargoBay", "noramalComponentTypes", "types", "isNormalComponentType", "randomFrom", "nextShip", "nextShipData", "shipColors", "shipNames", "setNextShip", "n", "Ship", "_Ship", "ships", "gs", "ship", "now", "allowDispatch", "assert", "PlayerShip", "setStatus", "gebi", "flightProgress", "interceptableShips", "shuffle", "s", "Radar", "vx", "vy", "time", "calcInterceptionTime", "p", "toPlanet", "fromTime", "toPoint", "flyTime", "x", "types", "isComponentType", "type", "components", "component", "allCargoBays", "isCargoBay", "isCargoType", "cargoBay", "cargo", "row", "kind", "amount", "to", "MissionBox", "from", "total", "box", "pos", "myRadars", "dist", "data", "star", "calcColor2", "c", "fromJSON", "sayShip", "showTimeFrom", "square", "max_pos", "max_neg", "i", "a", "size", "noramalComponentTypes", "isNormalComponentType", "computerTypes", "isComputerComponentType", "componentTypes", "cargoTypes", "color", "componentType", "randomFrom", "CargoBay", "cargos", "randomInt", "j", "cargoType", "NavigationComputer", "TradingComputer", "MissionComputer", "max", "Ballast", "maxLen", "maxOffset", "planetTypes", "resources", "Water", "Iron", "Food", "Radioactives", "planetNamesTable", "ret", "Fuel", "Rocket", "buy", "sell", "Planet", "_Planet", "type_n", "type", "data", "planet", "Ship", "types", "sayPlanet", "showTimeFrom", "showBuySell", "time", "dist", "ship", "departTime", "dest", "randomFrom", "noramalComponentTypes", "isNormalComponentType", "allCargoBays", "gs", "isCargoBay", "missionBoxes", "cargoBay", "isMissionBox", "missionBoxesToHere", "box", "rewardCargos", "randomInt", "isBad", "x", "y", "size", "center", "makePlanets", "thisPlanetTypes", "shuffle", "seq", "_n", "bad", "xx", "yy", "i", "starColors", "mkgrid", "star", "size", "grid", "seq", "x", "center", "y", "Star", "load", "randomFrom", "randomInt", "makePlanets", "Planet", "i", "planet", "shuffle", "p", "s", "PlayerShip", "Ship", "a", "b", "lineCrossesObj", "planets", "producedResources", "rareResources", "types", "isCargoType", "resource", "abundantResources", "ar", "now", "j", "flyTime", "GameState", "_GameState", "value", "ts", "newDate", "ship", "showDate", "tripRemain", "setStatus", "assert", "noOnEnter", "noSave", "gs", "nextShip", "a", "Star", "playerShips", "isPlayerShip", "setNextShip", "loadGS", "data", "ret", "newGS", "PlayerShip", "_PlayerShip", "Ship", "now", "allowArrive", "gs", "assert", "size", "ship", "data", "star", "isPlayerShip", "Walker", "maxX", "maxY", "x", "y", "sign", "sure", "callOnEnter", "fast", "walkerOnCanvas_x", "componentSize", "canvasOffset_x", "walkerOnCanvas_y", "canvasOffset_y", "a", "b", "a_sz", "b_sz", "a_lock", "b_lock", "airlock_x", "airlock_y", "max_x", "max_y", "c", "drawShip", "drawAirlock", "gs", "moveDnFromAirlock", "player_x", "player_y", "otherShip", "newEasyShip", "w", "Walker", "c", "gebi", "ctx", "onEnter", "gs", "newGame", "shipData", "newGS", "Star", "PlayerShip", "toPoint", "startGame", "loadGame", "loadGS", "showDate", "draw_star", "ship", "setStatus", "e"]
}
