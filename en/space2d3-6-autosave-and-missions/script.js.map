{
  "version": 3,
  "sources": ["src/saveableType.ts", "src/cargo.ts", "src/const.ts", "src/utils.ts", "src/components.ts", "src/draw.ts", "src/geometry.ts", "src/planets.ts", "src/ship.ts", "src/stars.ts", "src/gameState.ts", "src/playerShip.ts", "src/walker.ts", "src/walkManager.ts", "src/index.ts"],
  "sourcesContent": ["export abstract class SaveableObject {\n    static id: string\n\n    get mytype() { return this.constructor as typeof SaveableObject }\n    get typename(): string { return this.mytype.id }\n\n    toJSON() {\n        return { 't': this.typename }\n    }\n    static fromJSON(type: typeof SaveableObject, data: object) {\n        // same as `return new type()`\n        return new (type as unknown as new () => SaveableObject)()\n    }\n}\n\nexport function fromJSON(data: { 't': string }) {\n    const type = types[data.t];\n    return type.fromJSON(type, data);\n}\n\n\nexport var types: { [key: string]: typeof SaveableObject } = {}\n\nexport function addType(type: typeof SaveableObject, id: string) {\n    types[id] = type\n    type.id = id\n}\n", "import { SaveableObject, addType } from './saveableType'\n\nexport abstract class Cargo extends SaveableObject { }\nexport function isCargoType(type: typeof SaveableObject): type is typeof Cargo { return type.prototype instanceof Cargo };\n\nexport abstract class UsefulCargo extends Cargo { }\n\nexport class Rocket extends UsefulCargo { }\naddType(Rocket, 'Rocket')\n\nexport class Fuel extends UsefulCargo { }\naddType(Fuel, 'Fuel')\n\nexport abstract class ResourceCargo extends Cargo { }\n\nexport class Water extends ResourceCargo {\n    static readonly color = 'blue';\n}\naddType(Water, 'Water')\n\nexport class Iron extends ResourceCargo {\n    static readonly color = 'yellow';\n}\naddType(Iron, 'Iron')\n\nexport class Food extends ResourceCargo {\n    static readonly color = 'green';\n}\naddType(Food, 'Food')\n\nexport class Radioactives extends ResourceCargo {\n    static readonly color = 'red';\n}\naddType(Radioactives, 'Radioactives')\n\nexport interface MissionBoxData {\n    t: string;\n    f: string;\n    to: string;\n    tot: number;\n}\nexport class MissionBox extends Cargo {\n    from: string;\n    to: string;\n    total: number;\n    toJSON(): MissionBoxData {\n        return {\n            't': this.typename,\n            'f': this.from,\n            'to': this.to,\n            'tot': this.total,\n        }\n    }\n\n    static fromJSON(type: typeof MissionBox, data: MissionBoxData): MissionBox {\n        const ret = new type();\n        ret.from = data.f;\n        ret.to = data.to;\n        ret.total = data.tot;\n        return ret;\n    }\n}\naddType(MissionBox, 'MissionBox')\nexport function isMissionBox(item: Cargo): item is MissionBox { return item instanceof MissionBox };", "export const shipBaseSpeed = 0.1\nexport const planet_size = 0.2\nexport const cargoPerCargoBay = 5\n//Note: if cargoPerDeliveryMission > cargoPerCargoBay,\n// then how can we give a free cardo bay if a ship has zero?\nexport const cargoPerDeliveryMission = cargoPerCargoBay - 1\nexport const cargoPerCargoMission = 20\nexport const maxFreeCargoBays = 4\nexport const shipNames = [\"Beast of Burden\", \"Blade of Occam\", \"Lance of Centri\", \"Wasp\", \"Stophy's Venture\", \"Enterprise\", \"Sally Ride\", \"Stellar Explorer\", \"First Light\", \"Lance of Zhargi\", \"Adventurer of Bacia\", \"Astral Enterprise\", \"Star of Kali\", \"Isaur Gypsy\", \"Astral Pioneer\", \"Celestial Maiden\", \"Luna Moth\", \"Harrier\", \"Fralphua's Opportunity\", \"Tory's Venture\", \"Star of Kini\", \"Flame of Rasi\", \"Bolo\", \"Edwin Hubble\", \"Ycon Express\", \"Wren\", \"Spirit of Taly\", \"Illustrious\", \"Yukon\", \"Bara Traveler\", \"Horizon\", \"Star of Icon\", \"Lady of Ghera\", \"Celestial Jewel\", \"Youthful Indiscretion\", \"Gauntlet of Anic\", \"Shoole Trader\", \"Bake Clipper\", \"Jewel of Jocia\", \"Solar Constellation\", \"Uctim Clipper\", \"Castle of Syko\", \"Stellar Jewel\", \"Profit Margin\", \"Irregular of Taly\", \"Swallow\", \"Pathfinder\", \"Celestial Destiny\", \"Spirit of Inquiry\"];\n// export const shipColors = [\"000000\", \"2f4f4f\", \"556b2f\", \"8b4513\", \"8b0000\", \"808000\", \"483d8b\", \"5f9ea0\", \"008000\", \"3cb371\", \"4682b4\", \"d2691e\", \"9acd32\", \"cd5c5c\", \"00008b\", \"32cd32\", \"daa520\", \"8fbc8f\", \"800080\", \"b03060\", \"ff0000\", \"00ced1\", \"ff8c00\", \"ffd700\", \"ffff00\", \"0000cd\", \"deb887\", \"00ff00\", \"00fa9a\", \"8a2be2\", \"dc143c\", \"00bfff\", \"adff2f\", \"ff6347\", \"da70d6\", \"b0c4de\", \"ff00ff\", \"f0e68c\", \"6495ed\", \"dda0dd\", \"ff1493\", \"7b68ee\", \"ffa07a\", \"afeeee\", \"98fb98\", \"7fffd4\", \"fafad2\", \"ff69b4\", \"ffb6c1\", \"fff0f5\"];\nexport const shipColors = ['black', 'darkslategray', 'darkolivegreen', 'saddlebrown', 'darkred', 'olive', 'darkslateblue', 'cadetblue', 'green', 'mediumseagreen', 'steelblue', 'chocolate', 'yellowgreen', 'indianred', 'darkblue', 'limegreen', 'goldenrod', 'darkseagreen', 'purple', 'maroon3', 'red', 'darkturquoise', 'darkorange', 'gold', 'yellow', 'mediumblue', 'burlywood', 'lime', 'mediumspringgreen', 'blueviolet', 'crimson', 'deepskyblue', 'greenyellow', 'tomato', 'orchid', 'lightsteelblue', 'fuchsia', 'khaki', 'cornflower', 'plum', 'deeppink', 'mediumslateblue', 'lightsalmon', 'paleturquoise', 'palegreen', 'aquamarine', 'lightgoldenrod', 'hotpink', 'lightpink', 'lavenderblush']\n", "export function randomInt(a: number, b: number): number {\n\tif (a > b) [a, b] = [b, a];\n\treturn Math.floor(Math.random() * (b - a + 1)) + a;\n}\n\nexport function randomFrom<T>(a: T[]): T {\n\treturn a[Math.floor(Math.random() * a.length)];\n}\n\nexport function shuffle<T>(array: T[]): T[] {\n\treturn array.map((a: any) => ({ sort: Math.random(), value: a }))\n\t\t.sort((a: { sort: number; }, b: { sort: number; }) => a.sort - b.sort)\n\t\t.map((a: { value: any; }) => a.value)\n}\n\nexport function seq(a: number): number[] {\n\treturn [...Array(a).keys()]\n\t//=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n\nexport function sleep(ms: number) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}", "import { Cargo, Fuel, MissionBox, ResourceCargo, Rocket, isMissionBox } from \"./cargo\"\nimport { cargoPerCargoBay, cargoPerCargoMission, cargoPerDeliveryMission, maxFreeCargoBays, planet_size, shipBaseSpeed } from \"./const\"\nimport { draw_planet, draw_ships, draw_star, showDate } from \"./draw\"\nimport { GameState, gs } from \"./gameState\"\nimport { gebi } from \"./index\"\nimport { Planet } from \"./planets\"\nimport { PlayerShip } from \"./playerShip\"\nimport { SaveableObject, addType, fromJSON, types } from \"./saveableType\"\nimport { Ship } from \"./ship\"\nimport { randomFrom, randomInt, seq } from \"./utils\"\n\nexport abstract class Component extends SaveableObject {\n    cellName? = ''\n    ship: Ship\n    onEnter(gs: GameState) { }\n}\nexport function isComponentType(type: typeof SaveableObject): type is typeof Component { return type.prototype instanceof Component };\n\nexport abstract class UselessComponent extends Component { }\n\nexport class Airlock extends UselessComponent {\n    onEnter(gs: GameState) {\n        gebi('Airlock_Locked').style.display = (gs.playerShip.toPlanet == gs.playerShip.onPlanet) ? '' : 'none';\n        gebi('Airlock_UnLocked').style.display = (gs.playerShip.toPlanet == gs.playerShip.onPlanet) ? 'none' : '';\n        gebi('Airlock_Detach').onclick = () => { gs.depart() };\n    }\n}\naddType(Airlock, 'Airlock')\n\nexport class Passage extends UselessComponent { }\naddType(Passage, 'Passage')\n\nexport class Ballast extends UselessComponent {\n    opposite? = ''\n    onEnter(gs: GameState) {\n        (document.querySelector('#Ballast b') as HTMLElement).innerText = this.opposite || ''\n    }\n}\naddType(Ballast, 'Ballast')\n\nexport class Debris extends UselessComponent {\n    original: string = ''\n    toJSON() {\n        return {\n            't': this.typename,\n            'o': this.original,\n        }\n    }\n    static fromJSON(type: typeof SaveableObject, data: { o: string }) {\n        let a = new Debris();\n        a.original = data.o;\n        return a;\n    }\n}\naddType(Debris, 'Debris')\n\n\n\nexport abstract class NormalComponent extends Component { }\nexport function isNormalComponentType(type: typeof SaveableObject): type is typeof NormalComponent { return type.prototype instanceof NormalComponent && !(type.prototype instanceof ComputerComponent) };\n\nexport class CargoBay extends NormalComponent {\n    cargo: Array<Cargo> = []\n    toJSON() {\n        return {\n            't': this.typename,\n            'c': this.cargo.map(x => x.toJSON())\n        };\n    }\n    static fromJSON(type: typeof SaveableObject, data: { c: Array<{ 't': string }> }) {\n        let a = new CargoBay();\n        a.cargo = data.c.map((x: { t: string }) => fromJSON(x));\n        return a;\n    }\n    onEnter(gs: GameState) {\n        (document.querySelector('#CargoBay ul') as HTMLUListElement).innerHTML = this.cargo.map(x => `<li>${x.typename}</li>`).join('');\n        (document.getElementById('CargoBay_Empty') as HTMLDivElement).style.display = (this.cargo.length == 0) ? '' : 'none';\n        (document.getElementById('CargoBay_NonEmpty') as HTMLDivElement).style.display = (this.cargo.length == 0) ? 'none' : '';\n    }\n}\naddType(CargoBay, 'CargoBay');\nexport function isCargoBay(component: Component): component is CargoBay { return component instanceof CargoBay };\n\n\n\nexport class Radar extends NormalComponent {\n    onEnter(gs: GameState) {\n        const c = document.querySelector('#Radar canvas') as HTMLCanvasElement\n        const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n        drawRadar();\n    }\n}\naddType(Radar, 'Radar');\n\nfunction drawRadar(ts?: number) {\n    const c = document.querySelector('#Radar canvas') as HTMLCanvasElement\n    if (c.offsetParent === null) return;\n    const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n    if (gs.tick(ts)) window.requestAnimationFrame(drawRadar);\n    // TODO: draw planets only once, and redraw only ships\n    // (maybe on another canvas)\n    draw_star(ctx, gs.star);\n    const ship = gs.walkManager.walker.map.map[gs.walkManager.walker.x][gs.walkManager.walker.y].ship;\n    if (ship === undefined) return;\n    draw_ships(ctx, gs.star.ships, ship.componentTypes[Radar.id]);\n}\n\nexport class Cloak extends NormalComponent { }\naddType(Cloak, 'Cloak');\n\nexport abstract class EngineComponent extends NormalComponent { }\n\nexport abstract class ComputerComponent extends NormalComponent { }\nexport function isComputerComponentType(type: typeof SaveableObject): type is typeof ComputerComponent { return type.prototype instanceof ComputerComponent && !(type.prototype instanceof BaseOnlyComputerComponent) };\n\nexport class NavigationComputer extends ComputerComponent {\n    planetTr(value: { planet: Planet; i: number }) {\n        const planet = value.planet;\n        const i = value.i;\n        const time = Math.ceil(planet.distanceTo(gs.playerShip) / shipBaseSpeed);\n        const selected = (planet == gs.playerShip.toPlanet) ? 'checked' : '';\n        const disabled = (planet == gs.playerShip.onPlanet) ? 'disabled' : '';\n        return `<tr><td>\n            <label for=\"NavigationComputer_to_${i}\"><canvas id=\"NavigationComputer_canvas_${i}\" width=30 height=30></canvas></label>\n        </td><td>\n            <label><input type=\"radio\" name=\"NavigationComputer_to\" value=\"${i}\" id=\"NavigationComputer_to_${i}\" ${disabled} ${selected}>\n            <b>${planet.name}</b> (${time}d)<br>\n            ${planet.buys ? `wants: ${planet.buys.id}` : ''} ${planet.sells ? `gives: ${planet.sells.id}` : ''}\n        </label></td></tr>`\n    }\n    showDiv(id: string) {\n        gebi('currentComponentPage').innerHTML = `#NavigationComputer_${id}{display:block !important}`;\n    }\n    onEnter(gs: GameState) {\n        if (gs.timeFlies) {\n            this.showDiv('Flying');\n            return;\n        }\n        this.showDiv('Select');\n        (document.querySelector('#NavigationComputer table') as HTMLTableElement).innerHTML =\n            gs.star.planets.map((p, i) => { return { 'planet': p, 'i': i, 'dist': p.distanceTo(gs.playerShip) } }).sort((a, b) => a.dist - b.dist).map(this.planetTr).join('');\n        gs.star.planets.forEach((planet, i) => {\n            const c = document.getElementById(`NavigationComputer_canvas_${i}`) as HTMLCanvasElement;\n            if (!c) return;\n            const ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n            draw_planet(ctx, planet, c.width / planet_size / 2, c.width / 2, c.height / 2);\n        })\n        gebi('NavigationComputer_Plot').style.display = (this.ship instanceof PlayerShip) ? 'none' : '';\n        gebi('NavigationComputer_Fly').style.display = (this.ship instanceof PlayerShip) ? '' : 'none';\n        gebi('NavigationComputer_Plot').onclick = () => {\n            const el = document.querySelector('input[name=\"NavigationComputer_to\"]:checked') as HTMLInputElement;\n            if (!el) return false;\n            if (!gs.playerShip.onPlanet) return false;\n            gs.playerShip.planTrip(gs.playerShip.onPlanet, gs.star.planets[parseInt(el.value)], gs.now);\n            this.showDiv('Detach');\n            // console.log('NavigationComputer_Plot', gs.playerShip.toPlanet, gs.star.planets, parseInt(el.value));\n            return true;\n        }\n        gebi('NavigationComputer_Fly').onclick = () => {\n            if (!gebi('NavigationComputer_Plot')?.onclick?.()) return false;\n            this.showDiv('Departed');\n            gs.depart();\n        }\n    }\n}\naddType(NavigationComputer, 'NavigationComputer');\n\n\n\nexport class TradingComputer extends ComputerComponent {\n    showDiv(id: string) {\n        gebi('currentComponentPage').innerHTML = `#TradingComputer_${id}{display:block !important}`;\n    }\n    onEnter(gs: GameState): void {\n        const planet = gs.playerShip.onPlanet as Planet;\n        if (planet === null) {\n            this.showDiv('None');\n            return;\n        }\n        gs.playerShip.countCargo();\n        if (planet.buys === null) {\n            // FREE GIFT\n            const giftAmount = Math.min(gs.playerShip.freeCargo, planet.ratio);\n            if (giftAmount == 0) {\n                this.showDiv('NoGift');\n                return;\n            }\n            this.showDiv('Gift');\n            gebi('TradingComputer_gift_number').innerText = giftAmount.toString();\n            gebi('TradingComputer_gift_type').innerText = planet.sells.id;\n            gebi('TradingComputer_gift_take').onclick = () => {\n                gs.playerShip.putCargo((planet).sells, giftAmount);\n                this.showDiv('Done');\n            };\n            return;\n        }\n        // rest is for normal trade\n        if (gs.playerShip.cargoTypes[planet.buys.id] < 1) {\n            this.showDiv('NothingToTradde');\n            return;\n        }\n        this.showDiv('Trade');\n        const slider = gebi('TradingComputer_give_slider') as HTMLInputElement;\n        gebi('TradingComputer_give_type').innerText = planet.buys.id;\n        gebi('TradingComputer_get_type').innerText = planet.sells.id;\n        slider.value = slider.max = gs.playerShip.cargoTypes[planet.buys.id].toString();\n        slider.style.display = gs.playerShip.cargoTypes[planet.buys.id] == 1 ? 'none' : '';\n        slider.onchange = () => {\n            const giveAmount = parseInt(slider.value);\n            let getAmount = Math.round(giveAmount * planet.ratio);\n            gebi('TradingComputer_max_cargo_warning').style.display = (getAmount - giveAmount > gs.playerShip.freeCargo) ? '' : 'none';\n            getAmount = Math.min(getAmount, gs.playerShip.freeCargo + giveAmount);\n            gebi('TradingComputer_give_number').innerText = giveAmount.toString();\n            gebi('TradingComputer_get_number').innerText = getAmount.toString();\n        };\n        slider.onchange();\n        gebi('TradingComputer_deal').onclick = () => {\n            const giveAmount = parseInt(slider.value);\n            let getAmount = Math.round(giveAmount * planet.ratio);\n            getAmount = Math.min(getAmount, gs.playerShip.freeCargo + giveAmount);\n            // console.log('before', gs.playerShip.cargoTypes, gs.playerShip.freeCargo);\n            // console.log(giveAmount, planet.buys, getAmount, planet.sells);\n            gs.playerShip.getCargo(planet.buys as typeof ResourceCargo, giveAmount);\n            gs.playerShip.putCargo(planet.sells as typeof ResourceCargo, getAmount);\n            // console.log('after', gs.playerShip.cargoTypes, gs.playerShip.freeCargo);\n            this.showDiv('Done');\n        };\n    }\n\n}\naddType(TradingComputer, 'TradingComputer');\n\nexport abstract class BaseOnlyComputerComponent extends ComputerComponent { }\n\nexport class MissionComputer extends BaseOnlyComputerComponent {\n    missionBoxesToHere: MissionBox[];\n    deliveryMissionGivesBoxes: number;\n    deliveryMissionGivesFreeCargoBay: boolean;\n    rewardRockets: number;\n    rewardFuel: number;\n    divsShown = ['', ''];\n    showDiv(n: number, id: string) {\n        this.divsShown[n] = id;\n        gebi('currentComponentPage').innerHTML = this.divsShown.map((id, i) => `#MissionComputer_${i}_${id}{display:block !important}`).join('');\n    }\n    fillRowSelectButtons(id: string, callback) {\n        const rows = seq(gs.playerShip.rows.length + 1);\n        rows.unshift(-1);\n        gebi(id).innerHTML = rows.map(i => `<button id=\"${id}_${i + 1}\">row ${String.fromCharCode(65 + i)}</button>`).join(' ');\n        rows.forEach(i => gebi(`${id}_${i + 1}`).onclick = () => { callback(i, this) });\n    }\n    onEnter(gs: GameState): void {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.countCargo();\n        //Delivery\n        const allCargoBays = gs.playerShip.rows.flat().filter(isCargoBay);\n        let missionBoxes: MissionBox[] = [];\n        for (let cargoBay of allCargoBays) {\n            missionBoxes = missionBoxes.concat(cargoBay.cargo.filter(isMissionBox));\n        }\n        const missionBoxesFromHere = missionBoxes.filter(box => box.from === planet.name);\n        this.missionBoxesToHere = missionBoxes.filter(box => box.to === planet.name);\n        if (this.missionBoxesToHere.length) {\n            this.showDiv(0, 'Complete');\n            const rewardCargos = Math.max(1, Math.floor(this.missionBoxesToHere.length / 2));\n            this.rewardRockets = randomInt(0, rewardCargos);\n            this.rewardFuel = rewardCargos - this.rewardRockets;\n            gebi('MissionComputer_Complete_resource').innerText = `${rewardCargos} ${planet.sells.id}`;\n            gebi('MissionComputer_Complete_cargo').innerText =\n                [this.rewardRockets ? `${this.rewardRockets} Rockets` : '',\n                this.rewardFuel ? `${this.rewardFuel} Fuel` : ''].filter(x => !!x).join(' and ');\n            gebi('MissionComputer_Complete_resource').onclick = () => {\n                gs.playerShip.getMissionBox(planet.name, this.missionBoxesToHere.length);\n                gs.playerShip.putCargo(planet.sells, rewardCargos);\n                this.showDiv(0, 'Completed');\n            }\n            gebi('MissionComputer_Complete_cargo').onclick = () => {\n                gs.playerShip.getMissionBox(planet.name, this.missionBoxesToHere.length);\n                gs.playerShip.putCargo(Rocket, this.rewardRockets);\n                gs.playerShip.putCargo(Fuel, this.rewardFuel);\n                this.showDiv(0, 'Completed');\n            }\n            // TODO: if player has 5 boxes with \"total\"==5 and 10 boxes with \"total\"==10\n            const completely = this.missionBoxesToHere.every(box => box.total == this.missionBoxesToHere[0].total && box.from == this.missionBoxesToHere[0].from) && this.missionBoxesToHere[0].total == this.missionBoxesToHere.length;\n            gebi('MissionComputer_Complete_component_wrap').style.display = completely ? '' : 'none';\n            gebi('MissionComputer_Complete_component_name').innerText = planet.deliveryMissionComponent.id;\n            this.fillRowSelectButtons('MissionComputer_Complete_component_select', this.deliveryMissionCompleteSelect);\n        } else if (missionBoxesFromHere.length) {\n            this.showDiv(0, 'InProgress');\n        } else if (gs.playerShip.freeCargo < cargoPerDeliveryMission && gs.playerShip.componentTypes[CargoBay.id] >= maxFreeCargoBays) {\n            this.showDiv(0, 'NoSpace');\n        } else {\n            this.showDiv(0, 'Offer');\n            this.deliveryMissionGivesFreeCargoBay = gs.playerShip.freeCargo < cargoPerDeliveryMission;\n            if (this.deliveryMissionGivesFreeCargoBay) {\n                this.deliveryMissionGivesBoxes = cargoPerDeliveryMission;\n            } else {\n                // Note that here we use cargoPerCargoBay. This is not a mistake. If you have 3 empty cargo bays,\n                // we don't want to occupy them completely with mission cargo.\n                this.deliveryMissionGivesBoxes = Math.floor(gs.playerShip.freeCargo / cargoPerCargoBay) * cargoPerDeliveryMission;\n            }\n            gebi('MissionComputer_Offer_n').innerText = this.deliveryMissionGivesBoxes.toString();\n            gebi('MissionComputer_Offer_to').innerText = planet.deliveryMissionDest;\n            gebi('MissionComputer_Offer_CargoBay').style.display = this.deliveryMissionGivesFreeCargoBay ? '' : 'none';\n            gebi('MissionComputer_Offer_NoCargoBay').style.display = this.deliveryMissionGivesFreeCargoBay ? 'none' : '';\n            gebi('MissionComputer_Offer_accept').onclick = () => {\n                gs.playerShip.putMissionBox(planet.name, planet.deliveryMissionDest, this.deliveryMissionGivesBoxes);\n                this.showDiv(0, 'Started');\n            };\n            this.fillRowSelectButtons('MissionComputer_Offer_CargoBay_select', this.deliveryMissionFreeCargoBaySelect);\n        }\n        //Cargo\n        if (!planet.buys) {\n            this.showDiv(1, 'None');\n        } else {\n            this.showDiv(1, 'Cargo');\n            gebi('MissionComputer_Cargo_n').innerText = cargoPerCargoMission.toString();\n            gebi('MissionComputer_Cargo_name').innerText = planet.buys.id;\n            gebi('MissionComputer_Cargo_deliver').style.display = (gs.playerShip.cargoTypes[planet.buys.id] >= cargoPerCargoMission) ? '' : 'none';\n            gebi('MissionComputer_Cargo_component_name').innerText = planet.cargoMissionComponent.id;\n            this.fillRowSelectButtons('MissionComputer_Cargo_component_select', this.cargoMissionSelect);\n        }\n    }\n    deliveryMissionFreeCargoBaySelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new CargoBay(), n);\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we've added a cargo box\n        gs.playerShip.putMissionBox(planet.name, planet.deliveryMissionDest, t.deliveryMissionGivesBoxes);\n        gs.walkManager.reattach(gs.walkCTX);\n        t.showDiv(0, 'Started');\n    }\n    deliveryMissionCompleteSelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new (planet.deliveryMissionComponent as unknown as new () => NormalComponent)(), n);\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we might've added a cargo box\n        gs.playerShip.getMissionBox(planet.name, t.missionBoxesToHere.length);\n        gs.walkManager.reattach(gs.walkCTX);\n        t.showDiv(0, 'Completed');\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        planet.cargoMissionComponent = randomFrom(noramalComponentTypes);\n    }\n    cargoMissionSelect(n: number, t) {\n        const planet = gs.playerShip.onPlanet;\n        if (!planet?.buys) return;\n        gs.playerShip.deBallastTail();\n        gs.playerShip.addComponent(new (planet.cargoMissionComponent as unknown as new () => NormalComponent)(), n)\n        gs.playerShip.balanceBallast();\n        gs.playerShip.countComponents();\n        gs.playerShip.countCargo();// we might've added a cargo box\n        gs.playerShip.getCargo(planet.buys, cargoPerCargoMission);\n        gs.walkManager.reattach(gs.walkCTX);\n        t.showDiv(1, 'Completed');\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        planet.cargoMissionComponent = randomFrom(noramalComponentTypes);\n    }\n}\naddType(MissionComputer, 'MissionComputer');", "import { Airlock, Cloak, Component, ComputerComponent, Passage } from \"./components\"\nimport { WalkMap } from \"./walker\";\nimport { Ship, xywh } from \"./ship\";\nimport { Planet } from \"./planets\";\nimport { Star } from \"./stars\";\nimport { planet_size } from \"./const\";\nimport { gebi } from \"./index\";\nimport { gs } from \"./gameState\";\nimport { PlayerShip } from \"./playerShip\";\n\nexport const componentSize = 50\nexport const componentOffset = 5\n\nfunction drawComponent(ctx: CanvasRenderingContext2D, x: number, y: number, ship: Ship, component: Component, map?: WalkMap) {\n    if (ship.isAlien) {\n        ctx.rect(x * componentSize, y * componentSize + componentOffset, componentSize, componentSize - 2 * componentOffset);\n    } else {\n        ctx.rect(x * componentSize + componentOffset, y * componentSize, componentSize - 2 * componentOffset, componentSize);\n    }\n    ctx.strokeStyle = \"white\";\n    ctx.fillStyle = \"white\";\n    ctx.stroke();\n    ctx.textBaseline = 'top';\n    ctx.fillText(component.cellName || '', x * componentSize + componentOffset, y * componentSize)\n    let componentTitle = component.typename[0];\n    if (component instanceof ComputerComponent) componentTitle += 'C';\n    if (component instanceof Cloak) componentTitle += 'l';\n    ctx.fillText(componentTitle, x * componentSize + componentOffset, y * componentSize + 16);\n    if (map) {\n        map.map[x][y].canBeHere = true\n        map.map[x][y].canGoX = ship.isAlien\n        map.map[x][y].canGoY = !ship.isAlien\n        map.map[x][y].ship = ship\n        map.map[x][y].component = component\n    }\n}\n\nfunction drawPassage(ctx: CanvasRenderingContext2D, x0: number, y0: number, ship: Ship, map?: WalkMap) {\n    const p = ship.passage\n    ctx.rect((x0 + p.x) * componentSize, (y0 + p.y) * componentSize, p.w * componentSize, p.h * componentSize);\n    ctx.strokeStyle = \"white\";\n    ctx.fillStyle = \"white\";\n    ctx.stroke();\n    ctx.textBaseline = 'top';\n    if (map) {\n        let component = new Passage();\n        for (let x = 0; x < p.w; x++)\n            for (let y = 0; y < p.h; y++) {\n                map.map[x + x0][y + y0].canBeHere = true\n                map.map[x + x0][y + y0].canGoX = true\n                map.map[x + x0][y + y0].canGoY = true\n                map.map[x + x0][y + y0].ship = ship\n                map.map[x + x0][y + y0].component = component\n            }\n    }\n}\n\nexport function drawAirlock(ctx: CanvasRenderingContext2D, x: number, y: number, map?: WalkMap) {\n    // NOTE: YOUR ship is always the lower one\n    // TODO: this is for normal-to-normal ship. How it will look with alien ships - TBD\n    ctx.strokeStyle = \"white\";\n    ctx.strokeStyle = \"white\";\n    ctx.fillStyle = \"white\";\n    ctx.beginPath();\n    ctx.moveTo(x * componentSize + componentOffset, y * componentSize);\n    ctx.lineTo(x * componentSize + componentOffset * 2, (y + 0.5) * componentSize);\n    ctx.lineTo(x * componentSize + componentOffset, (y + 1) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset, (y + 1) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset * 2, (y + 0.5) * componentSize);\n    ctx.lineTo((x + 1) * componentSize - componentOffset, y * componentSize);\n    ctx.closePath();\n    ctx.stroke();\n\n    if (map) {\n        map.map[x][y].canBeHere = true\n        map.map[x][y].canGoY = true\n        map.map[x][y].component = new Airlock()\n    }\n}\n\nexport function drawShip(ctx: CanvasRenderingContext2D, x0, y0, ship: Ship, map?: WalkMap) {\n    // draw ship INTERIOR\n    for (let row = 0; row < ship.rows.length; row++) {\n        for (let i = 0; i < ship.rows[row].length; i++) {\n            let component = ship.rows[row][i];\n            let xy = ship.rowToXY(row, i);\n            component.cellName = String.fromCharCode(65 + row) + xy.y;\n            drawComponent(ctx, x0 + xy.x, y0 - xy.y, ship, component, map);\n        }\n    }\n    drawPassage(ctx, x0, y0, ship, map);\n}\n\nexport function draw_ship(ctx: CanvasRenderingContext2D, ship: Ship, cell_size: number, myRadars?: number) {\n    // draw ship ON STAR MAP\n    const x = (ship.x) * cell_size;\n    const y = (ship.y) * cell_size;\n    // console.log('draw', ship.color, x, y);\n    ctx.fillStyle = ship.color;\n    ctx.fillRect(x - 1, y - 1, 3, 3);\n    if (myRadars !== undefined && ship instanceof PlayerShip) {\n        for (let r = 1; r <= myRadars; r++) {\n            ctx.beginPath();\n            ctx.arc(x, y, cell_size * r, 0, 7);\n            ctx.strokeStyle = 'red';\n            ctx.stroke();\n        }\n    }\n}\n\nexport function draw_planet(ctx: CanvasRenderingContext2D, planet: Planet, cell_size: number, x?: number, y?: number) {\n    if (x === undefined) x = (planet.x) * cell_size;\n    if (y === undefined) y = (planet.y) * cell_size;\n    var grd = ctx.createRadialGradient(x - 1, y - 1, 2, x, y, planet_size * cell_size);\n    grd.addColorStop(0, planet.color_in);\n    grd.addColorStop(1, planet.color_out);\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.arc(x, y, planet_size * cell_size, 0, 7);\n    ctx.fill();\n}\n\n\nexport function draw_star(ctx: CanvasRenderingContext2D, star: Star) {\n    //calc_sizes(ctx, star);\n    const max_size = ctx.canvas.width;\n    const cell_size = max_size / (star.size);\n    const center = max_size / 2;\n    ctx.clearRect(0, 0, max_size, max_size);\n    if (star.bright) {\n        let grd = ctx.createRadialGradient(center, center, 0, center, center, cell_size / 2);\n        grd.addColorStop(0, \"white\");\n        grd.addColorStop(0.5, star.color);\n        grd.addColorStop(1, \"transparent\");\n        ctx.fillStyle = grd;\n        ctx.fillRect(0, 0, max_size, max_size);\n    } else {\n        let grd = ctx.createRadialGradient(center, center, 10, center, center, cell_size / 2);\n        grd.addColorStop(0, star.color);\n        grd.addColorStop(1, \"transparent\");\n        ctx.fillStyle = grd;\n        ctx.fillRect(0, 0, max_size, max_size);\n    }\n    for (let planet of star.planets) {\n        draw_planet(ctx, planet, cell_size);\n    }\n}\n\nexport function draw_ships(ctx: CanvasRenderingContext2D, ships: Ship[], myRadars: number) {\n    const max_size = ctx.canvas.width;\n    const cell_size = max_size / gs.star.size;\n    for (let ship of ships) {\n        if (ship instanceof PlayerShip || ship.seenBy(gs.playerShip, myRadars))\n            draw_ship(ctx, ship, cell_size, myRadars);\n    }\n}\n\nexport function showDate(today: number) {\n    // console.log('showTime', now);\n    gebi('now-day').innerText = (today + 1).toString();\n    // const date = Math.floor(now);\n    const year = Math.floor(today / 300) + 3000;\n    const month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'][Math.floor((today % 300) / 30)];\n    const day = Math.floor(today % 30) + 1;\n    gebi('now-date').innerText = `${day} ${month} ${year}`;\n    // const time = now % 1;\n    // gebi('now-hr').innerText = Math.floor(time * 25);\n    // gebi('now-min').innerText = Math.round((time * 25 * 50) % 25);\n}\n\n// setInterval(showTime, 1000);", "type vector = [number, number];\n\nfunction normVector(x: number, y: number): vector {\n\tconst d = Math.hypot(x, y);\n\treturn [x / d, y / d];\n}\n\nfunction scalarMul(v1: vector, v2: vector): number {\n\treturn v1[0] * v2[0] + v1[1] * v2[1];\n}\n\nexport interface Point {\n\tx: number,\n\ty: number\n}\n\n// see http://www.gamedev.ru/code/forum/?id=74832 and https://ru.wikipedia.org/wiki/\u0420\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u0435_\u043E\u0442_\u0442\u043E\u0447\u043A\u0438_\u0434\u043E_\u043F\u0440\u044F\u043C\u043E\u0439_\u043D\u0430_\u043F\u043B\u043E\u0441\u043A\u043E\u0441\u0442\u0438#\u041F\u0440\u044F\u043C\u0430\u044F_\u0437\u0430\u0434\u0430\u043D\u0430_\u0434\u0432\u0443\u043C\u044F_\u0442\u043E\u0447\u043A\u0430\u043C\u0438\nfunction dotOnLine(a: Point, b: Point, p: Point): vector {\n\tconst v = normVector(a.x - b.x, a.y - b.y);\n\tconst m = scalarMul(v, [p.x - b.x, p.y - b.y]);\n\treturn [b.x + v[0] * m, b.y + v[1] * m];\n}\n\n// does a-b line cross obj p with size?\nexport function lineCrossesObj(a: Point, b: Point, p: Point, size: number) {\n\tconst [x, y] = dotOnLine(a, b, p);\n\treturn x >= Math.min(a.x, b.x) &&\n\t\tx <= Math.max(a.x, b.x) &&\n\t\ty >= Math.min(a.y, b.y) &&\n\t\ty <= Math.max(a.y, b.y) &&\n\t\tMath.hypot(x - p.x, y - p.y) < size;\n}\n\n\n// see https://e-maxx.ru/algo/segments_intersection_checking\n\nfunction area(a: Point, b: Point, c: Point) {\n\treturn (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n}\n\nfunction intersect_1(a: number, b: number, c: number, d: number) {\n\tif (a > b) [a, b] = [b, a];\n\tif (c > d) [c, d] = [d, c];\n\treturn Math.max(a, c) <= Math.min(b, d);\n}\n\nexport function intersect(a: Point, b: Point, c: Point, d: Point) {\n\treturn intersect_1(a.x, b.x, c.x, d.x)\n\t\t&& intersect_1(a.y, b.y, c.y, d.y)\n\t\t&& area(a, b, c) * area(a, b, d) <= 0\n\t\t&& area(c, d, a) * area(c, d, b) <= 0;\n}\n", "import { Cargo, Food, Iron, Radioactives, ResourceCargo, Water, isCargoType } from \"./cargo\";\nimport { NormalComponent, isNormalComponentType } from \"./components\";\nimport { shipBaseSpeed } from \"./const\";\nimport { Point } from \"./geometry\";\nimport { types } from \"./saveableType\";\nimport { Ship, ShipData } from \"./ship\";\nimport { shuffle, seq, randomFrom } from \"./utils\";\n\nexport type PlanetType = [name: string, buys: typeof ResourceCargo | null, sells: typeof ResourceCargo, color_in: string, color_out: string];\n\n//export const resources = ['water', 'iron', 'food', 'radioactives'];\nconst planetTypes = (function () {\n\tconst resources = [Water, Iron, Food, Radioactives];\n\t//var colors = ['blue', 'yellow', 'green', 'red'];\n\tvar planetNamesTable = [ // table: rows: what planet buys; columns: what planet sells; value: planet name\n\t\t[null, 'water-mining', 'farming', 'burning'],\n\t\t['ice', null, 'hunting', 'fire'],\n\t\t['fishy', 'bio-mining', null, 'nuclear'],\n\t\t['frozen', 'hot mining', 'ice-farming', null]];\n\n\tvar ret: PlanetType[] = [\n\t\t['ocean', null, Water, 'navy', 'blue'],\n\t\t//['dry', Water, null, 'blue', 'white'],\n\t\t//['mining', null, Iron, 'olive', 'yellow'],\n\t\t//['populated', Food, null, 'green', 'lime'],\n\t];\n\n\tfor (var buy = 0; buy < 4; buy++) {\n\t\tfor (var sell = 0; sell < 4; sell++) {\n\t\t\tif (buy == sell) continue;\n\t\t\tret.push([planetNamesTable[buy][sell] as string, resources[buy], resources[sell], resources[buy].color, resources[sell].color])\n\t\t}\n\t}\n\treturn ret;\n})();\n\nexport class Planet {\n\tx: number; y: number;\n\ti: number; //index in star's list of planets\n\ttype: number;\n\tname: string;\n\tbuys: typeof ResourceCargo | null;\n\tsells: typeof ResourceCargo;\n\tratio: number; //how many 'sells' resource planet gives for 1 of 'buys' resource\n\tcolor_in: string;\n\tcolor_out: string;\n\tneighbours: Planet[];\n\tbase: Ship;\n\tdeliveryMissionDest: string;\n\tdeliveryMissionComponent: typeof NormalComponent;\n\tcargoMissionComponent: typeof NormalComponent;\n\tconstructor(x: number, y: number, type_n: number, i: number) {\n\t\tvar type = planetTypes[type_n];\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.i = i;\n\t\tthis.type = type_n;\n\t\tthis.name = type[0];\n\t\tthis.buys = type[1];\n\t\tthis.sells = type[2];\n\t\tthis.color_in = type[3];\n\t\tthis.color_out = type[4];\n\t}\n\tdistanceTo(p: Point) {\n\t\treturn Math.hypot(this.x - p.x, this.y - p.y);\n\t}\n\ttoJSON(): [number, number, number, ShipData] {\n\t\treturn [this.x, this.y, this.type, this.base.toJSON()];\n\t}\n\tdispatch(ship: Ship, departTime: number) {\n\t\t//send the ship in a random direction\n\t\tconst dest = this.neighbours.shift() as Planet;\n\t\tthis.neighbours.push(dest);\n\t\tship.planTrip(this, dest, departTime);\n\t}\n\tonEnter() {\n\t\tthis.deliveryMissionDest = randomFrom(this.neighbours).name;\n\t\tconst noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n\t\tthis.cargoMissionComponent = randomFrom(noramalComponentTypes);\n\t\tthis.deliveryMissionComponent = randomFrom(noramalComponentTypes);\n\t}\n}\n\nfunction isBad(x: number, y: number, size: number) {\n\tvar center = size / 2;\n\treturn x < center + 0.6 && x > center - 0.6 && y < center + 0.6 && y > center - 0.6;\n}\n\nexport function makePlanets(size: number) {\n\tvar thisPlanetTypes = shuffle(seq(planetTypes.length));\n\tfor (var _n = 0; _n < 100; _n++) {\n\t\tvar bad = false;\n\t\tvar ret: [number, number, number][] = [];\n\t\tvar xx = shuffle(seq(size));\n\t\tvar yy = shuffle(seq(size));\n\t\t// console.log(_n,xx,yy);\n\t\tvar center = size / 2;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tif (isBad(xx[i] + 0.5, yy[i] + 0.5, size)) {\n\t\t\t\tbad = true;\n\t\t\t}\n\t\t\tret.push([xx[i] + 0.5, yy[i] + 0.5, thisPlanetTypes[i]]);\n\t\t}\n\t\tif (!bad) return ret;\n\t}\n\tconsole.error('should not be here');\n\treturn [];\n}\n", "import { Cargo, MissionBox, UsefulCargo, isCargoType } from \"./cargo\"\nimport { Ballast, CargoBay, Cloak, Component, MissionComputer, NavigationComputer, NormalComponent, Radar, TradingComputer, isCargoBay, isComponentType, isComputerComponentType, isNormalComponentType } from \"./components\"\nimport { cargoPerCargoBay, shipBaseSpeed, shipColors } from \"./const\"\nimport { Point } from \"./geometry\"\nimport { Planet } from \"./planets\"\nimport { fromJSON, types } from \"./saveableType\"\nimport { Star } from \"./stars\"\nimport { randomFrom, randomInt, shuffle } from \"./utils\"\n\nexport interface xywh {\n    'x': number,\n    'y': number,\n    'w': number,\n    'h': number\n}\n\nexport interface ShipData {\n    'a': boolean,\n    'n': string,\n    'c': string,\n    'o': number[],\n    'r': { 't': string }[][],\n    'frX': number,\n    'frY': number,\n    'frT': number,\n    'toP': number,\n    'toT': number,\n    'p'?: boolean,\n    'on'?: number,\n}\n\nexport class Ship {\n    name: string;\n    color: string;\n    isAlien: boolean = false\n    rows: Array<Array<Component>> = []\n    offsets: Array<number> = []\n    componentTypes: { [typeName: string]: number }\n    cargoTypes: { [typeName: string]: number }\n    freeCargo: number\n    // next 4 are yet unused, to be used by detach/attach logic\n    isPlayerShip: boolean = false\n    playerOnShip: boolean = false\n    playerX: number\n    playerY: number\n    // position in space\n    x: number\n    y: number\n    fromPoint: Point\n    toPlanet: Planet\n    fromTime: number\n    toTime: number\n\n    updateSpaceXY(now: number, allowDispatch = true) {\n        while (now >= this.toTime && allowDispatch) {\n            this.toPlanet.dispatch(this, this.toTime);\n        }\n        const flightProgress = (now - this.fromTime) / (this.toTime - this.fromTime);\n        this.x = this.fromPoint.x + (this.toPlanet.x - this.fromPoint.x) * flightProgress;\n        this.y = this.fromPoint.y + (this.toPlanet.y - this.fromPoint.y) * flightProgress;\n    }\n\n    planTrip(fromPoint: Point, toPlanet: Planet, fromTime: number) {\n        this.fromPoint = fromPoint;\n        this.toPlanet = toPlanet;\n        this.fromTime = fromTime;\n        const dist = toPlanet.distanceTo(fromPoint);\n        const flyTime = dist / shipBaseSpeed;\n        this.toTime = fromTime + flyTime;\n        this.updateSpaceXY(this.fromTime);\n        // console.log('planTrip', fromTime, flyTime, dist, fromPlanet.name, toPlanet.name);\n    }\n\n    countComponents() {\n        this.componentTypes = {};\n        const x = Object.values(types).filter(isComponentType).forEach(\n            type => this.componentTypes[type.id] = 0);\n        const components = this.rows.flat();\n        for (let component of components) {\n            this.componentTypes[component.typename]++;\n        }\n    }\n\n    countCargo() {\n        const allCargoBays = this.rows.flat().filter(isCargoBay);\n        this.freeCargo = 0;\n        this.cargoTypes = {};\n        Object.values(types).filter(isCargoType).forEach(\n            type => this.cargoTypes[type.id] = 0);\n        for (let cargoBay of allCargoBays) {\n            this.freeCargo += cargoPerCargoBay - cargoBay.cargo.length;\n            for (let cargo of cargoBay.cargo) {\n                this.cargoTypes[cargo.typename]++;\n                // console.log(`countCargo found ${cargo.typename}, ${this.cargoTypes[cargo.typename]} at ${cargoBay.cellName}`)\n            }\n        }\n    }\n\n    addComponent(component: Component, row: number) {\n        component.ship = this;\n        // TODO: is isAlien\n        if (row < 0) {\n            this.rows.unshift([]);\n            this.rows.push([]);\n            this.offsets.unshift(0);\n            this.offsets.push(0);\n            row = 0;\n        }\n        if (row >= this.rows.length) {\n            this.rows.unshift([]);\n            this.rows.push([]);\n            this.offsets.unshift(0);\n            this.offsets.push(0);\n            row = this.rows.length - 1;\n        }\n        this.rows[row].push(component);\n    }\n\n    getCargo(kind: typeof Cargo, amount: number) {\n        // NOTE: can't take more than we have\n        if (amount > this.cargoTypes[kind.id]) return false;\n        this.cargoTypes[kind.id] -= amount;\n        this.freeCargo += amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            // filter out up to _amount_ items from cargo bays\n            // x=2;console.log([1,2,1,3,1,4,1,5].filter(v=>!(v==1&&x-->0)));\n            cargoBay.cargo = cargoBay.cargo.filter(cargo => !(cargo instanceof kind && amount-- > 0));\n            if (amount <= 0) return true;\n        }\n    }\n\n    getMissionBox(to: string, amount: number) {\n        // NOTE: can't take more than we have\n        if (amount > this.cargoTypes[MissionBox.id]) return false;\n        this.cargoTypes[MissionBox.id] -= amount;\n        this.freeCargo += amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            // filter out up to _amount_ items from cargo bays\n            // x=2;console.log([1,2,1,3,1,4,1,5].filter(v=>!(v==1&&x-->0)));\n            cargoBay.cargo = cargoBay.cargo.filter(cargo => !(cargo instanceof MissionBox && cargo.to == to && amount-- > 0));\n            if (amount <= 0) return true;\n        }\n    }\n\n    putCargo(kind: typeof Cargo, amount: number) {\n        if (amount > this.freeCargo) return false;\n        this.cargoTypes[kind.id] += amount;\n        this.freeCargo -= amount;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length < cargoPerCargoBay);\n        // TODO: sort\n        for (let cargoBay of allCargoBays) {\n            while (amount > 0 && cargoBay.cargo.length < cargoPerCargoBay) {\n                cargoBay.cargo.push(new (kind as unknown as new () => Cargo)());\n                amount--;\n            }\n            if (amount <= 0) return true;\n        }\n    }\n\n    putMissionBox(from: string, to: string, total: number) {\n        if (total > this.freeCargo) return false;\n        this.cargoTypes[MissionBox.id] += total;\n        this.freeCargo -= total;\n        const allCargoBays = this.rows.flat().filter(isCargoBay).filter(cargoBay => cargoBay.cargo.length < cargoPerCargoBay);\n        // TODO: sort\n        let amount = total;\n        for (let cargoBay of allCargoBays) {\n            while (amount > 0 && cargoBay.cargo.length < cargoPerCargoBay) {\n                let box = new MissionBox();\n                box.from = from;\n                box.to = to;\n                box.total = total;\n                cargoBay.cargo.push(box);\n                amount--;\n            }\n            if (amount <= 0) return true;\n        }\n    }\n\n    seenBy(pos: Point, myRadars: number) {\n        const dist = Math.hypot(pos.x - this.x, pos.y - this.y);\n        return myRadars >= dist + this.componentTypes[Cloak.id];\n    }\n\n    toJSON(): ShipData {\n        return {\n            'a': this.isAlien,\n            'n': this.name,\n            'c': this.color,\n            'o': this.offsets,\n            'r': this.rows.map(row => row.map(component => component.toJSON())),\n            'frX': this.fromPoint?.x,\n            'frY': this.fromPoint?.y,\n            'frT': this.fromTime,\n            'toP': this.toPlanet?.i,\n            'toT': this.toTime,\n        }\n    }\n\n    static fromJSON(data: ShipData, star?: Star, ship?: Ship) {\n        if (!ship) ship = new Ship();\n        ship.isAlien = data.a;\n        ship.name = data.n;\n        ship.color = data.c;\n        ship.offsets = data.o;\n        ship.rows = [];\n        for (let row = 0; row < data.r.length; row++) {\n            ship.rows[row] = [];\n            for (let c = 0; c < data.r[row].length; c++) {\n                ship.addComponent(fromJSON(data.r[row][c]) as Component, row);\n            }\n        }\n        ship.fromPoint = { 'x': data.frX, 'y': data.frY };\n        ship.fromTime = data.frT;\n        if (star) ship.toPlanet = star.planets[data.toP];\n        // ship.balanceBallast();\n        ship.fillBallastOpposite();\n        ship.countComponents();\n        return ship;\n    }\n\n    // functions used in drawing\n    get gridSize() {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x0': 0,\n                'x1': 0,\n                'y0': 0,\n                'y1': 0,\n                'w': 0,\n                'h': 0\n            }\n        } else {\n            let max_pos = 0\n            let max_neg = 0\n            for (let i = 0; i < this.rows.length; i++) {\n                max_pos = Math.max(max_pos, this.rows[i].length - this.offsets[i])\n                max_neg = Math.max(max_neg, this.offsets[i])\n            }\n            return {\n                'x0': 0,\n                'x1': this.rows.length - 1,\n                'y0': max_pos,\n                'y1': max_neg,\n                'w': this.rows.length,\n                'h': max_pos + max_neg + 1\n            }\n        }\n    }\n    rowToXY(row: number, i: number) {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0\n            }\n        } else {\n            if (i >= this.offsets[row]) {\n                return {\n                    'x': row,\n                    'y': 1 + (i - this.offsets[row])\n                }\n            } else {\n                return {\n                    'x': row,\n                    'y': (i - this.offsets[row])\n                }\n            }\n        }\n    }\n    get passage(): xywh {\n        if (this.isAlien) {\n            // TODO\n            return {\n                'x': 0,\n                'y': 0,\n                'w': 0,\n                'h': 0\n            }\n        } else {\n            return {\n                'x': 0,\n                'y': 0,\n                'w': this.rows.length,\n                'h': 1\n            }\n        }\n    }\n    oppositeComponent(a: Component) {\n        for (let row = 0; row <= this.rows.length; row++) {\n            let i = this.rows[row].indexOf(a)\n            if (i >= 0) {\n                return this.rows[this.rows.length - 1 - row][i]\n            }\n        }\n    }\n\n    static randomShip(size: number, ship?: Ship) {\n        const rowCount = 4\n        const noramalComponentTypes = Object.values(types).filter(isNormalComponentType);\n        const computerTypes = Object.values(types).filter(isComputerComponentType);\n        const componentTypes = noramalComponentTypes.concat(computerTypes);\n        const cargoTypes = Object.values(types).filter(isCargoType);\n        if (ship === undefined) ship = new Ship();\n        ship.color = randomFrom(shipColors);\n        ship.rows = [[], [], [], []]\n        ship.offsets = [0, 0, 0, 0]\n        for (let i = 0; i < size; i++) {\n            let componentType = randomFrom(componentTypes) as unknown as new () => Component\n            let component = new componentType()\n            if (component instanceof CargoBay) {\n                let cargos = randomInt(0, cargoPerCargoBay);\n                for (let j = 0; j < cargos; j++) {\n                    let cargoType = randomFrom(cargoTypes) as unknown as new () => Cargo\n                    component.cargo.push(new cargoType())\n                }\n            }\n            ship.addComponent(component, randomInt(0, rowCount - 1));\n        }\n        for (let i = 0; i < ship.rows.length; i++) {\n            ship.offsets[i] = randomInt(0, ship.rows[i].length)\n        }\n        ship.balanceBallast()\n        ship.countComponents()\n        return ship\n    }\n\n    static newBase() {\n        const ship = new Ship();\n        ship.color = 'black';\n        ship.rows = [[], []];\n        const components = shuffle([new NavigationComputer(), new Radar(), new TradingComputer(), new MissionComputer()])\n        for (let component of components)\n            ship.addComponent(component, randomInt(0, 1));\n        ship.offsets = [\n            randomInt(0, ship.rows[0].length),\n            randomInt(0, ship.rows[1].length)];\n        ship.balanceBallast()\n        ship.countComponents()\n        return ship\n    }\n\n    deBallastTail() {\n        // remove extra ballast from tail (top of the ship)\n        // Leaves the ship unbalanced, remember to run balanceBallast after\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1;\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].at(-1) instanceof Ballast) {\n                    this.rows[i].pop();\n                }\n            }\n        }\n    }\n    balanceBallast() {\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1\n            // balance offsets\n            for (var i = 0; i <= max; i++) {\n                while (this.offsets[i] < this.offsets[max - i]) {\n                    this.rows[i].unshift(new Ballast())\n                    this.offsets[i]++\n                }\n            }\n            // add ballast to balance \n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].length < this.rows[max - i].length) {\n                    this.rows[i].push(new Ballast())\n                }\n            }\n            // remove extra ballast from head\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i][0] instanceof Ballast\n                    && this.rows[max - i][0] instanceof Ballast) {\n                    this.rows[i].shift()\n                    this.rows[max - i].shift()\n                    this.offsets[i]--\n                    this.offsets[max - i]++\n                }\n            }\n            // remove extra ballast from tail\n            for (var i = 0; i <= max; i++) {\n                while (this.rows[i].at(-1) instanceof Ballast\n                    && this.rows[max - i].at(-1) instanceof Ballast) {\n                    this.rows[i].pop()\n                    this.rows[max - i].pop()\n                }\n            }\n            // TODO: remove empty rows?\n        }\n        this.fillBallastOpposite()\n    }\n\n    fillBallastOpposite() {\n        // record what's opposite to ballast\n        if (this.isAlien) {\n            //...\n        } else {\n            const max = this.rows.length - 1;\n            for (var i = 0; i <= max; i++) {\n                for (var j = 0; j <= this.rows[i].length; j++) {\n                    if (this.rows[i][j] instanceof Ballast) {\n                        (this.rows[i][j] as Ballast).opposite = this.rows[max - i][j].typename\n                    }\n                }\n            }\n        }\n    }\n    get topAirlock() {\n        // returns x-coordinate \n        // NOTE: putTwoShips assumes that airlock location is always counted from left side,\n        // i.e. return value=0 means \"leftmost column\"\n        if (this.isAlien) {\n            // TODO\n            return 0;\n        } else {\n            let maxLen = 0\n            for (let i = 0; i < this.rows.length; i++) {\n                maxLen = Math.max(maxLen, this.rows[i].length - this.offsets[i])\n            }\n            for (let i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].length - this.offsets[i] == maxLen)\n                    return i\n            }\n            return 0 // should never happen\n        }\n    }\n    get bottomAirlock() {\n        if (this.isAlien) {\n            // TODO\n            return 0;\n        } else {\n            const maxOffset = Math.max(...this.offsets);\n            return this.offsets.lastIndexOf(maxOffset);\n        }\n    }\n}", "import { ResourceCargo } from \"./cargo.js\";\nimport { planet_size, shipBaseSpeed } from \"./const.js\";\nimport { lineCrossesObj } from \"./geometry.js\";\nimport { makePlanets, Planet, PlanetType } from \"./planets.js\";\nimport { PlayerShip } from \"./playerShip.js\";\nimport { types } from \"./saveableType.js\";\nimport { Ship, ShipData } from \"./ship.js\";\nimport { seq, randomFrom, randomInt, shuffle } from \"./utils.js\";\n\n// 1. copypaste table from https://www.cssportal.com/css3-color-names/ to vim\n// 2. :%s/^\\t\\([^\\t]*\\)\\t#[^\\t]*\\t/['\\1', /\n// 3. :%s/$/],/\n// 4. copypaste from vim to JS console, assign to var data=[...]\n// 5. use RGBToHSL function from https://css-tricks.com/converting-color-spaces-in-javascript/, modified to return only 'l' as number\n// 6. out=data.map(x=>[x[0],RGBToHSL(x[1],x[2],x[3])])\n// 7. prompt('',JSON.stringify(out.filter(x=>x[1]>40).map(x=>x[0])))\nvar starColors = [\"AliceBlue\", \"AntiqueWhite\", \"Aqua\", \"Aquamarine\", \"Azure\", \"Beige\", \"Bisque\", \"BlanchedAlmond\", \"Blue\", \"BlueViolet\", \"Brown\", \"BurlyWood\", \"CadetBlue\", \"Chartreuse\", \"Chocolate\", \"Coral\", \"CornflowerBlue\", \"Cornsilk\", \"Crimson\", \"Cyan\", \"DarkGray\", \"DarkGrey\", \"DarkKhaki\", \"DarkOrange\", \"DarkOrchid\", \"DarkSalmon\", \"DarkSeaGreen\", \"DarkTurquoise\", \"DarkViolet\", \"DeepPink\", \"DeepSkyBlue\", \"DimGray\", \"DodgerBlue\", \"FireBrick\", \"FloralWhite\", \"Fuchsia\", \"Gainsboro\", \"GhostWhite\", \"Gold\", \"Goldenrod\", \"Gray\", \"GreenYellow\", \"Grey\", \"Honeydew\", \"HotPink\", \"IndianRed\", \"Ivory\", \"Khaki\", \"Lavender\", \"LavenderBlush\", \"LawnGreen\", \"LemonChiffon\", \"LightBlue\", \"LightCoral\", \"LightCyan\", \"LightGoldenrodYellow\", \"LightGray\", \"LightGreen\", \"LightGrey\", \"LightPink\", \"LightSalmon\", \"LightSeaGreen\", \"LightSkyBlue\", \"LightSlateGray\", \"LightSlateGrey\", \"LightSteelBlue\", \"LightYellow\", \"Lime\", \"LimeGreen\", \"Linen\", \"Magenta\", \"MediumAquamarine\", \"MediumBlue\", \"MediumOrchid\", \"MediumPurple\", \"MediumSeaGreen\", \"MediumSlateBlue\", \"MediumSpringGreen\", \"MediumTurquoise\", \"MediumVioletRed\", \"MintCream\", \"MistyRose\", \"Moccasin\", \"NavajoWhite\", \"OldLace\", \"Orange\", \"OrangeRed\", \"Orchid\", \"PaleGoldenrod\", \"PaleGreen\", \"PaleTurquoise\", \"PaleVioletRed\", \"PapayaWhip\", \"PeachPuff\", \"Peru\", \"Pink\", \"Plum\", \"PowderBlue\", \"Red\", \"RosyBrown\", \"RoyalBlue\", \"Salmon\", \"SandyBrown\", \"Seashell\", \"Sienna\", \"Silver\", \"SkyBlue\", \"SlateBlue\", \"SlateGray\", \"SlateGrey\", \"Snow\", \"SpringGreen\", \"SteelBlue\", \"Tan\", \"Thistle\", \"Tomato\", \"Turquoise\", \"Violet\", \"Wheat\", \"White\", \"WhiteSmoke\", \"Yellow\", \"YellowGreen\"];\n\nfunction mkgrid(star: Star, size: number) {\n\tvar grid: (Star | undefined)[][] = seq(size).map(x => []);\n\tvar center = (size - 1) / 2;\n\tfor (var x = Math.floor(center); x <= Math.ceil(center); x++) {\n\t\tfor (var y = Math.floor(center); y <= Math.ceil(center); y++) {\n\t\t\tgrid[x + 1][y + 1] = star;\n\t\t}\n\t}\n\treturn grid;\n}\n\n// function countJobs(planets: Planet[]) {\n// \tvar data = { 'null': { buys: 0, sells: 0 } };\n// \tresources.forEach(x => { data[x] = { buys: 0, sells: 0 } });\n// \tplanets.forEach((planet: Planet) => { data[String(planet.buys)].buys++; data[String(planet.sells)].sells++ });\n// \tvar jobs = 0;\n// \tresources.forEach(x => { jobs += Math.min(data[x].buys, data[x].sells) });\n// \treturn jobs;\n// }\n\nexport interface StarData {\n\tc: string,\n\tsz: number,\n\t// n: number[] | false,\n\tp: [number, number, number, ShipData?][] | false,\n\tsh: ShipData[] | false,\n\t// v: boolean,\n}\n\nexport class Star {\n\tcolor: string;\n\tsize: number;\n\t// visited: boolean;\n\t// x: number; y: number;\n\tbright: boolean;\n\tname: string;\n\t// neighbours: Directions;\n\tgrid: (Star | Planet | undefined)[][];\n\tplanets: Planet[];\n\tships: Ship[];\n\n\tconstructor(load?: StarData) {\n\t\tif (!load) {\n\t\t\tload = {\n\t\t\t\tc: randomFrom(starColors),\n\t\t\t\tsz: randomInt(5, 9),\n\t\t\t\t// n: false,\n\t\t\t\tp: false,\n\t\t\t\tsh: false,\n\t\t\t\t// v: false,\n\t\t\t}\n\n\t\t}\n\t\t// TODO: make sure colors don't repeat\n\t\tthis.color = load.c;\n\t\tthis.size = load.sz;\n\t\t// this.visited = load.v;\n\t\t// this.x = this.y = this.size / 2;\n\t\tthis.bright = false;\n\t\tthis.name = this.color;\n\t\tif (this.size % 2 == 0) {\n\t\t\tthis.bright = true;\n\t\t\tthis.name = 'bright ' + this.name;\n\t\t}\n\t\t// this.neighbours = new Directions(this);\n\t\t// if (load.n) {\n\t\t// \tfor (var value of load.n) {\n\t\t// \t\tthis.neighbours.add(new Direction(value, this));\n\t\t// \t}\n\t\t// }\n\t\tthis.grid = mkgrid(this, this.size);\n\t\tif (!load.p) load.p = makePlanets(this.size); //from planets.js\n\t\tthis.planets = load.p.map((x, i) => {\n\t\t\tconst p = new Planet(x[0], x[1], x[2], i);\n\t\t\tif (x[3]) p.base = Ship.fromJSON(x[3]);\n\t\t\telse p.base = Ship.newBase();\n\t\t\treturn p;\n\t\t});\n\t\tfor (var planet of this.planets) {\n\t\t\t// add neighbours\n\t\t\tplanet.neighbours = shuffle(this.planets.filter(p => p != planet && !this.pathCollides(p, planet)));\n\t\t\t// add planet to grid\n\t\t\tthis.grid[Math.floor(planet.x)][Math.floor(planet.y)] = planet;\n\t\t}\n\t\tif (load.sh) {\n\t\t\tthis.ships = load.sh.map(s => {\n\t\t\t\tif (s.p) return PlayerShip.fromJSON(s, this);\n\t\t\t\treturn Ship.fromJSON(s, this);\n\t\t\t});\n\t\t}\n\t\t// this.jobs = countJobs(this.planets);\n\t\tthis.setRatios();\n\t}\n\n\t// link(other: Star, direction: number | Direction) {\n\t// \tif (direction instanceof Direction) {\n\t// \t\tdirection.target = other;\n\t// \t\tother.neighbours.link(direction.value + 180, this);\n\t// \t} else {\n\t// \t\tthis.neighbours.link(direction, other);\n\t// \t\tother.neighbours.link(direction + 180, this);\n\t// \t}\n\t// }\n\n\tpathCollides(a: Planet, b: Planet): boolean {\n\t\tif (lineCrossesObj(a, b, { 'x': this.size / 2, 'y': this.size / 2 }, 0.5)) return true;\n\t\tfor (var planet of this.planets) {\n\t\t\tif (planet != a && planet != b &&\n\t\t\t\tlineCrossesObj(a, b, planet, planet_size)) return true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tcomputeRareResources(planets?: Planet[]) {\n\t\tif (planets === undefined) planets = this.planets;\n\t\tconst producedResources = planets.map(planet => planet.sells);\n\t\tconst rareResources = Object.values(types).filter(resource => resource instanceof ResourceCargo && !producedResources.includes(resource)) as (typeof ResourceCargo)[];\n\t\tconst abundantResources = planets.filter(planet => planet.buys === null).map(planet => planet.sells) as (typeof ResourceCargo)[];\n\t\treturn {\n\t\t\t'exotic': rareResources,\n\t\t\t'abundant': abundantResources\n\t\t}\n\t}\n\n\tsetRatios() {\n\t\tconst ar = this.computeRareResources();\n\t\tfor (let planet of this.planets) {\n\t\t\tif (planet.buys === null) planet.ratio = 2; //gives for free\n\t\t\telse if (ar.abundant.includes(planet.buys)) planet.ratio = 1;\n\t\t\telse if (ar.exotic.includes(planet.buys)) planet.ratio = 2;\n\t\t\telse planet.ratio = 1.4;\n\t\t}\n\t}\n\n\taddRandomShips(now: number) {\n\t\tthis.ships = [];\n\t\tfor (let i = 0; i < this.planets.length; i++) {\n\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\tif (this.planets[i].neighbours.indexOf(this.planets[j]) < 0) continue;\n\t\t\t\tlet s = Ship.randomShip(15);\n\t\t\t\tconst dist = Math.hypot(this.planets[i].x - this.planets[j].x, this.planets[i].y - this.planets[j].y);\n\t\t\t\tconst flyTime = dist / shipBaseSpeed;\n\t\t\t\tthis.planets[i].dispatch(s, now - flyTime);\n\t\t\t\tthis.ships.push(s);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON(): StarData {\n\t\treturn {\n\t\t\tc: this.color,\n\t\t\tsz: this.size,\n\t\t\t// n: Array.from(this.neighbours).map(x => x.value),\n\t\t\tp: this.planets.map(x => x.toJSON()),\n\t\t\t// v: this.visited,\n\t\t\tsh: this.ships.map(x => x.toJSON()),\n\t\t};\n\t}\n}\n\n", "import { showDate } from \"./draw\";\nimport { setStatus } from \"./index\";\nimport { PlayerShip, isPlayerShip } from \"./playerShip\";\nimport { fromJSON } from \"./saveableType\";\nimport { Ship } from \"./ship\";\nimport { Star } from \"./stars\";\nimport { walkManager } from \"./walkManager\";\n\nexport class GameState {\n    star: Star;\n    playerShip: PlayerShip;\n    walkManager: walkManager;\n    walkCTX: CanvasRenderingContext2D;\n    now = 0;\n    lastTickTimestamp: number;\n    lastDate: number;\n    _timeFlies = false;\n    tickInterval = 0;\n\n    get timeFlies() { return this._timeFlies };\n    set timeFlies(value: boolean) {\n        // console.trace(value);\n        if (this._timeFlies == value) return;\n        this._timeFlies = value;\n        if (value) {\n            const t = this;\n            this.lastTickTimestamp = performance.now();\n            this.tickInterval = setInterval(function () { t.tick() }, 1000);\n        } else {\n            clearInterval(this.tickInterval);\n        }\n\n    };\n\n    tick(ts?: number): boolean {\n        if (!this._timeFlies) return false;\n        if (!ts) ts = performance.now();\n        if (ts <= this.lastTickTimestamp) return true;\n        this.now += Math.max(0, Math.min(ts - this.lastTickTimestamp, 1000)) / 1000;\n        this.lastTickTimestamp = ts;\n        const newDate = Math.floor(this.now);\n        if (this.lastDate != newDate) {\n            showDate(newDate);\n            this.lastDate = newDate;\n            const tripRemain = Math.ceil(this.playerShip.toTime - this.now);\n            setStatus(`Approaching ${this.playerShip.toPlanet.name} planet in ${tripRemain} days`);\n        }\n        for (let ship of this.star.ships) {\n            ship.updateSpaceXY(this.now);\n        }\n        return true;\n    };\n\n    depart() {\n        // console.log(this.playerShip);\n        // ship.fromPlanet = this;\n        // ship.toPlanet = dest;\n        // ship.fromTime = departTime;\n\n        // if (this.playerShip.onPlanet !== null) {\n        //     this.playerShip.fromPlanet = this.playerShip.onPlanet;\n        // }\n        this.timeFlies = true;\n        // this.playerShip.flying = true;\n        this.playerShip.onPlanet = null;\n        this.walkManager.detach(this.walkCTX);\n        this.lastDate = -1;\n        this.tick();\n    };\n\n    arrive() {\n        this.playerShip.onPlanet = this.playerShip.toPlanet;\n        this.playerShip.x = this.playerShip.onPlanet.x;\n        this.playerShip.y = this.playerShip.onPlanet.y;\n        // this.playerShip.flying = false;\n        this.timeFlies = false;\n        this.playerShip.onPlanet.onEnter();\n        this.walkManager.attach(this.walkCTX, this.playerShip.onPlanet.base);\n        setStatus(`Docked to base at ${this.playerShip.onPlanet.name} planet`);\n        localStorage.space2d3_2 = JSON.stringify(this.toJSON());\n    };\n\n    toJSON() {\n        return {\n            'v': 1,\n            's': this.star.toJSON(),\n            'n': this.now,\n        }\n    }\n\n    static fromJSON(a): GameState | false {\n        if (a.v != 1) return false;\n        const gs = new GameState();\n        gs.star = new Star(a.s);\n        const playerShips = gs.star.ships.filter(isPlayerShip);\n        if (playerShips.length != 1) return false;\n        gs.playerShip = playerShips[0];\n        gs.now = a.n;\n        return gs;\n    }\n}\n\nexport function loadGS(data) {\n    const ret = GameState.fromJSON(data);\n    if (ret) {\n        gs = ret;\n        return true;\n    }\n    return false;\n}\n\nexport function newGS() {\n    gs = new GameState();\n}\n\nexport let gs: GameState;", "import { gs } from \"./gameState\";\nimport { setStatus } from \"./index\";\nimport { Planet } from \"./planets\";\nimport { Ship, ShipData } from \"./ship\";\nimport { Star } from \"./stars\";\n\n\nexport class PlayerShip extends Ship {\n    // flying = false;\n    onPlanet: Planet | null;\n\n    updateSpaceXY(now: number) {\n        // console.log('updateSpaceXY', now, this.toTime);\n        super.updateSpaceXY(now, false);\n        if (now >= this.toTime) gs.arrive();\n    }\n\n    static randomShip(size: number): PlayerShip {\n        let ship = new PlayerShip();\n        Ship.randomShip(size, ship); //also fills in properties of the `ship` argument\n        ship.color = 'white';\n        return ship;\n    }\n\n    toJSON(): ShipData {\n        const data = super.toJSON();\n        data.p = true;\n        if (this.onPlanet != null) data.on = this.onPlanet.i;\n        return data;\n    }\n\n    static fromJSON(data: ShipData, star: Star) {\n        let ship = new PlayerShip();\n        Ship.fromJSON(data, star, ship);\n        return ship;\n    }\n}\n\nexport function isPlayerShip(ship: Ship): ship is PlayerShip { return ship instanceof PlayerShip };\n", "import { Component } from \"./components\"\nimport { componentSize } from \"./draw\"\nimport { Ship } from \"./ship\"\n\nclass WalkPoint {\n    canBeHere = false\n    canGoX = false\n    canGoY = false\n    ship?: Ship\n    component?: Component\n}\n\nexport class WalkMap {\n    map: Array<Array<WalkPoint>> = []\n    constructor(maxX: number, maxY: number) {\n        for (let x = 0; x <= maxX; x++) {\n            this.map[x] = []\n            for (let y = 0; y <= maxY; y++) {\n                this.map[x][y] = new WalkPoint()\n            }\n        }\n    }\n}\n\nexport class Walker {\n    x: number\n    y: number\n    map: WalkMap\n    box: HTMLElement\n    human: HTMLElement\n    canvas: HTMLCanvasElement\n    onEnter: (arg0?: Component) => void\n\n    goX(sign: number) {\n        if (!this.map.map[this.x][this.y].canGoX) return false;\n        if (!this.map.map[this.x + sign][this.y].canBeHere) return false;\n        this.x += sign\n        this.reposition()\n        this.onEnter(this.map.map[this.x][this.y].component)\n        return true\n    }\n    goY(sign: number, sure?: boolean) {\n        if (!sure && !this.map.map[this.x][this.y].canGoY) return false;\n        if (!this.map.map[this.x][this.y + sign].canBeHere) return false;\n        this.y += sign\n        this.reposition()\n        this.onEnter(this.map.map[this.x][this.y].component)\n        return true\n    }\n\n    goUp() { this.goY(-1); this.human.style.transform = 'rotate(0deg)' }\n    goDn(sure?: boolean) { this.goY(1, sure); this.human.style.transform = 'rotate(180deg)' }\n    goLt() { this.goX(-1); this.human.style.transform = 'rotate(-90deg)' }\n    goRt() { this.goX(1); this.human.style.transform = 'rotate(90deg)' }\n\n    jumpTo(x: number, y: number, callOnEnter = true) {\n        this.x = x;\n        this.y = y;\n        this.reposition(true);\n        if (callOnEnter) this.onEnter(this.map.map[x][y].component);\n    }\n\n    reposition(fast?: boolean) {\n        if (fast) {\n            this.canvas.classList.add('notransition');\n        }\n        let walkerOnCanvas_x = (this.x + 0.5) * componentSize\n        let walkerOnDiv_x = this.box.offsetWidth / 2\n        let canvasOffset_x = walkerOnDiv_x - walkerOnCanvas_x\n        this.canvas.style.left = canvasOffset_x + 'px'\n\n        let walkerOnCanvas_y = (this.y + 0.5) * componentSize\n        let walkerOnDiv_y = this.box.offsetHeight / 2\n        let canvasOffset_y = walkerOnDiv_y - walkerOnCanvas_y\n        this.canvas.style.top = canvasOffset_y + 'px'\n        if (fast) {\n            this.canvas.offsetHeight; // Trigger a reflow, flushing the CSS changes\n            this.canvas.classList.remove('notransition');\n        }\n    }\n}", "import { WalkMap, Walker } from \"./walker\";\nimport { Ship } from \"./ship\";\nimport { componentSize, drawShip, drawAirlock } from \"./draw\";\n\nexport class walkManager {\n    walker: Walker;\n    oneShipData: { x0: number; x1: number; y0: number; y1: number; w: number; h: number; };\n    twoShipsData: { ax0: number; ay0: number; airlock_x: number; airlock_y: number; bx0: number; by0: number; max_x: number; max_y: number; }\n    hasSecondShip = false;\n    myShip: Ship;\n    secondShip: Ship;\n\n    putTwoShips(a: Ship, b: Ship) {\n        const a_sz = a.gridSize;\n        const b_sz = b.gridSize;\n        const a_lock = a.bottomAirlock;\n        const b_lock = b.topAirlock;\n        const airlock_x = Math.max(a_lock, b_lock) + 1;\n        const airlock_y = a_sz.h + 1;\n        const max_x = airlock_x + Math.max(a_sz.w - a_lock, b_sz.w - b_lock);\n        const max_y = airlock_y + b_sz.h + 1;\n        this.myShip = b;\n        this.secondShip = a;\n        this.hasSecondShip = true;\n        this.twoShipsData = {\n            'ax0': airlock_x - a_lock + a_sz.x0,\n            'ay0': a_sz.y0 + 1,\n            'airlock_x': airlock_x,\n            'airlock_y': airlock_y,\n            'bx0': airlock_x - b_lock + b_sz.x0,\n            'by0': airlock_y + b_sz.y0 + 1,\n            'max_x': max_x,\n            'max_y': max_y,\n        };\n    }\n\n    drawTwoShips(ctx: CanvasRenderingContext2D, a: Ship, b: Ship) {\n        this.putTwoShips(a, b);\n        const c = this.twoShipsData;\n        //console.log('putTwoShips says', a.gridSize, b.gridSize, a.bottomAirlock, b.topAirlock, c)\n        const m = new WalkMap(c.max_x, c.max_y);\n        this.walker.map = m;\n        ctx.canvas.width = componentSize * (c.max_x + 1);\n        ctx.canvas.height = componentSize * (c.max_y + 1);\n\n        drawShip(ctx, c.ax0, c.ay0, a, m);\n        drawShip(ctx, c.bx0, c.by0, b, m);\n        drawAirlock(ctx, c.airlock_x, c.airlock_y, m);\n    }\n\n    drawMyShip(ctx: CanvasRenderingContext2D) {\n        this.hasSecondShip = false;\n        const gs = this.oneShipData = this.myShip.gridSize;\n        const m = this.walker.map = new WalkMap(gs.w + 1, gs.h + 1);\n        ctx.canvas.width = componentSize * (gs.w + 2);\n        ctx.canvas.height = componentSize * (gs.h + 2);\n        drawShip(ctx, gs.x0 + 1, gs.y0 + 1, this.myShip, m);\n    }\n\n    detach(ctx: CanvasRenderingContext2D) {\n        if (!this.hasSecondShip) return false;\n        let moveDnFromAirlock = false;\n        if (this.walker.y == this.twoShipsData.airlock_y) {\n            //player stands in airlock\n            // assume my ship is lower ship\n            this.walker.y++;\n            moveDnFromAirlock = true;\n        }\n        this.secondShip.playerOnShip = (this.walker.y < this.twoShipsData.airlock_y);\n        this.myShip.playerOnShip = (this.walker.y > this.twoShipsData.airlock_y);\n        if (this.walker.y < this.twoShipsData.airlock_y) {\n            // player on top (\"a\") ship\n            // TODO\n        } else {\n            // player on bottom (\"b\") ship, which is also my ship\n            const player_x = this.myShip.playerX = this.walker.x - this.twoShipsData.bx0;\n            const player_y = this.myShip.playerY = this.walker.y - this.twoShipsData.by0;\n            this.drawMyShip(ctx);\n            if (moveDnFromAirlock) {\n                this.walker.jumpTo(this.oneShipData.x0 + 1 + player_x, this.oneShipData.y0 + player_y, false);\n                this.walker.goDn(true);\n            } else {\n                this.walker.jumpTo(this.oneShipData.x0 + 1 + player_x, this.oneShipData.y0 + 1 + player_y, false);\n            }\n        }\n    }\n\n    attach(ctx: CanvasRenderingContext2D, otherShip: Ship) {\n        if (this.hasSecondShip) return false;\n        // player coordinates relative to ship\n        const player_x = this.walker.x - 1 - this.oneShipData.x0;\n        const player_y = this.walker.y - 1 - this.oneShipData.y0;\n        this.drawTwoShips(ctx, otherShip, this.myShip);\n        this.walker.jumpTo(this.twoShipsData.bx0 + player_x, this.twoShipsData.by0 + player_y);\n    }\n\n    reattach(ctx: CanvasRenderingContext2D) {\n        if (!this.hasSecondShip) return false;\n        if (this.walker.y >= this.twoShipsData.airlock_y) {\n            // assuming player is on the top ship\n            return\n        }\n        const player_x = this.secondShip.playerX = this.walker.x - this.twoShipsData.ax0;\n        const player_y = this.secondShip.playerY = this.walker.y - this.twoShipsData.ay0;\n        this.drawTwoShips(ctx, this.secondShip, this.myShip);\n        this.walker.jumpTo(this.twoShipsData.ax0 + player_x, this.twoShipsData.ay0 + player_y);\n    }\n}\n", "//import { } from \"./draw.js\";\nimport { PlayerShip } from \"./playerShip.js\";\nimport { Ship, ShipData } from \"./ship.js\";\nimport { CargoBay, Component } from \"./components.js\";\nimport { fromJSON, types } from \"./saveableType.js\";\nimport { Food, Iron, Radioactives, Rocket, Water } from \"./cargo.js\";\nimport { componentSize, drawShip, showDate } from \"./draw.js\";\nimport { walkManager } from \"./walkManager.js\";\nimport { WalkMap, Walker } from \"./walker.js\";\nimport { Star } from \"./stars.js\";\nimport { GameState, gs, loadGS, newGS } from \"./gameState.js\";\nimport { shipBaseSpeed } from \"./const.js\";\n\nexport function gebi(id: string) {\n    const element = document.getElementById(id);\n    if (!element) throw ReferenceError(`element ${id} not found`);\n    return element;\n}\nexport function gibi(id: string) {\n    const element = gebi(id);\n    if (!(element instanceof HTMLInputElement)) throw ReferenceError(`element ${id} is not input`);\n    return element;\n}\n\nif (location.hostname == 'localhost' || location.hostname == '127.0.0.1') {\n    new EventSource('/esbuild').addEventListener('change', () => location.reload());\n}\n\n// const newEasyShip = new PlayerShip();\n// newEasyShip.name = 'Your Ship';\n// newEasyShip.color = 'white';\n// newEasyShip.rows = [[], []];\n// const cb = new CargoBay();\n// cb.cargo.push(new Water());\n// cb.cargo.push(new Food());\n// cb.cargo.push(new Iron());\n// cb.cargo.push(new Radioactives());\n// newEasyShip.addComponent(cb, 0);\n// newEasyShip.offsets = [0, 0];\n// newEasyShip.balanceBallast();\n// newEasyShip.countComponents();\n// newEasyShip.fromPoint = { 'x': 0, 'y': 0 };\n// newEasyShip.fromTime = -1;\n// newEasyShip.toPlanet = { 'i': 0 };\n// newEasyShip.toTime = 0;\n// console.log(JSON.stringify(newEasyShip.toJSON()));\n\nconst newEasyShip = { \"a\": false, \"n\": \"Your Ship\", \"c\": \"white\", \"o\": [0, 0], \"r\": [[{ \"t\": \"CargoBay\", \"c\": [{ \"t\": \"Water\" }, { \"t\": \"Food\" }, { \"t\": \"Iron\" }, { \"t\": \"Radioactives\" }] }], [{ \"t\": \"Ballast\" }]], \"frX\": 0, \"frY\": 0, \"frT\": -1, \"toP\": 0, \"toT\": 0, \"p\": true }\n\n//var s = Ship.randomShip(1);\n//var m = new WalkMap(0, 0)\nvar w = new Walker()\nvar wm = new walkManager()\nwm.walker = w;\n\nvar c = gebi(\"myCanvas\") as HTMLCanvasElement;\nvar ctx = c.getContext(\"2d\") as CanvasRenderingContext2D;\n\nw.box = gebi('canvasBox')\nw.human = gebi('human')\nw.canvas = c\nw.onEnter = onEnter\nwindow.onresize = () => { gs.walkManager.walker.reposition(true) }\n\nfunction newGame(shipData?: ShipData) {\n    newGS();\n    gs.star = new Star();\n    gs.star.addRandomShips(0);\n    if (shipData) gs.playerShip = PlayerShip.fromJSON(shipData, gs.star);\n    else gs.playerShip = PlayerShip.randomShip(15);\n    gs.star.ships.push(gs.playerShip);\n    gs.playerShip.planTrip({ x: gs.star.planets[0].x - shipBaseSpeed, y: gs.star.planets[0].y }, gs.star.planets[0], -1);\n    gs.now = 0;\n    startGame();\n}\n\nfunction loadGame() {\n    if (!loadGS(JSON.parse(localStorage.space2d3_2))) return false;\n    startGame();\n    return true;\n}\n\nfunction startGame() {\n    wm.myShip = gs.playerShip;\n    wm.drawMyShip(ctx);\n    w.jumpTo(wm.oneShipData.x0 + 1, wm.oneShipData.y0 + 1);\n    gs.walkManager = wm;\n    gs.walkCTX = ctx;\n    gebi('main').style.display = 'flex';\n    gs.arrive();\n    showDate(Math.floor(gs.now));\n    window.gs = gs;\n}\n\ngebi('newGameEasy').onclick = () => { newGame(newEasyShip) };\ngebi('newGameHard').onclick = () => { newGame() };\n\nif (localStorage.space2d3_2) {\n    if (!loadGame()) {\n        localStorage.space2d3_2 = prompt('Error loading game. Fix savegame data below or press Cancel to delete savegame and start anew', localStorage.space2d3_2);\n        location.reload();\n    }\n} else (gebi('newGameDialog') as HTMLDialogElement).showModal();\n\ngebi('newGameButton').onclick = () => {\n    gebi('newGameCancelBox').style.display = '';\n    (gebi('newGameDialog') as HTMLDialogElement).showModal();\n};\n\nwindow.onkeypress = (e) => {\n    switch (e.key) {\n        case 'w': w.goUp(); break;\n        case 'a': w.goLt(); break;\n        case 's': w.goDn(); break;\n        case 'd': w.goRt(); break;\n    }\n}\n\nfunction onEnter(c?: Component) {\n    if (!c) return;\n    gebi('currentComponent').innerHTML = `#${c.typename} {display:block}`\n    if (c.cellName)\n        gebi('componentLegend').innerText = `${c.cellName}: ${c.typename}`\n    else\n        gebi('componentLegend').innerText = `${c.typename}`\n    c.onEnter(gs)\n}\n\nexport function setStatus(s: string) {\n    gebi('status').innerText = s;\n}\n"],
  "mappings": "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",
  "names": ["SaveableObject", "type", "data", "fromJSON", "types", "addType", "id", "Cargo", "SaveableObject", "isCargoType", "type", "UsefulCargo", "Rocket", "addType", "Fuel", "ResourceCargo", "Water", "Iron", "Food", "Radioactives", "MissionBox", "data", "ret", "isMissionBox", "item", "shipColors", "randomInt", "a", "b", "randomFrom", "shuffle", "array", "seq", "Component", "SaveableObject", "gs", "isComponentType", "type", "UselessComponent", "Airlock", "gebi", "addType", "Passage", "Ballast", "Debris", "_Debris", "data", "a", "NormalComponent", "isNormalComponentType", "ComputerComponent", "CargoBay", "_CargoBay", "x", "fromJSON", "isCargoBay", "component", "Radar", "ctx", "drawRadar", "ts", "c", "draw_star", "ship", "draw_ships", "Cloak", "ComputerComponent", "NormalComponent", "isComputerComponentType", "type", "BaseOnlyComputerComponent", "NavigationComputer", "value", "planet", "i", "time", "gs", "selected", "disabled", "id", "gebi", "p", "a", "b", "c", "ctx", "draw_planet", "PlayerShip", "el", "addType", "TradingComputer", "giftAmount", "slider", "giveAmount", "getAmount", "MissionComputer", "n", "callback", "rows", "seq", "allCargoBays", "isCargoBay", "missionBoxes", "cargoBay", "isMissionBox", "missionBoxesFromHere", "box", "rewardCargos", "randomInt", "x", "Rocket", "Fuel", "completely", "CargoBay", "noramalComponentTypes", "types", "isNormalComponentType", "randomFrom", "componentSize", "componentOffset", "drawComponent", "ctx", "x", "y", "ship", "component", "map", "componentTitle", "ComputerComponent", "Cloak", "drawPassage", "x0", "y0", "p", "Passage", "drawAirlock", "Airlock", "drawShip", "row", "i", "xy", "draw_ship", "cell_size", "myRadars", "PlayerShip", "r", "draw_planet", "planet", "grd", "draw_star", "star", "max_size", "center", "draw_ships", "ships", "gs", "showDate", "today", "gebi", "year", "month", "day", "normVector", "x", "y", "d", "scalarMul", "v1", "v2", "dotOnLine", "a", "b", "p", "v", "m", "lineCrossesObj", "size", "planetTypes", "resources", "Water", "Iron", "Food", "Radioactives", "planetNamesTable", "ret", "buy", "sell", "Planet", "x", "y", "type_n", "i", "type", "p", "ship", "departTime", "dest", "randomFrom", "noramalComponentTypes", "types", "isNormalComponentType", "isBad", "size", "center", "makePlanets", "thisPlanetTypes", "shuffle", "seq", "_n", "bad", "xx", "yy", "Ship", "_Ship", "now", "allowDispatch", "flightProgress", "fromPoint", "toPlanet", "fromTime", "flyTime", "x", "types", "isComponentType", "type", "components", "component", "allCargoBays", "isCargoBay", "isCargoType", "cargoBay", "cargo", "row", "kind", "amount", "to", "MissionBox", "from", "total", "box", "pos", "myRadars", "dist", "Cloak", "data", "star", "ship", "c", "fromJSON", "max_pos", "max_neg", "i", "a", "size", "noramalComponentTypes", "isNormalComponentType", "computerTypes", "isComputerComponentType", "componentTypes", "cargoTypes", "randomFrom", "shipColors", "componentType", "CargoBay", "cargos", "randomInt", "j", "cargoType", "shuffle", "NavigationComputer", "Radar", "TradingComputer", "MissionComputer", "max", "Ballast", "maxLen", "maxOffset", "starColors", "mkgrid", "star", "size", "grid", "seq", "x", "center", "y", "Star", "load", "randomFrom", "randomInt", "makePlanets", "i", "p", "Planet", "Ship", "planet", "shuffle", "s", "PlayerShip", "a", "b", "lineCrossesObj", "planets", "producedResources", "rareResources", "types", "resource", "ResourceCargo", "abundantResources", "ar", "now", "j", "flyTime", "GameState", "_GameState", "value", "ts", "newDate", "showDate", "tripRemain", "setStatus", "ship", "a", "gs", "Star", "playerShips", "isPlayerShip", "loadGS", "data", "ret", "newGS", "PlayerShip", "_PlayerShip", "Ship", "now", "gs", "size", "ship", "data", "star", "isPlayerShip", "WalkPoint", "WalkMap", "maxX", "maxY", "x", "y", "Walker", "sign", "sure", "callOnEnter", "fast", "walkerOnCanvas_x", "componentSize", "canvasOffset_x", "walkerOnCanvas_y", "canvasOffset_y", "walkManager", "a", "b", "a_sz", "b_sz", "a_lock", "b_lock", "airlock_x", "airlock_y", "max_x", "max_y", "ctx", "c", "m", "WalkMap", "componentSize", "drawShip", "drawAirlock", "gs", "moveDnFromAirlock", "player_x", "player_y", "otherShip", "gebi", "id", "element", "gibi", "newEasyShip", "w", "Walker", "wm", "walkManager", "c", "ctx", "onEnter", "gs", "newGame", "shipData", "newGS", "Star", "PlayerShip", "startGame", "loadGame", "loadGS", "showDate", "e", "setStatus", "s"]
}
